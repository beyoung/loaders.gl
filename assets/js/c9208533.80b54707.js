"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1202],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="BSON",l={unversionedId:"modules/bson/formats/bson",id:"modules/bson/formats/bson",title:"BSON",description:'The BSON ("Binary JSON") specification defines a binary format for storing JSON data in a more efficient and type safe way, including:',source:"@site/../docs/modules/bson/formats/bson.md",sourceDirName:"modules/bson/formats",slug:"/modules/bson/formats/bson",permalink:"/docs/modules/bson/formats/bson",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/bson/formats/bson.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/modules/bson/"},next:{title:"Overview",permalink:"/docs/modules/csv/"}},s={},p=[{value:"Data types and syntax",id:"data-types-and-syntax",level:2},{value:"EJSON (Extended JSON)",id:"ejson-extended-json",level:2},{value:"Efficiency",id:"efficiency",level:2},{value:"History",id:"history",level:2},{value:"Example",id:"example",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bson"},"BSON"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://bsonspec.org/"},"BSON"),' ("Binary JSON") specification defines a binary format for storing JSON data in a more efficient and type safe way, including: '),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"associative arrays (also known as name-value pairs)"),(0,r.kt)("li",{parentName:"ul"},"integer indexed arrays"),(0,r.kt)("li",{parentName:"ul"},"and a suite of fundamental scalar types.  ")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/modules/bson"},(0,r.kt)("inlineCode",{parentName:"a"},"@loaders.gl/bson"))," module provides support for working with the BSON format."),(0,r.kt)("h2",{id:"data-types-and-syntax"},"Data types and syntax"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The following information is heavily based on ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/BSON"},"Wikipedia"),".")),(0,r.kt)("p",null,"The topmost element in a BSON structure must be of type BSON object and contains 1 or more elements, where an element consists of a field name, a type, and a value. Field names are strings. Types include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Unicode string (using the UTF-8 encoding)"),(0,r.kt)("li",{parentName:"ul"},"32 bit integer"),(0,r.kt)("li",{parentName:"ul"},"64 bit integer"),(0,r.kt)("li",{parentName:"ul"},"double (64-bit IEEE 754 floating point number)"),(0,r.kt)("li",{parentName:"ul"},"decimal128 (128-bit IEEE 754-2008 floating point number; Binary Integer Decimal (BID) variant), suitable as a carrier for - decimal-place sensitive financial data and arbitrary precision numerics with 34 decimal digits of precision, a max value of approximately 106145"),(0,r.kt)("li",{parentName:"ul"},"datetime w/o time zone (long integer number of milliseconds since the Unix epoch)"),(0,r.kt)("li",{parentName:"ul"},"byte array (for arbitrary binary data)"),(0,r.kt)("li",{parentName:"ul"},"boolean (true and false)"),(0,r.kt)("li",{parentName:"ul"},"null"),(0,r.kt)("li",{parentName:"ul"},"BSON object"),(0,r.kt)("li",{parentName:"ul"},"BSON array"),(0,r.kt)("li",{parentName:"ul"},"JavaScript code"),(0,r.kt)("li",{parentName:"ul"},"MD5 binary data"),(0,r.kt)("li",{parentName:"ul"},'Regular expression (Perl compatible regular expressions ("PCRE") version 8.41 with UTF-8 support.')),(0,r.kt)("h2",{id:"ejson-extended-json"},"EJSON (Extended JSON)"),(0,r.kt)("p",null,'An important differentiator to JSON is that BSON contains types not present in JSON (e.g. datetime and byte array) and offers type-strict handling for several numeric types instead of a universal "number" type. For situations where these additional types need to be represented in a textual way, MongoDB\'s Extended JSON format can be used.'),(0,r.kt)("h2",{id:"efficiency"},"Efficiency"),(0,r.kt)("p",null,"Compared to JSON, BSON is designed to be efficient both in storage space and scan-speed. Large elements in a BSON document are prefixed with a length field to facilitate scanning. In some cases, BSON will use more space than JSON due to the length prefixes and explicit array indices."),(0,r.kt)("h2",{id:"history"},"History"),(0,r.kt)("p",null,"BSON originated in 2009 at MongoDB. Several scalar data types are of specific interest to MongoDB and the format is used both as a data storage and network transfer format for the MongoDB database, but it can be used independently outside of MongoDB."),(0,r.kt)("p",null,"Implementations are available in a variety of languages such as C, C++, C#, D, Delphi, Erlang, Go, Haskell, Java, JavaScript, Julia, Lua, OCaml, Perl, PHP, Python, Ruby, Rust, Scala, Smalltalk, and Swift."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,'A JSON "document" such as '),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"hello": "world"}\n')),(0,r.kt)("p",null,"will be stored as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"\\x16\\x00\\x00\\x00          // total document size\n\\x02                      // 0x02 = type String\nhello\\x00                 // field name\n\\x06\\x00\\x00\\x00world\\x00 // field value (size of value, value, null terminator)\n\\x00                      // 0x00 = type EOO ('end of object')\n")))}c.isMDXComponent=!0}}]);