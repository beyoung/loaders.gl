"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},15870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},o="AsyncIterators",s={unversionedId:"developer-guide/concepts/async-iterators",id:"developer-guide/concepts/async-iterators",title:"AsyncIterators",description:"Streaming functionality in loaders.gl is built on the ES2018 AsyncIterator concept.",source:"@site/../docs/developer-guide/concepts/async-iterators.md",sourceDirName:"developer-guide/concepts",slug:"/developer-guide/concepts/async-iterators",permalink:"/docs/developer-guide/concepts/async-iterators",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/developer-guide/concepts/async-iterators.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Streaming",permalink:"/docs/developer-guide/concepts/streaming"},next:{title:"Worker Threads",permalink:"/docs/developer-guide/concepts/worker-threads"}},l={},p=[{value:"Availability",id:"availability",level:2},{value:"Iterators and TypeScript",id:"iterators-and-typescript",level:2},{value:"Batched Parsing and Endcoding using AsyncIterators",id:"batched-parsing-and-endcoding-using-asynciterators",level:2},{value:"Using AsyncIterators",id:"using-asynciterators",level:2},{value:"Using Streams as AsyncIterators",id:"using-streams-as-asynciterators",level:2},{value:"Creating AsyncIterators",id:"creating-asynciterators",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"asynciterators"},"AsyncIterators"),(0,a.kt)("p",null,"Streaming functionality in loaders.gl is built on the ES2018 ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator")," concept.\nThis page gives some background on ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator"),"."),(0,a.kt)("h2",{id:"availability"},"Availability"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"for await of")," iteration syntax are standard JavaScript ES2018 features and are supported by all recent evergreen browsers and Node.js versions as well as e.g. the babel transpiler."),(0,a.kt)("h2",{id:"iterators-and-typescript"},"Iterators and TypeScript"),(0,a.kt)("p",null,"There are multiple similar-sounding types supporting the type safe use of iterators which can be a source of confusion to users, so some information is provided here:"),(0,a.kt)("p",null,"| Type               | Async Type              | Type Parameters |\nDescription                                                                                                                              |\n| ------------------ | ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterator"),"         | ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator"),"         | ",(0,a.kt)("inlineCode",{parentName:"p"},"<...>")," | An iterator has ",(0,a.kt)("inlineCode",{parentName:"p"},"next()"),", ... methods                                                                                                    |\n| ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterable"),"         | ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable"),"         | ",(0,a.kt)("inlineCode",{parentName:"p"},"<...>")," | An iterable is a class that has a ",(0,a.kt)("inlineCode",{parentName:"p"},"[Symbol.iterator]")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"[Symbol.asyncIterator]")," property that returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterator")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator")," |\n| ",(0,a.kt)("inlineCode",{parentName:"p"},"Generator"),"        | ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncGenerator"),"        | ",(0,a.kt)("inlineCode",{parentName:"p"},"<...>")," | A generator is a function that takes some parameters and when called returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterator")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator"),"                            |\n| ",(0,a.kt)("inlineCode",{parentName:"p"},"IterableIterator")," | ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterableIterator")," | ",(0,a.kt)("inlineCode",{parentName:"p"},"<...>")," | It is convenient to define ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterator"),"s that are also ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterable"),". Most built in container classes return this type.                       |"),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"IterableIterator")," can"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"be used in a for..of loop"),(0,a.kt)("li",{parentName:"ul"},"be spread into an array"),(0,a.kt)("li",{parentName:"ul"},"be spread into a parameter list"),(0,a.kt)("li",{parentName:"ul"},"be used in APIs that accept iterables like ",(0,a.kt)("inlineCode",{parentName:"li"},"Array.from()"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"new Set()"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"new Map()"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Iterable {\n    [Symbol.iterator]() : Iterator;\n}\ninterface Iterator {\n    next() : IteratorResult;\n    return?(value? : any) : IteratorResult;\n}\ninterface IteratorResult {\n    value: any;\n    done: boolean;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://exploringjs.com/es6/ch_iteration.html#sec_implementing-iterables"},"https://exploringjs.com/es6/ch_iteration.html#sec_implementing-iterables")," "),(0,a.kt)("h2",{id:"batched-parsing-and-endcoding-using-asynciterators"},"Batched Parsing and Endcoding using AsyncIterators"),(0,a.kt)("p",null,"The input and output from streaming loaders and writers can both be expressed in terms of async iterators."),(0,a.kt)("h2",{id:"using-asynciterators"},"Using AsyncIterators"),(0,a.kt)("p",null,"Remember that an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable")," can be consumed (iterated over) via the for-await construct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"for await (const x of asyncIterable) {\n}\n")),(0,a.kt)("h2",{id:"using-streams-as-asynciterators"},"Using Streams as AsyncIterators"),(0,a.kt)("p",null,"With a little effort, streams in JavaScript can be treated as AsyncIterators. As the section about ",(0,a.kt)("a",{parentName:"p",href:"/docs/developer-guide/concepts/streaming"},"Javascript Streams")," explains, instead of registering callbacks on the stream, you can now work with streams in this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"for await (const buf of fs.createReadStream('foo.txt')) {\n  // do something\n}\n")),(0,a.kt)("h2",{id:"creating-asynciterators"},"Creating AsyncIterators"),(0,a.kt)("p",null,"Remember that any object in JavaScript that implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"[Symbol.asyncIterator]()")," method is an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable"),". "),(0,a.kt)("p",null,"And the async ",(0,a.kt)("strong",{parentName:"p"},"generator")," syntax ",(0,a.kt)("inlineCode",{parentName:"p"},"async function *")," can be used to generate new async iterators"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"async function * makeAsyncIterator() {\n  yield new Promise(...)\n}\n\nfor await (const x of makeAsyncIterator()) {} // Notice parens after 'makeAsyncIterator'\n")))}u.isMDXComponent=!0}}]);