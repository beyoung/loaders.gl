"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7118],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(r),u=o,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},59722:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={},l="PLY - Polygon File Format",i={unversionedId:"modules/ply/formats/ply",id:"modules/ply/formats/ply",title:"PLY - Polygon File Format",description:"- @loaders.gl/ply",source:"@site/../docs/modules/ply/formats/ply.md",sourceDirName:"modules/ply/formats",slug:"/modules/ply/formats/ply",permalink:"/docs/modules/ply/formats/ply",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/ply/formats/ply.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PCD - Point Cloud Data",permalink:"/docs/modules/pcd/formats/pcd"},next:{title:"GeoJSON",permalink:"/docs/modules/json/formats/geojson"}},s={},c=[{value:"Columns",id:"columns",level:2},{value:"Detailed File Structure",id:"detailed-file-structure",level:2},{value:"Example File",id:"example-file",level:2}],p={toc:c},m="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ply---polygon-file-format"},"PLY - Polygon File Format"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("a",{parentName:"em",href:"/docs/modules/ply"},(0,o.kt)("inlineCode",{parentName:"a"},"@loaders.gl/ply")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("a",{parentName:"em",href:"http://paulbourke.net/dataformats/ply/"},"PLY documentation")))),(0,o.kt)("p",null,"PLY (Polygon File Format, also known as the Stanford Triangle Format) is a format for storing graphical objects that are described as a collection of polygons."),(0,o.kt)("p",null,"The PLY format has two sub-formats: an ASCII representation for easily getting started, and a binary version for compact storage and for rapid saving and loading."),(0,o.kt)("p",null,"PLY files are sometimes used for storing point clouds, however the format is designed to describes a mesh object as a collection of vertices, faces and other elements, along with properties such as color and normal direction that can be attached to these elements. "),(0,o.kt)("p",null,"Sources"),(0,o.kt)("h2",{id:"columns"},"Columns"),(0,o.kt)("p",null,"Columns (properties) that might be stored include: color, surface normals, texture coordinates, transparency, range data confidence, and different properties for the front and back of a polygon."),(0,o.kt)("h2",{id:"detailed-file-structure"},"Detailed File Structure"),(0,o.kt)("p",null,"This is the structure of a typical PLY file:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Header"),(0,o.kt)("li",{parentName:"ul"},"Vertex List"),(0,o.kt)("li",{parentName:"ul"},"Face List"),(0,o.kt)("li",{parentName:"ul"},"(lists of other elements)")),(0,o.kt)("p",null,"The header is a series of carriage-return terminated lines of text that describe the remainder of the file. The ASCII header contains lines such as "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'a description of each element type, including the element\'s name (e.g. "edge"), '),(0,o.kt)("li",{parentName:"ul"},"how many such elements are in the object, and a list of the various properties associated with the element. "),(0,o.kt)("li",{parentName:"ul"},"whether the file is binary or ASCII. ")),(0,o.kt)("p",null,"Following the header is one list of elements for each element type, presented in the order described in the header."),(0,o.kt)("h2",{id:"example-file"},"Example File"),(0,o.kt)("p",null,'Below is the complete ASCII description for a cube. The header of a binary version of the same object would differ only in substituting the word "binary_little_endian" or "binary_big_endian" for the word "ascii". The comments in brackets are NOT part of the file, they are annotations to this example. Comments in files are ordinary keyword-identified lines that begin with the word "comment".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'ply\nformat ascii 1.0           { ascii/binary, format version number }\ncomment made by Greg Turk  { comments keyword specified, like all lines }\ncomment this file is a cube\nelement vertex 8           { define "vertex" element, 8 of them in file }\nproperty float x           { vertex contains float "x" coordinate }\nproperty float y           { y coordinate is also a vertex property }\nproperty float z           { z coordinate, too }\nelement face 6             { there are 6 "face" elements in the file }\nproperty list uchar int vertex_index { "vertex_indices" is a list of ints }\nend_header                 { delimits the end of the header }\n0 0 0                      { start of vertex list }\n0 0 1\n0 1 1\n0 1 0\n1 0 0\n1 0 1\n1 1 1\n1 1 0\n4 0 1 2 3                  { start of face list }\n4 7 6 5 4\n4 0 4 5 1\n4 1 5 6 2\n4 2 6 7 3\n4 3 7 4 0\n')))}d.isMDXComponent=!0}}]);