"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3729],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(r),c=n,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||l;return r?a.createElement(k,i(i({ref:t},u),{},{components:r})):a.createElement(k,i({ref:t},u))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},75327:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const l={},i="KTX2BasisWriter",o={unversionedId:"modules/textures/api-reference/ktx2-basis-texture-writer",id:"modules/textures/api-reference/ktx2-basis-texture-writer",title:"KTX2BasisWriter",description:"The experimental KTX2BasisUniversalTextureWriter class can encode a decoded image into a KTX2 texture.",source:"@site/../docs/modules/textures/api-reference/ktx2-basis-texture-writer.md",sourceDirName:"modules/textures/api-reference",slug:"/modules/textures/api-reference/ktx2-basis-texture-writer",permalink:"/docs/modules/textures/api-reference/ktx2-basis-texture-writer",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/textures/api-reference/ktx2-basis-texture-writer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CompressedTextureWriter",permalink:"/docs/modules/textures/api-reference/compressed-texture-writer"},next:{title:"Worker",permalink:"/docs/modules/textures/api-reference/crunch-loader"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Options",id:"options",level:2},{value:"WASM module",id:"wasm-module",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ktx2basiswriter"},"KTX2BasisWriter"),(0,n.kt)("p",{class:"badges"},(0,n.kt)("img",{src:"https://img.shields.io/badge/From-v3.1-blue.svg?style=flat-square",alt:"From-v3.1"}),(0,n.kt)("img",{src:"https://img.shields.io/badge/Node.js-only-red.svg?style=flat-square",alt:"Node.js-only"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The experimental ",(0,n.kt)("inlineCode",{parentName:"p"},"KTX2BasisUniversalTextureWriter")," class can encode a decoded image into a KTX2 texture.")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Loader"),(0,n.kt)("th",{parentName:"tr",align:null},"Characteristic"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},".ktx2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Type"),(0,n.kt)("td",{parentName:"tr",align:null},"Binary")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Data Format"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://github.com/KhronosGroup/KTX-Specification/blob/main/ktxspec.adoc"},"https://github.com/KhronosGroup/KTX-Specification/blob/main/ktxspec.adoc"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Format"),(0,n.kt)("td",{parentName:"tr",align:null},"KTX2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Encoder Type"),(0,n.kt)("td",{parentName:"tr",align:null},"Asynchronous")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Worker Thread"),(0,n.kt)("td",{parentName:"tr",align:null},"No (but may run on separate native thread in browsers)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Streaming"),(0,n.kt)("td",{parentName:"tr",align:null},"No")))),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import '@loaders.gl/polyfill'; // only if using under Node\nimport {load, encode} from '@loaders.gl/core';\nimport {KTX2BasisUniversalTextureWriter} from '@loaders.gl/textures';\n\nconst shannonPNG = 'shannon.png';\n\nconst image = await load(shannonPNG, ImageLoader, {image: {type: 'data'}});\nconst encodedData = await encode(image, KTX2BasisUniversalTextureWriter);\n")),(0,n.kt)("h2",{id:"data-format"},"Data Format"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/KhronosGroup/KTX-Specification/blob/main/ktxspec.adoc"},"https://github.com/KhronosGroup/KTX-Specification/blob/main/ktxspec.adoc")),(0,n.kt)("h2",{id:"options"},"Options"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Option"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"useSRGB"),(0,n.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"false")),(0,n.kt)("td",{parentName:"tr",align:null},"If true, the input is assumed to be in sRGB space.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"qualityLevel"),(0,n.kt)("td",{parentName:"tr",align:null},"Number"),(0,n.kt)("td",{parentName:"tr",align:null},"10"),(0,n.kt)("td",{parentName:"tr",align:null},"Sets the ETC1S encoder's quality level, which controls the file size vs. quality tradeoff. Range is ","[1,255]")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"encodeUASTC"),(0,n.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"false")),(0,n.kt)("td",{parentName:"tr",align:null},"If true, the encoder will output a UASTC texture, otherwise a ETC1S texture.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"mipmaps"),(0,n.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"false")),(0,n.kt)("td",{parentName:"tr",align:null},"If true mipmaps will be generated from the source images")))),(0,n.kt)("h2",{id:"wasm-module"},"WASM module"),(0,n.kt)("p",null,"The writer applies BinomialLCC basis universal encoder. The libraries are loaded during runtime from URLs:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://unpkg.com/@loaders.gl/textures@$%7BVERSION%7D/dist/libs/basis_encoder.wasm"},"https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.wasm")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://unpkg.com/@loaders.gl/textures@$%7BVERSION%7D/dist/libs/basis_encoder.js"},"https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.js"))))}m.isMDXComponent=!0}}]);