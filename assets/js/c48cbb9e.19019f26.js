"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5513],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),y=a,m=d["".concat(l,".").concat(y)]||d[y]||c[y]||o;return t?n.createElement(m,i(i({ref:r},u),{},{components:t})):n.createElement(m,i({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},11692:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=t(83117),a=(t(67294),t(3905));const o={},i="geojsonToBinary",s={unversionedId:"modules/gis/api-reference/geojson-to-binary",id:"modules/gis/api-reference/geojson-to-binary",title:"geojsonToBinary",description:"Helper function to transform an array of GeoJSON Features into binary typed",source:"@site/../docs/modules/gis/api-reference/geojson-to-binary.md",sourceDirName:"modules/gis/api-reference",slug:"/modules/gis/api-reference/geojson-to-binary",permalink:"/docs/modules/gis/api-reference/geojson-to-binary",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/gis/api-reference/geojson-to-binary.md",tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Usage",id:"usage",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Options",id:"options",level:2},{value:"Notes",id:"notes",level:2}],u={toc:p},d="wrapper";function c(e){let{components:r,...t}=e;return(0,a.kt)(d,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"geojsontobinary"},"geojsonToBinary"),(0,a.kt)("p",null,"Helper function to transform an array of GeoJSON ",(0,a.kt)("inlineCode",{parentName:"p"},"Feature"),"s into binary typed\narrays. This is designed to speed up geospatial loaders by removing the need for\nserialization and deserialization of data transferred by the worker back to the\nmain process."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {load} from '@loaders.gl/core';\nimport {JSONLoader} from '@loaders.gl/json';\nimport {geojsonToBinary} from '@loaders.gl/gis';\n\nconst geoJSONfeatures = await load('data.geojson', JSONLoader);\n\n/*\n * Default options are:\n *\n * {\n *   fixRingWinding: true\n *   numericPropKeys: derived from data\n *   PositionDataType: Float32Array\n * }\n */\nconst options = {PositionDataType: Float32Array};\nconst binaryFeatures = geojsonToBinary(geoJSONfeatures, options);\n")),(0,a.kt)("h2",{id:"outputs"},"Outputs"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"geojsonToBinary")," returns an object containing typed arrays sorted by geometry\ntype. ",(0,a.kt)("inlineCode",{parentName:"p"},"positions")," is a flat array of coordinates; ",(0,a.kt)("inlineCode",{parentName:"p"},"globalFeatureIds")," references\nindices in the original ",(0,a.kt)("inlineCode",{parentName:"p"},"features")," array; ",(0,a.kt)("inlineCode",{parentName:"p"},"featureIds")," references feature\nindices of the same geometry type; ",(0,a.kt)("inlineCode",{parentName:"p"},"numericProps")," contains ",(0,a.kt)("inlineCode",{parentName:"p"},"TypedArray"),"s\ngenerated from numeric feature properties; ",(0,a.kt)("inlineCode",{parentName:"p"},"properties")," is an array of\nnon-numeric property objects of the given geometry type."),(0,a.kt)("p",null,"Each ",(0,a.kt)("inlineCode",{parentName:"p"},"TypedArray")," is wrapped inside an ",(0,a.kt)("em",{parentName:"p"},"accessor object"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},".value")," contains the raw numeric data, and ",(0,a.kt)("inlineCode",{parentName:"p"},".size")," gives the number of values per vertex. For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"positions: {value: Float32Array, size: 3}\n")),(0,a.kt)("p",null,"corresponds to 3D coordinates, where each vertex is defined by three numbers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"{\n  points: {\n    // Array of x, y or x, y, z positions\n    positions: {value: PositionDataType, size: 3},\n    // Array of original feature indexes by vertex\n    globalFeatureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of Point feature indexes by vertex\n    featureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Object with accessor objects for numeric properties\n    // Numeric properties are sized to have one value per vertex\n    numericProps: {\n        numericProperty1: {value: Float32Array | Float64Array, size: 1}\n    }\n    // Array of objects with non-numeric properties from Point geometries\n    properties: [{PointFeatureProperties}],\n    // Non-standard top-level fields\n    fields?: [{\n      // Feature ids of source data (if present)\n      id?: string | number\n    }]\n  },\n  lines: {\n    // Array of x, y or x, y, z positions\n    positions: {value: PositionDataType, size: 3},\n    // Indices within positions of the start of each individual LineString\n    pathIndices: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of original feature indexes by vertex\n    globalFeatureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of LineString feature indexes by vertex\n    featureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Object with accessor objects for numeric properties\n    // Numeric properties are sized to have one value per vertex\n    numericProps: {\n        numericProperty1: {value: Float32Array | Float64Array, size: 1}\n    }\n    // Array of objects with non-numeric properties from LineString geometries\n    properties: [{LineStringFeatureProperties}],\n    // Non-standard top-level fields\n    fields?: [{\n      // Feature ids of source data (if present)\n      id?: string | number\n    }]\n  },\n  polygons: {\n    // Array of x, y or x, y, z positions\n    positions: {value: PositionDataType, size: 3},\n    // Indices within positions of the start of each complex Polygon\n    polygonIndices: {value: Uint16Array | Uint32Array, size: 1},\n    // Indices within positions of the start of each primitive Polygon/ring\n    primitivePolygonIndices: {value: Uint16Array | Uint32Array, size: 1},\n    // Triangle indices. Allows deck.gl to skip performing costly triangulation on main thread\n    triangles: {value: Uint32Array, size: 1},\n    // Array of original feature indexes by vertex\n    globalFeatureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of Polygon feature indexes by vertex\n    featureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Object with accessor objects for numeric properties\n    // Numeric properties are sized to have one value per vertex\n    numericProps: {\n        numericProperty1: {value: Float32Array | Float64Array, size: 1}\n    }\n    // Array of objects with non-numeric properties from Polygon geometries\n    properties: [{PolygonFeatureProperties}],\n    // Non-standard top-level fields\n    fields?: [{\n      // Feature ids of source data (if present)\n      id?: string | number\n    }]\n  }\n}\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fixRingWinding"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the fix incorrect ring winding for polygons. Valid ",(0,a.kt)("inlineCode",{parentName:"td"},"GeoJSON")," polygons have the outer ring coordinates in CCW order and with holes in CW order")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"numericPropKeys"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Array")),(0,a.kt)("td",{parentName:"tr",align:null},"Derived from data"),(0,a.kt)("td",{parentName:"tr",align:null},"Names of feature properties that should be converted to numeric ",(0,a.kt)("inlineCode",{parentName:"td"},"TypedArray"),"s. Passing ",(0,a.kt)("inlineCode",{parentName:"td"},"[]")," will force all properties to be returned as normal objects.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PositionDataType"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"class")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Float32Array")),(0,a.kt)("td",{parentName:"tr",align:null},"Data type used for positions arrays.")))),(0,a.kt)("h2",{id:"notes"},"Notes"),(0,a.kt)("p",null,"In the case of the source geoJson features having an object as a property, it would not be deep cloned, so it would be linked from the output object (be careful on further mutations)."))}c.isMDXComponent=!0}}]);