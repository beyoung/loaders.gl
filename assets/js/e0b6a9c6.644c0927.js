"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5456],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},72474:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={},l="loadInBatches",i={unversionedId:"modules/core/api-reference/load-in-batches",id:"modules/core/api-reference/load-in-batches",title:"loadInBatches",description:"loadInBatches opens a url as a stream and passes it and options to parseInBatches. See the documentation of load and parseInBatches for more details.",source:"@site/../docs/modules/core/api-reference/load-in-batches.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/load-in-batches",permalink:"/docs/modules/core/api-reference/load-in-batches",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/core/api-reference/load-in-batches.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"load",permalink:"/docs/modules/core/api-reference/load"},next:{title:"parse",permalink:"/docs/modules/core/api-reference/parse"}},s={},c=[{value:"Usage",id:"usage",level:3},{value:"<code>loadInBatches(url: string | File | ... , loaders: object | object[], options?: object]): Promise&lt;AsyncIrerator&lt;any&gt;&gt;</code>",id:"loadinbatchesurl-string--file----loaders-object--object-options-object-promiseasyncireratorany",level:3},{value:"<code>loadInBatches(files: (string | File | ...)[] | FileList, loaders: object | object[], options?: object]): Promise&lt;AsyncIterator&lt;any&gt;&gt;</code>",id:"loadinbatchesfiles-string--file----filelist-loaders-object--object-options-object-promiseasynciteratorany",level:3},{value:"Options",id:"options",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loadinbatches"},"loadInBatches"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"loadInBatches")," opens a ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," as a stream and passes it and options to ",(0,r.kt)("inlineCode",{parentName:"p"},"parseInBatches"),". See the documentation of ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"parseInBatches")," for more details."),(0,r.kt)("p",null,"Starting with ",(0,r.kt)("a",{parentName:"p",href:"http://shields.io"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/v2.3-blue.svg?style=flat-square",alt:"Website shields.io"})),", ",(0,r.kt)("inlineCode",{parentName:"p"},"loadInBatches")," can also load and parse multiple files from a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"File")," objects or urls."),(0,r.kt)("p",null,"In this mode, it iterates over the supplied files, looking for valid loader matches, ignores files that do not match a loader and calls ",(0,r.kt)("inlineCode",{parentName:"p"},"parseInBatches")," on each valid file/loader combination, returning an array of async batch iterators."),(0,r.kt)("p",null,"More importantly, when called with multiple files, ",(0,r.kt)("inlineCode",{parentName:"p"},"loadInBatches")," makes all the supplied files avialable to all loaders (enabling multi-file loaders such as the ShapefileLoader to access multiple files)."),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const iteratorPromises = await loadInBatches([file1, file2], OBJLoader);\nfor await (const iterator of iteratorPromises) {\n  for await (const batch of iterator) {\n    // Just the one batch...\n    t.equal(batch.mode, 4, 'mode is TRIANGLES (4)');\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {fetchFile, parseFilesInBatches} from '@loaders.gl/core';\nimport {ShapefileLoader} from '@loaders.gl/shapefile';\n\nconst batchIterators = await loadFilesInBatches([shpFile, dbfFile, projFile], ShapefileLoader));\nfor (const batchIterator of batchIterators) {\n  // `batchIterator` represents the the output of `parseInBatches` on one of the files\n  for await (const batch of batchIterator) {\n    switch (batch.batchType) {\n      case 'metadata':\n        console.log(batch.metadata);\n        break;\n      default:\n        processShapefile(batch);\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"loadinbatchesurl-string--file----loaders-object--object-options-object-promiseasyncireratorany"},(0,r.kt)("inlineCode",{parentName:"h3"},"loadInBatches(url: string | File | ... , loaders: object | object[], options?: object]): Promise<AsyncIrerator<any>>")),(0,r.kt)("h3",{id:"loadinbatchesfiles-string--file----filelist-loaders-object--object-options-object-promiseasynciteratorany"},(0,r.kt)("inlineCode",{parentName:"h3"},"loadInBatches(files: (string | File | ...)[] | FileList, loaders: object | object[], options?: object]): Promise<AsyncIterator<any>>")),(0,r.kt)("p",null,"Loads data in batches from a stream, releasing each batch to the application while the stream is still being read."),(0,r.kt)("p",null,"Parses data with the selected ",(0,r.kt)("em",{parentName:"p"},"loader object"),". An array of ",(0,r.kt)("inlineCode",{parentName:"p"},"loaders")," can be provided, in which case an attempt will be made to autodetect which loader is appropriate for the file (using url extension and header matching)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"files"),": loaded data or an object that allows data to be loaded. Plese refer to the table below for valid types."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"loaders"),": can be a single loader or an array of loaders. If ommitted, will use the list of registered loaders (see ",(0,r.kt)("inlineCode",{parentName:"li"},"registerLoaders"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),": see ",(0,r.kt)("a",{parentName:"li",href:"./loader-options"},(0,r.kt)("inlineCode",{parentName:"a"},"LoaderOptions")),".")),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns an async iterator that yields batches of data. The exact format for the batches depends on the ",(0,r.kt)("em",{parentName:"li"},"loader object")," category.")),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"loaders")," parameter can also be ommitted, in which case any ",(0,r.kt)("em",{parentName:"li"},"loaders")," previously registered with ",(0,r.kt)("a",{parentName:"li",href:"docs/api-reference/core/register-loaders"},(0,r.kt)("inlineCode",{parentName:"a"},"registerLoaders"))," will be used.")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"A loader object, that can contain a mix of options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"options specific to ",(0,r.kt)("inlineCode",{parentName:"li"},"loadInBatches"),", see below."),(0,r.kt)("li",{parentName:"ul"},"options defined by the ",(0,r.kt)("inlineCode",{parentName:"li"},"parseInBatches")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"parse")," functions can be specified."),(0,r.kt)("li",{parentName:"ul"},"options specific to any loaders can also be specified (in loader specific sub-objects).")),(0,r.kt)("p",null,"Please refer to the corresponding documentation page for for ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," and for each loader for details."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"options.ignoreUnknownFiles")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Ignores unknown files if multiple files are provided.")))))}m.isMDXComponent=!0}}]);