"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7166],{19736:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(85893),t=r(11151);const o={},l="Examples",s={id:"arrowjs/get-started/examples",title:"Examples",description:"Some short examples",source:"@site/../docs/arrowjs/get-started/examples.md",sourceDirName:"arrowjs/get-started",slug:"/arrowjs/get-started/examples",permalink:"/docs/arrowjs/get-started/examples",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/get-started/examples.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Get Started",permalink:"/docs/arrowjs/get-started/"},next:{title:"Data Types",permalink:"/docs/arrowjs/developer-guide/data-types"}},i={},c=[{value:"Get a table from an Arrow file on disk (in IPC format)",id:"get-a-table-from-an-arrow-file-on-disk-in-ipc-format",level:3},{value:"Create a Table when the Arrow file is split across buffers",id:"create-a-table-when-the-arrow-file-is-split-across-buffers",level:3},{value:"Create a Table from JavaScript arrays",id:"create-a-table-from-javascript-arrays",level:3},{value:"Load data with <code>fetch</code>",id:"load-data-with-fetch",level:3},{value:"Columns look like JS Arrays",id:"columns-look-like-js-arrays",level:3}];function d(e){const a={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(a.p,{children:"Some short examples"}),"\n",(0,n.jsx)(a.h3,{id:"get-a-table-from-an-arrow-file-on-disk-in-ipc-format",children:"Get a table from an Arrow file on disk (in IPC format)"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"import { readFileSync } from 'fs';\nimport { Table } from 'apache-arrow';\n\nconst arrow = readFileSync('simple.arrow');\nconst table = Table.from([arrow]);\n\nconsole.log(table.toString());\n\n/*\n foo,  bar,  baz\n   1,    1,   aa\nnull, null, null\n   3, null, null\n   4,    4,  bbb\n   5,    5, cccc\n*/\n"})}),"\n",(0,n.jsx)(a.h3,{id:"create-a-table-when-the-arrow-file-is-split-across-buffers",children:"Create a Table when the Arrow file is split across buffers"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"import { readFileSync } from 'fs';\nimport { Table } from 'apache-arrow';\n\nconst table = Table.from([\n    'latlong/schema.arrow',\n    'latlong/records.arrow'\n].map((file) => readFileSync(file)));\n\nconsole.log(table.toString());\n\n/*\n        origin_lat,         origin_lon\n35.393089294433594,  -97.6007308959961\n35.393089294433594,  -97.6007308959961\n35.393089294433594,  -97.6007308959961\n29.533695220947266, -98.46977996826172\n29.533695220947266, -98.46977996826172\n*/\n"})}),"\n",(0,n.jsx)(a.h3,{id:"create-a-table-from-javascript-arrays",children:"Create a Table from JavaScript arrays"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"import {\n  Table,\n  FloatVector,\n  DateVector\n} from 'apache-arrow';\n\nconst LENGTH = 2000;\n\nconst rainAmounts = Float32Array.from(\n  { length: LENGTH },\n  () => Number((Math.random() * 20).toFixed(1)));\n\nconst rainDates = Array.from(\n  { length: LENGTH },\n  (_, i) => new Date(Date.now() - 1000 * 60 * 60 * 24 * i));\n\nconst rainfall = Table.new(\n  [FloatVector.from(rainAmounts), DateVector.from(rainDates)],\n  ['precipitation', 'date']\n);\n"})}),"\n",(0,n.jsxs)(a.h3,{id:"load-data-with-fetch",children:["Load data with ",(0,n.jsx)(a.code,{children:"fetch"})]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:'import { Table } from "apache-arrow";\n\nconst table = await Table.from(fetch(("/simple.arrow")));\nconsole.log(table.toString());\n\n'})}),"\n",(0,n.jsx)(a.h3,{id:"columns-look-like-js-arrays",children:"Columns look like JS Arrays"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-typescript",children:"import { readFileSync } from 'fs';\nimport { Table } from 'apache-arrow';\n\nconst table = Table.from([\n    'latlong/schema.arrow',\n    'latlong/records.arrow'\n].map(readFileSync));\n\nconst column = table.getColumn('origin_lat');\n\n// Copy the data into a TypedArray\nconst typed = column.toArray();\nassert(typed instanceof Float32Array);\n\nfor (let i = -1, n = column.length; ++i < n;) {\n    assert(column.get(i) === typed[i]);\n}\n"})})]})}function m(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,a,r)=>{r.d(a,{Z:()=>s,a:()=>l});var n=r(67294);const t={},o=n.createContext(t);function l(e){const a=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(o.Provider,{value:a},e.children)}}}]);