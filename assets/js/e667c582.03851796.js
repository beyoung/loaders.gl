"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7880],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(a),g=r,c=u["".concat(m,".").concat(g)]||u[g]||d[g]||i;return a?n.createElement(c,o(o({ref:t},s),{},{components:a})):n.createElement(c,o({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=g;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},69114:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={},o="loadImage",l={unversionedId:"modules/textures/api-reference/load-image",id:"modules/textures/api-reference/load-image",title:"loadImage",description:"Usage",source:"@site/../docs/modules/textures/api-reference/load-image.md",sourceDirName:"modules/textures/api-reference",slug:"/modules/textures/api-reference/load-image",permalink:"/docs/modules/textures/api-reference/load-image",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/textures/api-reference/load-image.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/modules/textures/"},next:{title:"loadImages",permalink:"/docs/modules/textures/api-reference/load-image-array"}},m={},p=[{value:"Usage",id:"usage",level:2},{value:"Function",id:"function",level:2},{value:"loadImage(getUrl : String | Function, options? : Object]) : image | image[]",id:"loadimagegeturl--string--function-options--object--image--image",level:3},{value:"Options",id:"options",level:2}],s={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loadimage"},"loadImage"),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import '@loaders.gl/polyfills'; // only needed if using under Node\nimport {loadImage} from `@loaders.gl/images`;\n\nconst image = await loadImage(url);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import '@loaders.gl/polyfills'; // only needed if using under Node\nimport {loadImage} from `@loaders.gl/images`;\n\nconst URL = ...;\n\nconst image = await loadImage(({lod}) => `${URL}-${lod}.jpg`, {\n  image: {\n    mipLevels: 'auto'\n  }\n});\n\nfor (const lodImage of imageArray) {\n  ...\n}\n")),(0,r.kt)("h2",{id:"function"},"Function"),(0,r.kt)("h3",{id:"loadimagegeturl--string--function-options--object--image--image"},"loadImage(getUrl : String | Function, options? : Object]) : image | image[]"),(0,r.kt)("p",null,"A basic image loading function for loading a single image (or an array of mipmap images representing a single image)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getUrl"),": A function that generates the url for each image, it is called for each image with the ",(0,r.kt)("inlineCode",{parentName:"li"},"lod")," of that image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),": Supports the same options as ",(0,r.kt)("a",{parentName:"li",href:"modules/images/docs/api-reference/image-loader"},(0,r.kt)("inlineCode",{parentName:"a"},"ImageLoader")),".")),(0,r.kt)("p",null,"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"image or array of images")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"Accepts the same options as ",(0,r.kt)("a",{parentName:"p",href:"modules/images/docs/api-reference/image-loader"},(0,r.kt)("inlineCode",{parentName:"a"},"ImageLoader")),", and"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"image.mipLevels")),(0,r.kt)("td",{parentName:"tr",align:null},"`Number"),(0,r.kt)("td",{parentName:"tr",align:null},"String`"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"'auto'")," or non-zero, loads an array of mip images.")))),(0,r.kt)("p",null,"Number of mip level images to load: Use ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," to indicate a single image with no mips. Supplying the string ",(0,r.kt)("inlineCode",{parentName:"p"},"'auto'")," will infer the mipLevel from the size of the ",(0,r.kt)("inlineCode",{parentName:"p"},"lod"),"=",(0,r.kt)("inlineCode",{parentName:"p"},"0")," image."))}d.isMDXComponent=!0}}]);