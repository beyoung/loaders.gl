"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3122],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8492:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const s={},i="WMSService",o={unversionedId:"modules/wms/api-reference/wms-service",id:"modules/wms/api-reference/wms-service",title:"WMSService",description:"ogc-logo",source:"@site/../docs/modules/wms/api-reference/wms-service.md",sourceDirName:"modules/wms/api-reference",slug:"/modules/wms/api-reference/wms-service",permalink:"/docs/modules/wms/api-reference/wms-service",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/wms/api-reference/wms-service.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CSWService",permalink:"/docs/modules/wms/api-reference/csw-service"},next:{title:"WMSCapabilitiesLoader",permalink:"/docs/modules/wms/api-reference/wms-capabilities-loader"}},l={},p=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor()",id:"constructor",level:3},{value:"getCapabilities()",id:"getcapabilities",level:3},{value:"getMap()",id:"getmap",level:3},{value:"getFeatureInfo()",id:"getfeatureinfo",level:3},{value:"describeLayer()",id:"describelayer",level:3},{value:"getLegendGraphic()",id:"getlegendgraphic",level:3},{value:"Limitations",id:"limitations",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...s}=e;return(0,a.kt)(m,(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wmsservice"},"WMSService"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"ogc-logo",src:r(63411).Z,width:"119",height:"60"})),(0,a.kt)("p",{class:"badges"},(0,a.kt)("img",{src:"https://img.shields.io/badge/From-v3.3-blue.svg?style=flat-square",alt:"From-3.3"}),"\xa0",(0,a.kt)("img",{src:"https://img.shields.io/badge/-BETA-teal.svg",alt:"BETA"})),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSService")," class helps applications interact with a WMS service (discover its capabilities, request map images and information about geospatial features, etc)."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSService")," provides a type safe API that forms valid WMS URLs and issues requests, handles WMS version differences and edge cases under the hood and parses results and errors into strongly typed JavaScript objects."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSService")," implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageService")," interface, allowing WMS services to be used as one interchangeable source of asynchronously generated map image data."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSService")," instance provides type safe methods to send requests to a WMS service and parse the responses: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL, wmsParameters: {layers: ['oms']}});\n  const mapImage = await wmsService.getMap({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75]\n  });\n  // Render mapImage...\n")),(0,a.kt)("p",null,"Capabilities metadata can be queried: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL});\n  const capabilities = await wmsService.getCapabilities({});\n  // Check capabilities\n")),(0,a.kt)("p",null,"The WMS version as well as other default WMS parameters can be specified in the constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Specify the older 1.1.1 version (1.3.0 is the default)\n  const wmsService = new WMSService({url: WMS_SERVICE_URL, version: '1.1.1', layers: ['oms']});\n  const getMap = await wmsService.getMap({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75],\n    \n  });\n")),(0,a.kt)("p",null,"Custom fetch options, such as HTTP headers, and loader-specific options can be specified via the\nstandard loaders.gl ",(0,a.kt)("inlineCode",{parentName:"p"},"loadOptions")," argument, which is forwarded to all load and parse operations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL, loadOptions: {\n    fetch: {\n      headers: {\n        Authentication: 'Bearer abc...'\n      }\n    }\n  }});\n\n  const getMap = await wmsService.getMap({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75],\n    layers: ['oms']\n  });\n")),(0,a.kt)("p",null,"For special use cases, is possible to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSService")," to just generate URLs, so that the application issue its own requests and parse responses."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL});\n  const getMapUrl = await wmsService.getMapURL({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75],\n    layers: ['oms']\n  });\n  const response = await myCustomFetch(getMapURL);\n  // parse...\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"constructor"},"constructor()"),(0,a.kt)("p",null,"Creates a ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSService")," instance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSServiceProps = {\n  url: string; // Base URL to the service\n  loadOptions?: LoaderOptions; // Any load options to the loaders.gl Loaders used by the WMSService methods\n  substituteCRS84?: boolean; // In WMS 1.3.0, replaces EPSG:4326 with CRS:84 to ensure lng,lat axis order. Default true.\n\n  wmsParameters: {\n    // Default WMS parameters can be provided here\n    version?: '1.3.0' | '1.1.1'; /** WMS version */\n    layers?: string[]; /** Layers to render */\n    query_layers?: string[]; /** Layers to query */\n    crs?: string; /** CRS for the image (not the bounding box) */\n    format?: 'image/png'; /** Requested format for the return image */\n    info_format?: 'text/plain' | 'application/vnd.ogc.gml'; /** Requested MIME type of returned feature info */\n    styles?: unknown; /** Styling */\n    transparent?: boolean; /** Render transparent pixels if no data */\n  },\n  vendorParameters\n};\n\nconstructor(props: WMSServiceProps)\n")),(0,a.kt)("h3",{id:"getcapabilities"},"getCapabilities()"),(0,a.kt)("p",null,"Get Capabilities"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getCapabilities(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSCapabilities>\n")),(0,a.kt)("p",null,"Returns a capabilities objects. See ","[",(0,a.kt)("inlineCode",{parentName:"p"},"WMSCapabilitiesLoader"),"][/docs/modules/wms/api-reference/wms-capabilities-loader]"," for detailed information about the ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSCapabilities")," type."),(0,a.kt)("h3",{id:"getmap"},"getMap()"),(0,a.kt)("p",null,"Get a map image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getMap(wmsParameters: WMSGetMapParameters, vendorParameters?: Record<string, unknown>): Promise<ImageType>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSGetMapParameters = {\n  bbox: [number, number, number, number]; // bounding box of the requested map image \n  width: number; // pixel width of returned image \n  height: number; // pixels \n\n  // constructor parameters can be overridden in the actual calls\n  layers?: string | string[]; // Layers to render \n  styles?: unknown; // Styling \n  crs?: string; // crs for the image (not the bounding box) \n  format?: 'image/png'; // requested format for the return image \n};\n")),(0,a.kt)("h3",{id:"getfeatureinfo"},"getFeatureInfo()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This request is not supported by all WNS servers. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"getCapabilities()")," to determine if it is.")),(0,a.kt)("p",null,"Get Feature Info for a coordinate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getFeatureInfo(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSFeatureInfo>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// https://imagery.pasda.psu.edu/arcgis/services/pasda/UrbanTreeCanopy_Landcover/MapServer/WmsServer?SERVICE=WMS&\nexport type WMSGetFeatureInfoParameters = {\n  x: number; // x coordinate for the feature info request\n  y: number; // y coordinate for the feature info request\n  query_layers: string[]; // list of layers to query (could be different from rendered layers)\n  info_format?: 'text/plain' | 'application/geojson' | 'application/vnd.ogc.gml'; // MIME type of returned feature info\n  layers: string[]; // Layers to render\n  styles?: unknown; // Styling\n  bbox: [number, number, number, number]; // bounding box of the requested map image\n  width: number; // pixel width of returned image\n  height: number; // pixels\n  crs?: string; // crs for the image (not the bounding box)\n  format?: 'image/png'; // requested format for the return image\n};\n")),(0,a.kt)("h3",{id:"describelayer"},"describeLayer()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This request is not supported by all WNS servers. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"getCapabilities()")," to determine if it is.")),(0,a.kt)("p",null,"Get more information about a layer. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  async describeLayer(\n    wmsParameters: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSLayerDescription>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSDescribeLayerParameters = {\n  layer: string; // Layer to describe\n};\n")),(0,a.kt)("h3",{id:"getlegendgraphic"},"getLegendGraphic()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This request is not supported by all WMS servers. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"getCapabilities()")," to determine if it is.")),(0,a.kt)("p",null,"Get an image with a semantic legend"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getLegendGraphic(\n    wmsParameters: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSGetLegendGraphicParameters = {\n};\n")),(0,a.kt)("h2",{id:"limitations"},"Limitations"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"WMSService")," only supports WMS URL parameters generation and HTTP GET requests against a WMS server. The OGC WMS standard also allows WMS services to accept XML payloads with HTTP POST messages, however generation of such XML payloads is not supported."))}u.isMDXComponent=!0},63411:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/ogc-logo-60-8ee2c25a50ccc14293453512c707a0c4.png"}}]);