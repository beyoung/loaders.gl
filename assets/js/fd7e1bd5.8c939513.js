"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4459],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),u=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(t),p=r,k=c["".concat(d,".").concat(p)]||c[p]||h[p]||i;return t?a.createElement(k,l(l({ref:n},s),{},{components:t})):a.createElement(k,l({ref:n},s))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},37793:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(87462),r=(t(67294),t(3905));const i={},l="Chunked",o={unversionedId:"arrowjs/api-reference/chunked",id:"arrowjs/api-reference/chunked",title:"Chunked",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/chunked.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/chunked",permalink:"/docs/arrowjs/api-reference/chunked",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/chunked.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Apache Arrow JavaScript API Reference",permalink:"/docs/arrowjs/api-reference/"},next:{title:"Column",permalink:"/docs/arrowjs/api-reference/column"}},d={},u=[{value:"Usage",id:"usage",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"Chunked.flatten(...vectors: Vector[]) : Vector",id:"chunkedflattenvectors-vector--vector",level:3},{value:"Chunked.concat(...chunks: <code>Vector&lt;T&gt;[]</code>): Chunked",id:"chunkedconcatchunks-vectort-chunked",level:3},{value:"Members",id:"members",level:2},{value:"<code>Symbol.iterator : Iterator</code>",id:"symboliterator--iterator",level:3},{value:"<code>type : T</code>",id:"type--t",level:3},{value:"<code>length: Number </code> (read-only)",id:"length-number--read-only",level:3},{value:"chunks: Vector[]  (read-only)",id:"chunks-vector--read-only",level:3},{value:"typeId : TBD  (read-only)",id:"typeid--tbd--read-only",level:3},{value:"data : Data  (read-only)",id:"data--data--read-only",level:3},{value:"ArrayType  (read-only)",id:"arraytype--read-only",level:3},{value:"numChildren  (read-only)",id:"numchildren--read-only",level:3},{value:"stride  (read-only)",id:"stride--read-only",level:3},{value:"nullCount  (read-only)",id:"nullcount--read-only",level:3},{value:"indices : <code>ChunkedKeys&lt;T&gt;</code> | null  (read-only)",id:"indices--chunkedkeyst--null--read-only",level:3},{value:"dictionary: ChunkedDict | null  (read-only)",id:"dictionary-chunkeddict--null--read-only",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor(type : *, chunks? : Vector[] = [], offsets? : Number[])",id:"constructortype---chunks--vector---offsets--number",level:3},{value:"clone(chunks? : this.chunks): Chunked",id:"clonechunks--thischunks-chunked",level:3},{value:"concat(...others: <code>Vector&lt;T&gt;[]</code>): Chunked",id:"concatothers-vectort-chunked",level:3},{value:"slice(begin?: Number, end?: Number): Chunked",id:"slicebegin-number-end-number-chunked",level:3},{value:"getChildAt(index : Number): Chunked | null",id:"getchildatindex--number-chunked--null",level:3},{value:"search(index: Number): number, number | null;",id:"searchindex-number-number-number--null",level:3},{value:"search(index: Number, then?: SearchContinuation): <code>ReturnType&lt;N&gt;</code>;",id:"searchindex-number-then-searchcontinuation-returntypen",level:3},{value:"search(index: Number, then?: SearchContinuation)",id:"searchindex-number-then-searchcontinuation",level:3},{value:"isValid(index: Number): boolean",id:"isvalidindex-number-boolean",level:3},{value:"get(index : Number): T'TValue' | null",id:"getindex--number-ttvalue--null",level:3},{value:"set(index: Number, value: T'TValue' | null): void",id:"setindex-number-value-ttvalue--null-void",level:3},{value:"indexOf(element: Type, offset?: Number): Number",id:"indexofelement-type-offset-number-number",level:3},{value:"toArray(): TypedArray",id:"toarray-typedarray",level:3}],s={toc:u},c="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"chunked"},"Chunked"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.")),(0,r.kt)("p",null,'Holds a "chunked array" that allows a number of array fragments (represented by ',(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances) to be treated logically as a single vector. ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances can be concatenated into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," without any memory being copied."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Create a new contiguous typed array from a ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance (note that this creates a new typed array unless only one chunk)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const typedArray = chunked.toArray();\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," array supports iteration, random element access and mutation."),(0,r.kt)("h2",{id:"inheritance"},"Inheritance"),(0,r.kt)("p",null,"class Chunked extends ",(0,r.kt)("a",{parentName:"p",href:"/docs/arrowjs/api-reference/vector"},"Vector")),(0,r.kt)("h2",{id:"static-methods"},"Static Methods"),(0,r.kt)("h3",{id:"chunkedflattenvectors-vector--vector"},"Chunked.flatten(...vectors: Vector[]) : Vector"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})),(0,r.kt)("p",null,"Utility method that flattens a number of ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances or Arrays of ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances into a single Array of ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances. If the incoming Vectors are instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked"),", the child chunks are extracted and flattened into the resulting Array. Does not mutate or copy data from the Vector instances."),(0,r.kt)("p",null,"Returns an Array of ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances."),(0,r.kt)("h3",{id:"chunkedconcatchunks-vectort-chunked"},"Chunked.concat(...chunks: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vector<T>[]"),"): Chunked"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})),(0,r.kt)("p",null,"Concatenates a number of ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances of the same type into a single ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," Vector. Returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," Vector."),(0,r.kt)("p",null,"Note: This method extracts the inner chunks of any incoming ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instances, and flattens them into the ",(0,r.kt)("inlineCode",{parentName:"p"},"chunks")," array of the returned ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," Vector."),(0,r.kt)("h2",{id:"members"},"Members"),(0,r.kt)("h3",{id:"symboliterator--iterator"},(0,r.kt)("inlineCode",{parentName:"h3"},"Symbol.iterator : Iterator")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," arrays are iterable, allowing you to use constructs like ",(0,r.kt)("inlineCode",{parentName:"p"},"for (const element of chunked)")," to iterate over elements. For in-order traversal, this is more performant than random-element access."),(0,r.kt)("h3",{id:"type--t"},(0,r.kt)("inlineCode",{parentName:"h3"},"type : T")),(0,r.kt)("p",null,"Returns the DataType instance which determines the type of elements this ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance contains. All vector chunks will have this type."),(0,r.kt)("h3",{id:"length-number--read-only"},(0,r.kt)("inlineCode",{parentName:"h3"},"length: Number ")," (read-only)"),(0,r.kt)("p",null,"Returns the total number of elements in this ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance, representing the length of of all chunks."),(0,r.kt)("h3",{id:"chunks-vector--read-only"},"chunks: Vector[]  (read-only)"),(0,r.kt)("p",null,"Returns an array of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," chunks that hold the elements in this ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," array."),(0,r.kt)("h3",{id:"typeid--tbd--read-only"},"typeId : TBD  (read-only)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"typeId")," enum value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," instance"),(0,r.kt)("h3",{id:"data--data--read-only"},"data : Data  (read-only)"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"Data")," instance of the ",(0,r.kt)("em",{parentName:"p"},"first")," chunk in the list of inner Vectors."),(0,r.kt)("h3",{id:"arraytype--read-only"},"ArrayType  (read-only)"),(0,r.kt)("p",null,"Returns the constructor of the underlying typed array for the values buffer as determined by this Vector's DataType."),(0,r.kt)("h3",{id:"numchildren--read-only"},"numChildren  (read-only)"),(0,r.kt)("p",null,"The number of logical Vector children for the Chunked Vector. Only applicable if the DataType of the Vector is one of the nested types (List, FixedSizeList, Struct, or Map)."),(0,r.kt)("h3",{id:"stride--read-only"},"stride  (read-only)"),(0,r.kt)("p",null,"The number of elements in the underlying data buffer that constitute a single logical value for the given type. The stride for all DataTypes is 1 unless noted here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal")," types, the stride is 4."),(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("inlineCode",{parentName:"li"},"Date")," types, the stride is 1 if the ",(0,r.kt)("inlineCode",{parentName:"li"},"unit")," is DateUnit.DAY, else 2."),(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("inlineCode",{parentName:"li"},"Int"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Interval"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"Time")," types, the stride is 1 if ",(0,r.kt)("inlineCode",{parentName:"li"},"bitWidth <= 32"),", else 2."),(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("inlineCode",{parentName:"li"},"FixedSizeList")," types, the stride is the ",(0,r.kt)("inlineCode",{parentName:"li"},"listSize")," property of the ",(0,r.kt)("inlineCode",{parentName:"li"},"FixedSizeList")," instance."),(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("inlineCode",{parentName:"li"},"FixedSizeBinary")," types, the stride is the ",(0,r.kt)("inlineCode",{parentName:"li"},"byteWidth")," property of the ",(0,r.kt)("inlineCode",{parentName:"li"},"FixedSizeBinary")," instance.")),(0,r.kt)("h3",{id:"nullcount--read-only"},"nullCount  (read-only)"),(0,r.kt)("p",null,"Number of null values across all Vector chunks in this chunked array."),(0,r.kt)("h3",{id:"indices--chunkedkeyst--null--read-only"},"indices : ",(0,r.kt)("inlineCode",{parentName:"h3"},"ChunkedKeys<T>")," | null  (read-only)"),(0,r.kt)("p",null,"If this is a dictionary encoded column, returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance of the indicies of all the inner chunks. Otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("h3",{id:"dictionary-chunkeddict--null--read-only"},"dictionary: ChunkedDict | null  (read-only)"),(0,r.kt)("p",null,"If this is a dictionary encoded column, returns the Dictionary."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"constructortype---chunks--vector---offsets--number"},"constructor(type : ","*",", chunks? : Vector[] = [], offsets? : Number[])"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})),(0,r.kt)("p",null,"Creates a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," array instance of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and optionally initializes it with a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - The DataType of the inner chunks"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chunks"),"= - Vectors must all be compatible with ",(0,r.kt)("inlineCode",{parentName:"li"},"type"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offsets"),"= - A Uint32Array of offsets where each inner chunk starts and ends. If not provided, offsets are automatically calculated from the list of chunks.")),(0,r.kt)("p",null,"TBD - Confirm/provide some information on how ",(0,r.kt)("inlineCode",{parentName:"p"},"offsets")," can be used?"),(0,r.kt)("h3",{id:"clonechunks--thischunks-chunked"},"clone(chunks? : this.chunks): Chunked"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})),(0,r.kt)("p",null,"Returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance that is a clone of this instance. Does not copy the actual chunks, so the new ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance will reference the same chunks."),(0,r.kt)("h3",{id:"concatothers-vectort-chunked"},"concat(...others: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vector<T>[]"),"): Chunked"),(0,r.kt)("p",{class:"badges"},(0,r.kt)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})),(0,r.kt)("p",null,"Concatenates a number of ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," instances after the chunks. Returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," array."),(0,r.kt)("p",null,"The supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," chunks must be the same DataType as the ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance."),(0,r.kt)("h3",{id:"slicebegin-number-end-number-chunked"},"slice(begin?: Number, end?: Number): Chunked"),(0,r.kt)("p",null,"Returns a new chunked array representing the logical array containing the elements within the index range, potentially dropping some chunks at beginning and end."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"begin"),"=",(0,r.kt)("inlineCode",{parentName:"li"},"0")," - The first logical index to be included as index 0 in the new array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end")," - The first logical index to be included as index 0 in the new array. Defaults to the last element in the range.")),(0,r.kt)("p",null,"Returns a zero-copy slice of this Vector. The begin and end arguments are handled the same way as JS' ",(0,r.kt)("inlineCode",{parentName:"p"},"Array.prototype.slice"),"; they are clamped between 0 and ",(0,r.kt)("inlineCode",{parentName:"p"},"vector.length")," and wrap around when negative, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"slice(-1, 5)")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"slice(5, -1)")),(0,r.kt)("h3",{id:"getchildatindex--number-chunked--null"},"getChildAt(index : Number): Chunked | null"),(0,r.kt)("p",null,"If this ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," Vector's DataType is one of the nested types (Map or Struct), returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," Vector view over all the chunks for the child Vector at ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),"."),(0,r.kt)("h3",{id:"searchindex-number-number-number--null"},"search(index: Number): ","[number, number]"," | null;"),(0,r.kt)("h3",{id:"searchindex-number-then-searchcontinuation-returntypen"},"search(index: Number, then?: SearchContinuation): ",(0,r.kt)("inlineCode",{parentName:"h3"},"ReturnType<N>"),";"),(0,r.kt)("h3",{id:"searchindex-number-then-searchcontinuation"},"search(index: Number, then?: SearchContinuation)"),(0,r.kt)("p",null,"Using an ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," that is relative to the whole ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked"),' Vector, binary search through the list of inner chunks using supplied "global" ',(0,r.kt)("inlineCode",{parentName:"p"},"index")," to find the chunk at that location. Returns the child index of the inner chunk and an element index that has been adjusted to the keyspace of the found inner chunk."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"search()")," can be called with only an integer index, in which case a pair of ",(0,r.kt)("inlineCode",{parentName:"p"},"[chunkIndex, valueIndex]")," are returned as a two-element Array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let chunked = [\n    Int32Vector.from([0, 1, 2, 3]),\n    Int32Vector.from([4, 5, 6, 7, 8])\n].reduce((x, y) => x.concat(y));\n\nlet [chunkIndex, valueIndex] = chunked.search(6)\nassert(chunkIndex === 1)\nassert(valueIndex === 3)\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"search()")," is called with an integer index and a callback, the callback will be invoked with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunked")," instance as the first argument, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"chunkIndex")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"valueIndex")," as the second and third arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let getChildValue = (parent, childIndex, valueIndex) =>\n    chunked.chunks[childIndex].get(valueIndex);\nlet childValue = chunked.search(6, (chunked, childIndex, valueIndex) => )\n")),(0,r.kt)("h3",{id:"isvalidindex-number-boolean"},"isValid(index: Number): boolean"),(0,r.kt)("p",null,"Checks if the element at ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," in the logical array is valid."),(0,r.kt)("p",null,"Checks the null map (if present) to determine if the value in the logical ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," is included."),(0,r.kt)("h3",{id:"getindex--number-ttvalue--null"},"get(index : Number): T","['TValue']"," | null"),(0,r.kt)("p",null,"Returns the element at ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," in the logical array, or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no such element exists (e.e.g if ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," is out of range)."),(0,r.kt)("h3",{id:"setindex-number-value-ttvalue--null-void"},"set(index: Number, value: T","['TValue']"," | null): void"),(0,r.kt)("p",null,"Writes the given ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," at the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),". If the value is null, the null bitmap is updated."),(0,r.kt)("h3",{id:"indexofelement-type-offset-number-number"},"indexOf(element: Type, offset?: Number): Number"),(0,r.kt)("p",null,"Returns the index of the first occurrence of ",(0,r.kt)("inlineCode",{parentName:"p"},"element"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"-1")," if the value was not found."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offset")," - the index to start searching from.")),(0,r.kt)("h3",{id:"toarray-typedarray"},"toArray(): TypedArray"),(0,r.kt)("p",null,'Returns a single contiguous typed array containing data in all the chunks (effectively "flattening" the chunks.'),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Calling this function creates a new typed array unless there is only one chunk.")))}h.isMDXComponent=!0}}]);