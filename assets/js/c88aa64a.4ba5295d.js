"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4189],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),d=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=d(a),c=n,k=s["".concat(p,".").concat(c)]||s[c]||u[c]||l;return a?r.createElement(k,i(i({ref:t},m),{},{components:a})):r.createElement(k,i({ref:t},m))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:n,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},67356:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=a(87462),n=(a(67294),a(3905));const l={},i="TerrainLoader",o={unversionedId:"modules/terrain/api-reference/terrain-loader",id:"modules/terrain/api-reference/terrain-loader",title:"TerrainLoader",description:"The TerrainLoader reconstructs mesh surfaces from height map images, e.g. Mapzen Terrain Tiles, which encodes elevation into R,G,B values.",source:"@site/../docs/modules/terrain/api-reference/terrain-loader.md",sourceDirName:"modules/terrain/api-reference",slug:"/modules/terrain/api-reference/terrain-loader",permalink:"/docs/modules/terrain/api-reference/terrain-loader",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/terrain/api-reference/terrain-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ShapefileLoader",permalink:"/docs/modules/shapefile/api-reference/shapefile-loader"},next:{title:"BasisLoader",permalink:"/docs/modules/textures/api-reference/basis-loader"}},p={},d=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"elevationDecoder",id:"elevationdecoder",level:3},{value:"tesselator",id:"tesselator",level:3}],m={toc:d},s="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(s,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"terrainloader"},"TerrainLoader"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"TerrainLoader")," reconstructs mesh surfaces from height map images, e.g. ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/tilezen/joerd/blob/master/docs/formats.md"},"Mapzen Terrain Tiles"),", which encodes elevation into R,G,B values."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Loader"),(0,n.kt)("th",{parentName:"tr",align:null},"Characteristic"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},".png"),", ",(0,n.kt)("inlineCode",{parentName:"td"},".pngraw"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Type"),(0,n.kt)("td",{parentName:"tr",align:null},"Binary")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Format"),(0,n.kt)("td",{parentName:"tr",align:null},"Encoded height map")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Data Format"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/specifications/category-mesh"},"Mesh"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Supported APIs"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"load"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"parse"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Decoder Type"),(0,n.kt)("td",{parentName:"tr",align:null},"Asynchronous")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Worker Thread Support"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Streaming Support"),(0,n.kt)("td",{parentName:"tr",align:null},"No")))),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {ImageLoader} from '@loaders.gl/images';\nimport {TerrainLoader} from '@loaders.gl/terrain';\nimport {load, registerLoaders} from '@loaders.gl/core';\n\nregisterLoaders(ImageLoader);\n\nconst data = await load(url, TerrainLoader, options);\n")),(0,n.kt)("h2",{id:"options"},"Options"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Option"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"terrain.meshMaxError")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"10")),(0,n.kt)("td",{parentName:"tr",align:null},"Mesh error in meters. The output mesh is in higher resolution (more vertices) if the error is smaller.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"terrain.bounds")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"array<number>")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"null")),(0,n.kt)("td",{parentName:"tr",align:null},"Bounds of the image to fit x,y coordinates into. In ",(0,n.kt)("inlineCode",{parentName:"td"},"[minX, minY, maxX, maxY]"),". If not supplied, x and y are in pixels relative to the image.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"terrain.elevationDecoder")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"object")),(0,n.kt)("td",{parentName:"tr",align:null},"See below"),(0,n.kt)("td",{parentName:"tr",align:null},"See below")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"terrain.tesselator")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"auto")),(0,n.kt)("td",{parentName:"tr",align:null},"See below")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"terrain.skirtHeight")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"null")),(0,n.kt)("td",{parentName:"tr",align:null},"If set, create the skirt for the tile with particular height in meters")))),(0,n.kt)("h3",{id:"elevationdecoder"},"elevationDecoder"),(0,n.kt)("p",null,"Parameters used to convert a pixel to elevation in meters.\nAn object containing the following fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rScale"),": Multiplier of the red channel."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"gScale"),": Multiplier of the green channel."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bScale"),": Multiplier of the blue channel."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"offset"),": Translation of the sum.")),(0,n.kt)("p",null,"Each color channel (r, g, and b) is a number between ",(0,n.kt)("inlineCode",{parentName:"p"},"[0, 255]"),"."),(0,n.kt)("p",null,"For example, the Mapbox terrain service's elevation is ",(0,n.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/help/troubleshooting/access-elevation-data/#decode-data"},"encoded as follows"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1)\n")),(0,n.kt)("p",null,"The corresponding ",(0,n.kt)("inlineCode",{parentName:"p"},"elevationDecoder")," is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "rScale": 6553.6,\n  "gScale": 25.6,\n  "bScale": 0.1,\n  "offset": -10000\n}\n')),(0,n.kt)("p",null,"The default value of ",(0,n.kt)("inlineCode",{parentName:"p"},"elevationDecoder")," decodes a grayscale image:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "rScale": 1,\n  "gScale": 0,\n  "gScale": 0,\n  "offset": 0\n}\n')),(0,n.kt)("h3",{id:"tesselator"},"tesselator"),(0,n.kt)("p",null,"The choices for tesselator are as follows:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"auto"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Chooses ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mapbox/martini"},"Martini")," if possible (if the image is a square where both height and width are powers of 2), otherwise uses ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mapbox/delatin"},"Delatin")," instead, which has no input image limitations.")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"martini"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Uses the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mapbox/martini"},"Martini")," algorithm for constructing a mesh."),(0,n.kt)("li",{parentName:"ul"},"Only works on square 2^n+1 x 2^n+1 grids."),(0,n.kt)("li",{parentName:"ul"},"Generates a hierarchy of meshes (pick arbitrary detail after a single run)"),(0,n.kt)("li",{parentName:"ul"},"Optimized for meshing speed rather than quality.")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"delatin"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Uses the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mapbox/delatin"},"Delatin")," algorithm for constructing a mesh."),(0,n.kt)("li",{parentName:"ul"},"Works on arbitrary raster grids."),(0,n.kt)("li",{parentName:"ul"},"Generates a single mesh for a particular detail."),(0,n.kt)("li",{parentName:"ul"},"Optimized for quality (as little triangles as possible for a given error).")))}u.isMDXComponent=!0}}]);