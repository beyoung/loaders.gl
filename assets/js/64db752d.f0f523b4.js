"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1747],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),f=a,m=c["".concat(s,".").concat(f)]||c[f]||u[f]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},o="fetchFile",l={unversionedId:"modules/core/api-reference/fetch-file",id:"modules/core/api-reference/fetch-file",title:"fetchFile",description:"The fetchFile function is a wrapper around fetch which provides support for path prefixes and some additional loading capabilities.",source:"@site/../docs/modules/core/api-reference/fetch-file.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/fetch-file",permalink:"/docs/modules/core/api-reference/fetch-file",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/core/api-reference/fetch-file.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"save",permalink:"/docs/modules/core/api-reference/save"},next:{title:"writeFile",permalink:"/docs/modules/core/api-reference/write-file"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>fetchFile(url: string | Blob, options?: RequestInit) : Promise&lt;Response&gt;</code>",id:"fetchfileurl-string--blob-options-requestinit--promiseresponse",level:3},{value:"Remarks",id:"remarks",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fetchfile"},"fetchFile"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"fetchFile")," function is a wrapper around ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch")," which provides support for path prefixes and some additional loading capabilities."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"fetchFile")," function as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {fetchFile} from '@loaders.gl/core';\n\nconst response = await fetchFile(url);\n// or supply any standard `RequestInit` options expected by `fetch`\nconst response = await fetchFile(url, {headers: {}});\n\n// Now use standard browser Response APIs\n\n// Note: headers are case-insensitive\nconst contentLength = response.headers.get('content-length');\nconst mimeType = response.headers.get('content-type');\n\nconst arrayBuffer = await response.arrayBuffer();\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Response")," object from ",(0,a.kt)("inlineCode",{parentName:"p"},"fetchFile")," is usually passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"parse")," as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {fetchFile, parse} from '@loaders.gl/core';\nimport {OBJLoader} from '@loaders.gl/obj';\n\nconst data = await parse(fetchFile(url), OBJLoader);\n")),(0,a.kt)("p",null,"Note that if you don't need the extra features in ",(0,a.kt)("inlineCode",{parentName:"p"},"fetchFile"),", you can just use the browsers built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {parse} from '@loaders.gl/core';\nimport {OBJLoader} from '@loaders.gl/obj';\n\nconst data = await parse(fetch(url), OBJLoader);\n")),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"fetchfileurl-string--blob-options-requestinit--promiseresponse"},(0,a.kt)("inlineCode",{parentName:"h3"},"fetchFile(url: string | Blob, options?: RequestInit) : Promise<Response>")),(0,a.kt)("p",null,"A wrapper around the platform ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/fetch"},(0,a.kt)("inlineCode",{parentName:"a"},"fetch"))," function with some additions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Supports ",(0,a.kt)("inlineCode",{parentName:"li"},"setPathPrefix"),": If path prefix has been set, it will be appended if ",(0,a.kt)("inlineCode",{parentName:"li"},"url")," is relative (e.g. does not start with a ",(0,a.kt)("inlineCode",{parentName:"li"},"/"),")."),(0,a.kt)("li",{parentName:"ul"},"Supports ",(0,a.kt)("inlineCode",{parentName:"li"},"File")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Blob"),' objects on the browser (and returns "mock" fetch response objects).')),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A promise that resolves into a fetch ",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Response"},(0,a.kt)("inlineCode",{parentName:"a"},"Response"))," object, with the following methods/fields:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"headers"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"Headers")," - A ",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Headers"},(0,a.kt)("inlineCode",{parentName:"a"},"Headers"))," object."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arrayBuffer()"),": Promise.ArrayBuffer",(0,a.kt)("inlineCode",{parentName:"li"},"- Loads the file as an"),"ArrayBuffer`."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text()"),": Promise.String` - Loads the file and decodes it into text."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"json()"),": Promise.String` - Loads the file and decodes it into JSON."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"body")," : ReadableStream` - A stream that can be used to incrementally read the contents of the file.")))),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("inlineCode",{parentName:"li"},"string")," URLs - ",(0,a.kt)("inlineCode",{parentName:"li"},"fetchFile")," will delegate to ",(0,a.kt)("inlineCode",{parentName:"li"},"fetch")," after resolving the URL."),(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("inlineCode",{parentName:"li"},"File"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"Blob")," - a ",(0,a.kt)("inlineCode",{parentName:"li"},"Response")," object will be returned. Any ",(0,a.kt)("inlineCode",{parentName:"li"},"RequestInit")," options are ignored in this case."),(0,a.kt)("li",{parentName:"ul"},"Under Node.js, ",(0,a.kt)("inlineCode",{parentName:"li"},"fetchFile")," (and ",(0,a.kt)("inlineCode",{parentName:"li"},"fetch"),") works and returns a polyfilled ",(0,a.kt)("inlineCode",{parentName:"li"},"Response")," object if ",(0,a.kt)("inlineCode",{parentName:"li"},"@loaders.gl/polyfills")," has been installed, and ",(0,a.kt)("inlineCode",{parentName:"li"},"RequestInit")," options are used."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Response.headers")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Content-Length")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Content-Type"),") are populated (on a best effort basis for ",(0,a.kt)("inlineCode",{parentName:"li"},"File"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Blob")," and under Node.js)."),(0,a.kt)("li",{parentName:"ul"},"Use of ",(0,a.kt)("inlineCode",{parentName:"li"},"fetchFile")," is completely optional. loaders.gl can be used with data loaded via any mechanism the application prefers, e.g. directly using ",(0,a.kt)("inlineCode",{parentName:"li"},"fetch"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"XMLHttpRequest")," etc."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"setPathPrefix()")," mechanism is intended to help test cases to load data from the right place, but is not intended to support general application use cases, so use with care.")))}u.isMDXComponent=!0}}]);