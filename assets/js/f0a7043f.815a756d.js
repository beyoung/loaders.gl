"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4868],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(r),y=a,g=d["".concat(c,".").concat(y)]||d[y]||u[y]||s;return r?n.createElement(g,o(o({ref:t},p),{},{components:r})):n.createElement(g,o({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=y;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},15870:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(83117),a=(r(67294),r(3905));const s={},o="AsyncIterators",i={unversionedId:"developer-guide/concepts/async-iterators",id:"developer-guide/concepts/async-iterators",title:"AsyncIterators",description:"Streaming functionality in loaders.gl is built on the ES2018 AsyncIterator concept. This page gives some background on AsyncIterator since it is a recently introduced concept (at least as part of the JavaScript standard).",source:"@site/../docs/developer-guide/concepts/async-iterators.md",sourceDirName:"developer-guide/concepts",slug:"/developer-guide/concepts/async-iterators",permalink:"/docs/developer-guide/concepts/async-iterators",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/developer-guide/concepts/async-iterators.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Streaming",permalink:"/docs/developer-guide/concepts/streaming"},next:{title:"Worker Threads",permalink:"/docs/developer-guide/concepts/worker-threads"}},c={},l=[{value:"Availability",id:"availability",level:2},{value:"Batched Parsing and Endcoding using AsyncIterators",id:"batched-parsing-and-endcoding-using-asynciterators",level:2},{value:"Using AsyncIterator",id:"using-asynciterator",level:2},{value:"Using Streams as AsyncIterators",id:"using-streams-as-asynciterators",level:2},{value:"Creating AsyncIterators",id:"creating-asynciterators",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"asynciterators"},"AsyncIterators"),(0,a.kt)("p",null,"Streaming functionality in loaders.gl is built on the ES2018 ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator")," concept. This page gives some background on AsyncIterator since it is a recently introduced concept (at least as part of the JavaScript standard)."),(0,a.kt)("h2",{id:"availability"},"Availability"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterator")," is a standard JavaScript ES2018 feature and is well supported by recent evergreen browsers and Node.js versions."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"for await of")," iteration syntax is supported as well as the babel transpiler."),(0,a.kt)("h2",{id:"batched-parsing-and-endcoding-using-asynciterators"},"Batched Parsing and Endcoding using AsyncIterators"),(0,a.kt)("p",null,"The input and output from streaming loaders and writers can both be expressed in terms of async iterators."),(0,a.kt)("h2",{id:"using-asynciterator"},"Using AsyncIterator"),(0,a.kt)("p",null,"Remember tyhat an async iterator can be consumed (iterated over) via the for-await construct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"for await (const x of asyncIterable) {\n}\n")),(0,a.kt)("h2",{id:"using-streams-as-asynciterators"},"Using Streams as AsyncIterators"),(0,a.kt)("p",null,"With a little effort, streams in JavaScript can be treated as AsyncIterators. As the section about ",(0,a.kt)("a",{parentName:"p",href:"docs/developer-guide/streams"},"Javascript Streams")," explains, instead of registering callbacks on the stream, you can now work with streams in this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"for await (const buf of fs.createReadStream('foo.txt')) {\n  // do something\n}\n")),(0,a.kt)("h2",{id:"creating-asynciterators"},"Creating AsyncIterators"),(0,a.kt)("p",null,"Remember that any object in JavaScript that implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"[Symbol.asyncIterator]()")," method is an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncIterable"),". And the async generator syntax can be used to generate new async iterators"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"async function* asyncIterator() {\n  yield new Promise(...)\n}\n\nfor await (const x of asyncIterator()) {} // Notice parens after 'asyncIterator'\n")))}u.isMDXComponent=!0}}]);