"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8232],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=d(r),m=o,k=s["".concat(c,".").concat(m)]||s[m]||u[m]||a;return r?n.createElement(k,i(i({ref:t},p),{},{components:r})):n.createElement(k,i({ref:t},p))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},28728:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var n=r(87462),o=(r(67294),r(3905));const a={},i="Row",l={unversionedId:"arrowjs/api-reference/row",id:"arrowjs/api-reference/row",title:"Row",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/row.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/row",permalink:"/docs/arrowjs/api-reference/row",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/row.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RecordBatch",permalink:"/docs/arrowjs/api-reference/record-batch"},next:{title:"Schema",permalink:"/docs/arrowjs/api-reference/schema"}},c={},d=[{value:"Methods",id:"methods",level:2},{value:"<code>[key: string]: T[keyof T][&#39;TValue&#39;]</code>",id:"key-string-tkeyof-ttvalue",level:3},{value:"<code>[kParent]: MapVector&lt;T&gt;</code> | <code>StructVector&lt;T&gt;</code>",id:"kparent-mapvectort--structvectort",level:3},{value:"<code>[kRowIndex]: number</code>",id:"krowindex-number",level:3},{value:"<code>[kLength]: number</code> (readonly)",id:"klength-number-readonly",level:3},{value:"<code>[Symbol.iterator](): IterableIterator&lt;T[keyof T][&quot;TValue&quot;]&gt;</code>",id:"symboliterator-iterableiteratortkeyof-ttvalue",level:3},{value:"<code>get(key: K): T[K][&quot;TValue&quot;]</code>",id:"getkey-k-tktvalue",level:3},{value:"toJSON(): any",id:"tojson-any",level:3},{value:"toString(): any",id:"tostring-any",level:3}],p={toc:d},s="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(s,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"row"},"Row"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Row")," is an Object that retrieves each value at a certain index across a collection of child Vectors. Rows are returned from the ",(0,o.kt)("inlineCode",{parentName:"p"},"get()")," function of the nested ",(0,o.kt)("inlineCode",{parentName:"p"},"StructVector")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"MapVector"),", as well as ",(0,o.kt)("inlineCode",{parentName:"p"},"RecordBatch")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Row")," defines read-only accessors for the indices and (if applicable) names of the child Vectors. For example, given a ",(0,o.kt)("inlineCode",{parentName:"p"},"StructVector")," with the following schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const children = [\n    Int32Vector.from([0, 1]),\n    Utf8Vector.from(['foo', 'bar'])\n];\n\nconst type = new Struct<{ id: Int32, value: Utf8 }>([\n    new Field('id', children[0].type),\n    new Field('value', children[1].type)\n]);\n\nconst vector = new StructVector(Data.Struct(type, 0, 2, 0, null, children));\n\nconst row = vector.get(1);\n\nassert((row[0] ===   1  ) && (row.id    === row[0]));\nassert((row[1] === 'bar') && (row.value === row[1]));\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Row")," implements the Iterator interface, enumerating each value in order of the child vectors list."),(0,o.kt)("p",null,"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If the Row's parent type is a ",(0,o.kt)("inlineCode",{parentName:"li"},"Struct"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Object.getOwnPropertyNames(row)")," returns the child vector indices."),(0,o.kt)("li",{parentName:"ul"},"If the Row's parent type is a ",(0,o.kt)("inlineCode",{parentName:"li"},"Map"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Object.getOwnPropertyNames(row)")," returns the child vector field names, as defined by the ",(0,o.kt)("inlineCode",{parentName:"li"},"children")," Fields list of the ",(0,o.kt)("inlineCode",{parentName:"li"},"Map")," instance.")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"key-string-tkeyof-ttvalue"},(0,o.kt)("inlineCode",{parentName:"h3"},"[key: string]: T[keyof T]['TValue']")),(0,o.kt)("h3",{id:"kparent-mapvectort--structvectort"},(0,o.kt)("inlineCode",{parentName:"h3"},"[kParent]: MapVector<T>")," | ",(0,o.kt)("inlineCode",{parentName:"h3"},"StructVector<T>")),(0,o.kt)("h3",{id:"krowindex-number"},(0,o.kt)("inlineCode",{parentName:"h3"},"[kRowIndex]: number")),(0,o.kt)("h3",{id:"klength-number-readonly"},(0,o.kt)("inlineCode",{parentName:"h3"},"[kLength]: number")," (readonly)"),(0,o.kt)("h3",{id:"symboliterator-iterableiteratortkeyof-ttvalue"},(0,o.kt)("inlineCode",{parentName:"h3"},'[Symbol.iterator](): IterableIterator<T[keyof T]["TValue"]>')),(0,o.kt)("h3",{id:"getkey-k-tktvalue"},(0,o.kt)("inlineCode",{parentName:"h3"},'get(key: K): T[K]["TValue"]')),(0,o.kt)("p",null,"Returns the value at the supplied ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," is either the integer index of the set of child vectors, or the name of a child Vector"),(0,o.kt)("h3",{id:"tojson-any"},"toJSON(): any"),(0,o.kt)("h3",{id:"tostring-any"},"toString(): any"))}u.isMDXComponent=!0}}]);