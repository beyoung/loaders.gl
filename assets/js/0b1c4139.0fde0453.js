"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9074],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),y=a,m=d["".concat(o,".").concat(y)]||d[y]||u[y]||i;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=y;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},61462:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const i={},l="I3S Building Scene Layer (BSL)",s={unversionedId:"modules/i3s/recipes/building-scene-layer",id:"modules/i3s/recipes/building-scene-layer",title:"I3S Building Scene Layer (BSL)",description:"A building scene layer can represent 3D model content based on BIM structuring disciplines such as architectural or structural, and categories such as windows or walls. In I3S specification BSL is a layer type.",source:"@site/../docs/modules/i3s/recipes/building-scene-layer.md",sourceDirName:"modules/i3s/recipes",slug:"/modules/i3s/recipes/building-scene-layer",permalink:"/docs/modules/i3s/recipes/building-scene-layer",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/i3s/recipes/building-scene-layer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Worker Threads",permalink:"/docs/developer-guide/concepts/worker-threads"},next:{title:"Attribute-driven colorization",permalink:"/docs/modules/i3s/recipes/attribute-driven-colorization"}},o={},c=[{value:"BSL visualization with deck.gl",id:"bsl-visualization-with-deckgl",level:2},{value:"Load BSL",id:"load-bsl",level:3},{value:"Show sublayers in deck.gl",id:"show-sublayers-in-deckgl",level:3},{value:"Control sublayers&#39; visibility",id:"control-sublayers-visibility",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...i}=e;return(0,a.kt)(d,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"i3s-building-scene-layer-bsl"},"I3S Building Scene Layer (BSL)"),(0,a.kt)("p",{class:"badges"},(0,a.kt)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})),(0,a.kt)("p",null,"A building scene layer can represent 3D model content based on BIM structuring disciplines such as architectural or structural, and categories such as windows or walls. In I3S ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Esri/i3s-spec"},"specification")," BSL is a layer type."),(0,a.kt)("p",null,"BSL doesn't have content resources. It is a composite layer that consists of multiple sublayers. Every sublayer can be: ",(0,a.kt)("inlineCode",{parentName:"p"},"group"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"3DObject")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Point"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"group")," sublayer is also just a composite layer. It contains further levels of sublayers and provides a nested structure for BSL. As a result, BSL has a tree-like sublayers structure with ",(0,a.kt)("inlineCode",{parentName:"p"},"3DObject")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Point")," layers;"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"3DObject")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Point")," sublayers are content layers. Those layer types are separated types of layers in I3S spec and can be used independently. Loaders.gl supports ",(0,a.kt)("inlineCode",{parentName:"p"},"3DObject")," layer types and doesn't support ",(0,a.kt)("inlineCode",{parentName:"p"},"Point"),"."),(0,a.kt)("h2",{id:"bsl-visualization-with-deckgl"},"BSL visualization with deck.gl"),(0,a.kt)("p",null,"I3S ",(0,a.kt)("inlineCode",{parentName:"p"},"3DObject")," layer is shown in deck.gl with ",(0,a.kt)("a",{parentName:"p",href:"https://deck.gl/docs/api-reference/geo-layers/tile-3d-layer"},"Tile3DLayer"),". The complete case of BSL visualization is done in ",(0,a.kt)("a",{parentName:"p",href:"https://i3s.loaders.gl/viewer?tileset=turanga-library"},"I3S Explorer"),". It is an open source ReactJS application. See source code on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/visgl/loaders.gl-showcases"},"GitHub"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"I3S Explorer BSL visualization",src:r(54648).Z,width:"1823",height:"807"})),(0,a.kt)("h3",{id:"load-bsl"},"Load BSL"),(0,a.kt)("p",null,"For BSL it is necessary to do preparation steps to obtain data for ",(0,a.kt)("inlineCode",{parentName:"p"},"Tile3DLayer"),"."),(0,a.kt)("p",null,"Loaders.gl has ",(0,a.kt)("inlineCode",{parentName:"p"},"I3SBuildingSceneLayerLoader")," that is used to load BSL JSON metadata and pick ",(0,a.kt)("inlineCode",{parentName:"p"},"3DObject")," sublayers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import {load} from '@loaders.gl/core';\nimport {I3SBuildingSceneLayerLoader} from '@loaders.gl/i3s';\n\nconst {header, sublayers} = await load(tilesetData.url, I3SBuildingSceneLayerLoader);\n")),(0,a.kt)("p",null,"The loader returns a flattened array called ",(0,a.kt)("inlineCode",{parentName:"p"},"sublayers")," that contains only ",(0,a.kt)("inlineCode",{parentName:"p"},"3DObject")," layers from the BSL sublayers tree."),(0,a.kt)("h3",{id:"show-sublayers-in-deckgl"},"Show sublayers in deck.gl"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {I3SLoader} from '@loaders.gl/i3s';\n\nfunction renderLayer() {\n  const tile3dLayers = sublayers.map((layer) => {\n    if (!layer.visibility) {\n      return null;\n    }\n    const loadOptions = {\n      i3s: {coordinateSystem: COORDINATE_SYSTEM.LNGLAT_OFFSETS}\n    };\n    if (token) {\n      loadOptions.i3s.token = token;\n    }\n    return new Tile3DLayer({\n      id: `tile3d-layer-${layer.id}`,\n      data: layer.url,\n      loader: I3SLoader,\n      loadOptions\n    });\n  });\n}\n\n<DeckGL\n  id={id}\n  layers={renderLayers()}\n  viewState={viewState}\n  onViewStateChange={onViewStateChangeHandler}\n>\n  <StaticMap reuseMaps mapStyle={mapStyle} />\n</DeckGL>;\n")),(0,a.kt)("p",null,"Take a look at sublayer properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," - unique identifier required to set deck.gl layer id;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"url")," - ",(0,a.kt)("inlineCode",{parentName:"li"},"3DObject")," layer url;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"visibility")," - BSL has an initial visibility state for all sublayers. Use this property to control sublayers' visibility.")),(0,a.kt)("h3",{id:"control-sublayers-visibility"},"Control sublayers' visibility"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"I3SBuildingSceneLayerLoader")," returns also a ",(0,a.kt)("inlineCode",{parentName:"p"},"header")," object. ",(0,a.kt)("inlineCode",{parentName:"p"},"header.sublayers")," is a JSON nested tree that can be used to visualize BSL explorer panel."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"BSL Explorer visualization",src:r(89235).Z,width:"367",height:"797"})),(0,a.kt)("p",null,"With such a panel it is possible to change a sublayer visibility property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"  function onChangeHandler(treeItem) => {\n    const sublayer = sublayers.find((sublayer) => sublayer.id === treeItem.id);\n    if (sublayer) {\n      sublayer.visibility = !sublayer.visibility;\n    }\n  }\n")))}u.isMDXComponent=!0},89235:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/bsl-explorer-164adc35b4d0a4635ac00443770609a5.png"},54648:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/i3s-explorer-building-4bc05ac1233f15cde9fc656fa1f4959c.png"}}]);