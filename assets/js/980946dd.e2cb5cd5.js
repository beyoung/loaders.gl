"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1267],{3905:(e,r,a)=>{a.d(r,{Zo:()=>p,kt:()=>u});var t=a(67294);function s(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function n(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){s(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function i(e,r){if(null==e)return{};var a,t,s=function(e,r){if(null==e)return{};var a,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(s[a]=e[a]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=t.createContext({}),c=function(e){var r=t.useContext(l),a=r;return e&&(a="function"==typeof e?e(r):n(n({},r),e)),a},p=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var a=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),f=s,u=d["".concat(l,".").concat(f)]||d[f]||m[f]||o;return a?t.createElement(u,n(n({ref:r},p),{},{components:a})):t.createElement(u,n({ref:r},p))}));function u(e,r){var a=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=a.length,n=new Array(o);n[0]=f;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[d]="string"==typeof e?e:s,n[1]=i;for(var c=2;c<o;c++)n[c]=a[c];return t.createElement.apply(null,n)}return t.createElement.apply(null,a)}f.displayName="MDXCreateElement"},39813:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>l,contentTitle:()=>n,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=a(87462),s=(a(67294),a(3905));const o={},n="Compression",i={unversionedId:"modules/compression/api-reference/compression",id:"modules/compression/api-reference/compression",title:"Compression",description:"Compression is the abstract base class for loaders.gl compressions.",source:"@site/../docs/modules/compression/api-reference/compression.md",sourceDirName:"modules/compression/api-reference",slug:"/modules/compression/api-reference/compression",permalink:"/docs/modules/compression/api-reference/compression",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/compression/api-reference/compression.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/modules/compression/"},next:{title:"BrotliCompression",permalink:"/docs/modules/compression/api-reference/brotli-compression"}},l={},c=[{value:"Fields",id:"fields",level:2},{value:"<code>name</code>: string",id:"name-string",level:4},{value:"<code>isSupported</code>: string",id:"issupported-string",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>preload(): Promise&lt;void&gt;</code>",id:"preload-promisevoid",level:4},{value:"<code>compress(data: ArrayBuffer): Promise&lt;ArrayBuffer&gt;</code>",id:"compressdata-arraybuffer-promisearraybuffer",level:4},{value:"<code>decompress(data: ArrayBuffer): Promise&lt;ArrayBuffer&gt;</code>",id:"decompressdata-arraybuffer-promisearraybuffer",level:4},{value:"<code>compressSync(data: ArrayBuffer): ArrayBuffer</code>",id:"compresssyncdata-arraybuffer-arraybuffer",level:4},{value:"<code>decompressSync(data: ArrayBuffer): ArrayBuffer</code>",id:"decompresssyncdata-arraybuffer-arraybuffer",level:4},{value:"<code>compressBatches(data: AsyncIterable&lt;ArrayBuffer&gt;): AsyncIterable&lt;ArrayBuffer&gt;</code>",id:"compressbatchesdata-asynciterablearraybuffer-asynciterablearraybuffer",level:4},{value:"<code>decompressBatches(data: AsyncIterable&lt;ArrayBuffer&gt;): AsyncIterable&lt;ArrayBuffer&gt;</code>",id:"decompressbatchesdata-asynciterablearraybuffer-asynciterablearraybuffer",level:4}],p={toc:c},d="wrapper";function m(e){let{components:r,...a}=e;return(0,s.kt)(d,(0,t.Z)({},p,a,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"compression"},"Compression"),(0,s.kt)("p",{class:"badges"},(0,s.kt)("img",{src:"https://img.shields.io/badge/From-v2.3-blue.svg?style=flat-square",alt:"From-v3.0"})),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Compression")," is the abstract base class for loaders.gl compressions."),(0,s.kt)("h2",{id:"fields"},"Fields"),(0,s.kt)("h4",{id:"name-string"},(0,s.kt)("inlineCode",{parentName:"h4"},"name"),": string"),(0,s.kt)("p",null,"The name of the compression scheme"),(0,s.kt)("h4",{id:"issupported-string"},(0,s.kt)("inlineCode",{parentName:"h4"},"isSupported"),": string"),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h4",{id:"preload-promisevoid"},(0,s.kt)("inlineCode",{parentName:"h4"},"preload(): Promise<void>")),(0,s.kt)("p",null,"Asynchronously loads required libraries. For some compressions this must be completed before\n",(0,s.kt)("inlineCode",{parentName:"p"},"compressSync()")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"decompressSync()")," are available."),(0,s.kt)("h4",{id:"compressdata-arraybuffer-promisearraybuffer"},(0,s.kt)("inlineCode",{parentName:"h4"},"compress(data: ArrayBuffer): Promise<ArrayBuffer>")),(0,s.kt)("p",null,"Asynchronously compresses data."),(0,s.kt)("h4",{id:"decompressdata-arraybuffer-promisearraybuffer"},(0,s.kt)("inlineCode",{parentName:"h4"},"decompress(data: ArrayBuffer): Promise<ArrayBuffer>")),(0,s.kt)("p",null,"Asynchronously decompresses data."),(0,s.kt)("h4",{id:"compresssyncdata-arraybuffer-arraybuffer"},(0,s.kt)("inlineCode",{parentName:"h4"},"compressSync(data: ArrayBuffer): ArrayBuffer")),(0,s.kt)("p",null,"Synchronously compresses data."),(0,s.kt)("p",null,"For some compressions ",(0,s.kt)("inlineCode",{parentName:"p"},"preload()")," must have been called and completed before\nsynchronous operations are available."),(0,s.kt)("h4",{id:"decompresssyncdata-arraybuffer-arraybuffer"},(0,s.kt)("inlineCode",{parentName:"h4"},"decompressSync(data: ArrayBuffer): ArrayBuffer")),(0,s.kt)("p",null,"Asynchronously decompresses data."),(0,s.kt)("p",null,"For some compressions ",(0,s.kt)("inlineCode",{parentName:"p"},"preload()")," must have been called and completed before\nsynchronous operations are available."),(0,s.kt)("h4",{id:"compressbatchesdata-asynciterablearraybuffer-asynciterablearraybuffer"},(0,s.kt)("inlineCode",{parentName:"h4"},"compressBatches(data: AsyncIterable<ArrayBuffer>): AsyncIterable<ArrayBuffer>")),(0,s.kt)("p",null,"Asynchronously compresses data in batches."),(0,s.kt)("p",null,"If the underlying compression does not support streaming compression,\nthe incoming data will be concatenated into a single ",(0,s.kt)("inlineCode",{parentName:"p"},"ArrayBuffer"),"\nand a single compressed batch will be yielded."),(0,s.kt)("h4",{id:"decompressbatchesdata-asynciterablearraybuffer-asynciterablearraybuffer"},(0,s.kt)("inlineCode",{parentName:"h4"},"decompressBatches(data: AsyncIterable<ArrayBuffer>): AsyncIterable<ArrayBuffer>")),(0,s.kt)("p",null,"Asynchronously decompresses data."),(0,s.kt)("p",null,"Note: If the underlying compression does not support streaming compression,\nthe incoming data will be concatenated into a single ",(0,s.kt)("inlineCode",{parentName:"p"},"ArrayBuffer"),"\nand a single decompressed batch will be yielded."))}m.isMDXComponent=!0}}]);