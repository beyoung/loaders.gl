"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1081],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),u=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=u(a),m=n,f=s["".concat(i,".").concat(m)]||s[m]||c[m]||o;return a?r.createElement(f,l(l({ref:t},d),{},{components:a})):r.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[s]="string"==typeof e?e:n,l[1]=p;for(var u=2;u<o;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},62994:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var r=a(83117),n=(a(67294),a(3905));const o={},l="ParquetLoader",p={unversionedId:"modules/parquet/api-reference/parquet-loader",id:"modules/parquet/api-reference/parquet-loader",title:"ParquetLoader",description:"Streaming loader for Apache Parquet encoded files.",source:"@site/../docs/modules/parquet/api-reference/parquet-loader.md",sourceDirName:"modules/parquet/api-reference",slug:"/modules/parquet/api-reference/parquet-loader",permalink:"/docs/modules/parquet/api-reference/parquet-loader",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/parquet/api-reference/parquet-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OBJLoader",permalink:"/docs/modules/obj/api-reference/obj-loader"},next:{title:"PCDLoader",permalink:"/docs/modules/pcd/api-reference/pcd-loader"}},i={},u=[{value:"Usage",id:"usage",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Options",id:"options",level:2}],d={toc:u},s="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(s,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"parquetloader"},"ParquetLoader"),(0,n.kt)("p",{class:"badges"},(0,n.kt)("img",{src:"https://img.shields.io/badge/From-v3.1-blue.svg?style=flat-square",alt:"From-v3.1"}),(0,n.kt)("img",{src:"https://img.shields.io/badge/-BETA-teal.svg",alt:"BETA"})),(0,n.kt)("p",null,"Streaming loader for Apache Parquet encoded files."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Loader"),(0,n.kt)("th",{parentName:"tr",align:null},"Characteristic"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},".parquet"),",")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"MIME Type"),(0,n.kt)("td",{parentName:"tr",align:null},"N/A (",(0,n.kt)("inlineCode",{parentName:"td"},"application/octet-stream"),")")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Type"),(0,n.kt)("td",{parentName:"tr",align:null},"Binary")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"File Format"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://parquet.apache.org/documentation/latest"},"Parquet"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Data Format"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/specifications/category-table"},"Classic Table"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Supported APIs"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"load"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"parse"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"parseInBatches"))))),(0,n.kt)("p",null,"Please refer to the ",(0,n.kt)("inlineCode",{parentName:"p"},"@loaders.gl/parquet")," module page for information on\nwhich ",(0,n.kt)("a",{parentName:"p",href:"/docs/modules/parquet"},"Parquet format features")," are supported."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"import {ParquetLoader} from '@loaders.gl/parquet';\nimport {load} from '@loaders.gl/core';\n\nconst data = await load(url, ParquetLoader, {parquet: options});\n")),(0,n.kt)("p",null,'The ParquetLoader supports streaming parsing, in which case it will yield "batches" of rows.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"import {ParquetLoader} from '@loaders.gl/parquet';\nimport {loadInBatches} from '@loaders.gl/core';\n\nconst batches = await loadInBatches('geo.parquet', ParquetLoader, {parquet: options}});\n\nfor await (const batch of batches) {\n  // batch.data will contain a number of rows\n  for (const feature of batch.data) {\n    switch (feature.geometry.type) {\n      case 'Polygon':\n      ...\n    }\n  }\n}\n")),(0,n.kt)("h2",{id:"data-format"},"Data Format"),(0,n.kt)("p",null,"For details see ",(0,n.kt)("a",{parentName:"p",href:"/modules/parquet/docs"},"@loaders.gl/parquet"),"."),(0,n.kt)("h2",{id:"options"},"Options"),(0,n.kt)("p",null,"Supports table category options such as ",(0,n.kt)("inlineCode",{parentName:"p"},"batchType")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"batchSize"),"."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Option"),(0,n.kt)("th",{parentName:"tr",align:null},"From"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Description")))))}c.isMDXComponent=!0}}]);