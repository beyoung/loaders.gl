"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2302],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return r?a.createElement(f,l(l({ref:t},u),{},{components:r})):a.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4037:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const o={},l="Overview",i={unversionedId:"modules/textures/README",id:"modules/textures/README",title:"Overview",description:"The @loaders.gl/textures module contains loaders for compressed textures. More specifically it contains loaders and writers for compressed texture container formats, including KTX, DDS and PVR. It also supports supercompressed Basis textures.",source:"@site/../docs/modules/textures/README.md",sourceDirName:"modules/textures",slug:"/modules/textures/",permalink:"/docs/modules/textures/",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/textures/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"tile-converter-bundle",permalink:"/docs/modules/tile-converter/api-reference/tile-converter-bundle"},next:{title:"About Compressed Textures",permalink:"/docs/modules/textures/formats/compressed-textures"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"API",id:"api",level:2},{value:"Return Types",id:"return-types",level:2},{value:"Texture APIs",id:"texture-apis",level:2},{value:"Attributions",id:"attributions",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"overview"},"Overview"),(0,n.kt)("p",{class:"badges"},(0,n.kt)("img",{src:"https://img.shields.io/badge/From-v3.0-blue.svg?style=flat-square",alt:"From-v3.0"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@loaders.gl/textures")," module contains loaders for compressed textures. More specifically it contains loaders and writers for compressed texture ",(0,n.kt)("strong",{parentName:"p"},"container")," formats, including KTX, DDS and PVR. It also supports supercompressed Basis textures."),(0,n.kt)("p",null,'Note that a texture is more complex than an image. A texture typically has many subimages. A texture can represent a single logical image but can also be a texture cube, a texture array etc representing many logical images. In addition, each "image" typically has many mipmap levels.'),(0,n.kt)("p",null,"In addition, in compressed textures each mipmap image is compressed opaquely into a format that can only be understood by certain GPUs."),(0,n.kt)("p",null,"Basis encoded textures are super compressed. A more recent addition, they can be efficiently transcoded on the client into actual compressed texture formats appropriate for each device and are therefore quite convenient to use."),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @loaders.gl/textures\nnpm install @loaders.gl/core\n")),(0,n.kt)("h2",{id:"api"},"API"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Loader"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"modules/textures/docs/api-reference/basis-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"BasisLoader"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h2",{id:"return-types"},"Return Types"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"BasisLoader")," returns Array of Array of ArrayBuffer"),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"modules/textures/docs/api-reference/image-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"BasisLoader"))," for more details on options etc."),(0,n.kt)("h2",{id:"texture-apis"},"Texture APIs"),(0,n.kt)("p",null,'The textures API offers functions to load "composite" images for WebGL textures, cube textures and image mip levels.'),(0,n.kt)("p",null,"These functions take a ",(0,n.kt)("inlineCode",{parentName:"p"},"getUrl"),' parameter that enables the app to supply the url for each "sub-image", and return a single promise enabling applications to for instance load all the faces of a cube texture, with one image for each mip level for each face in a single async operation.'),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Function"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"modules/images/docs/api-reference/load-image"},(0,n.kt)("inlineCode",{parentName:"a"},"loadImage"))),(0,n.kt)("td",{parentName:"tr",align:null},"Load a single image")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"modules/images/docs/api-reference/load-image-array"},(0,n.kt)("inlineCode",{parentName:"a"},"loadImageArray"))),(0,n.kt)("td",{parentName:"tr",align:null},"Load an array of images, e.g. for a ",(0,n.kt)("inlineCode",{parentName:"td"},"Texture2DArray")," or ",(0,n.kt)("inlineCode",{parentName:"td"},"Texture3D"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"modules/images/docs/api-reference/load-image-cube"},(0,n.kt)("inlineCode",{parentName:"a"},"loadImageCube"))),(0,n.kt)("td",{parentName:"tr",align:null},"Load a map of 6 images for the faces of a cube map, or a map of 6 arrays of images for the mip levels of the 6 faces.")))),(0,n.kt)("p",null,"As with all loaders.gl functions, while these functions are intended for use in WebGL applications, they do not call any WebGL functions, and do not actually create any WebGL textures.."),(0,n.kt)("h2",{id:"attributions"},"Attributions"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"CompressedTextureLoader")," was forked from ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/tsherif/picogl.js/blob/master/examples/utils/utils.js"},"PicoGL"),", Copyright (c) 2017 Tarek Sherif, The MIT License (MIT)"),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"CompressedTextureWriter")," is a wrapper around @TimvanScherpenzeel's ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/TimvanScherpenzeel/texture-compressor"},(0,n.kt)("inlineCode",{parentName:"a"},"texture-compressor"))," utility (MIT licensed).")))}c.isMDXComponent=!0}}]);