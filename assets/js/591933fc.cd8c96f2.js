"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3473],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),s=d(a),c=r,k=s["".concat(p,".").concat(c)]||s[c]||u[c]||l;return a?n.createElement(k,o(o({ref:t},m),{},{components:a})):n.createElement(k,o({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},46366:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={},o="@loaders.gl/schema",i={unversionedId:"modules/schema/README",id:"modules/schema/README",title:"@loaders.gl/schema",description:"Table",source:"@site/../docs/modules/schema/README.md",sourceDirName:"modules/schema",slug:"/modules/schema/",permalink:"/docs/modules/schema/",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/schema/README.md",tags:[],version:"current",frontMatter:{}},p={},d=[{value:"Schemas",id:"schemas",level:2},{value:"Batches",id:"batches",level:2},{value:"Table APIs",id:"table-apis",level:2},{value:"Determining shape of loaded data",id:"determining-shape-of-loaded-data",level:2},{value:"Controlling the shape of loaded data",id:"controlling-the-shape-of-loaded-data",level:2},{value:"Table Category",id:"table-category",level:3},{value:"GIS Category",id:"gis-category",level:2}],m={toc:d},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loadersglschema"},"@loaders.gl/schema"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Table")),(0,r.kt)("h2",{id:"schemas"},"Schemas"),(0,r.kt)("h2",{id:"batches"},"Batches"),(0,r.kt)("h2",{id:"table-apis"},"Table APIs"),(0,r.kt)("p",null,"The table API is modelled after a subset of the Apache Arrow API:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Class"),(0,r.kt)("th",{parentName:"tr",align:null},"Arrow Counterpart"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"modules/schema/api-reference/table"},(0,r.kt)("inlineCode",{parentName:"a"},"Table"))),(0,r.kt)("td",{parentName:"tr",align:null},"Table"),(0,r.kt)("td",{parentName:"tr",align:null},"Table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"modules/schema/api-reference/table-schema"},(0,r.kt)("inlineCode",{parentName:"a"},"TableSchema"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Schema")),(0,r.kt)("td",{parentName:"tr",align:null},"Table schema")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"modules/schema/api-reference/table-batch"},(0,r.kt)("inlineCode",{parentName:"a"},"TableBatch"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RecordBatch")),(0,r.kt)("td",{parentName:"tr",align:null},"Table batch")))),(0,r.kt)("h2",{id:"determining-shape-of-loaded-data"},"Determining shape of loaded data"),(0,r.kt)("p",null,"loaders.gl favors formats that wrap the data with a ",(0,r.kt)("inlineCode",{parentName:"p"},"shape")," field so that the type of the returned data can be determined at run-time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'export type NewDataType = {\n  shape: "new-data-type",\n  data: TypeOfData,\n  schema?: Schema\n}\n')),(0,r.kt)("p",null,"However a number of traditional return formats do not include such a wrapper."),(0,r.kt)("h2",{id:"controlling-the-shape-of-loaded-data"},"Controlling the shape of loaded data"),(0,r.kt)("p",null,"Loaders are encouraged to provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"shape")," option to allow applications to control the return format. Since different loaders offer different selection of shapes, the option is set per loader."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const tile = await load(url, MVTLoader, {mvt: {shape: 'geojson-table', ...}});\nassert(tile.shape === 'geojson-table');\nprocessTile(tile.data);\n")),(0,r.kt)("h3",{id:"table-category"},"Table Category"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Shape"),(0,r.kt)("th",{parentName:"tr",align:null},"Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Types / Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"table")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Table")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array-row-table")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ArrayRowTable")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object-row-table")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ObjectRowTable")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"columnar-table")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ColumnarTable")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tables can be "),(0,r.kt)("li",{parentName:"ul"},"row-oriented, i.e. organized as an array of rows"),(0,r.kt)("li",{parentName:"ul"},"columnar, containing one array per column")),(0,r.kt)("p",null,"Rows can contain either"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an array of values, where the column name is found in the schema."),(0,r.kt)("li",{parentName:"ul"},"object with key-value pairs, where the key is the column name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "shape": , \n  "data": \n}\n')),(0,r.kt)("h2",{id:"gis-category"},"GIS Category"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Shape"),(0,r.kt)("th",{parentName:"tr",align:null},"Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Types / Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"geojson")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GeoJSON")),(0,r.kt)("td",{parentName:"tr",align:null},"GeoJSON is a ",(0,r.kt)("inlineCode",{parentName:"td"},"features")," array wrapped at the top level")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array-row-table")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ArrayRowTable")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object-row-table")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ObjectRowTable")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"geojson-table")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GeojsonTable")),(0,r.kt)("td",{parentName:"tr",align:null},"GeoJSON table essentially contains the ",(0,r.kt)("inlineCode",{parentName:"td"},"features")," array from the")))))}u.isMDXComponent=!0}}]);