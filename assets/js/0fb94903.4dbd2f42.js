"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1073],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),m=n,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return a?r.createElement(f,l(l({ref:t},d),{},{components:a})):r.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},36405:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=a(83117),n=(a(67294),a(3905));const o={},l="selectLoader",i={unversionedId:"modules/core/api-reference/select-loader",id:"modules/core/api-reference/select-loader",title:"selectLoader",description:"The selectLoader() and selectLoaderSync() functions will automatically select",source:"@site/../docs/modules/core/api-reference/select-loader.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/select-loader",permalink:"/docs/modules/core/api-reference/select-loader",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/core/api-reference/select-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"parseInBatches",permalink:"/docs/modules/core/api-reference/parse-in-batches"},next:{title:"Loader Options",permalink:"/docs/modules/core/api-reference/set-loader-options"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>selectLoader(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): Promise&lt;boolean&gt;</code>",id:"selectloaderdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-promiseboolean",level:3},{value:"<code>selectLoaderSync(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): boolean</code>",id:"selectloadersyncdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-boolean",level:3},{value:"Supported Formats",id:"supported-formats",level:2},{value:"MIME types",id:"mime-types",level:2},{value:"Remarks",id:"remarks",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"selectloader"},"selectLoader"),(0,n.kt)("p",{class:"badges"},(0,n.kt)("img",{src:"https://img.shields.io/badge/From-v2.2-blue.svg?style=flat-square",alt:"From-v2.2"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"selectLoader()")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"selectLoaderSync()")," functions will automatically select\nan appropriate loader for a specific resource. ",(0,n.kt)("inlineCode",{parentName:"p"},"selectLoader()")," is called by the\n",(0,n.kt)("inlineCode",{parentName:"p"},"parse()")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"load()")," functions, but can also be called directly from applications."),(0,n.kt)("p",null,"Loader selection heuristics are based on:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Filename (or url) extensions"),(0,n.kt)("li",{parentName:"ul"},"MIME types (from ",(0,n.kt)("inlineCode",{parentName:"li"},"Response")," ",(0,n.kt)("inlineCode",{parentName:"li"},"content-type")," headers or ",(0,n.kt)("inlineCode",{parentName:"li"},"Blob.type"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"File.type")," fields)"),(0,n.kt)("li",{parentName:"ul"},'Initial bytes - for certain inputs, the initial bytes in the supplied data can be compared against known "magic bytes" for various file formats.')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"loader registry")," - ",(0,n.kt)("inlineCode",{parentName:"p"},"selectLoader()")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"selectLoaderSync()")," are also aware of the\n",(0,n.kt)("a",{parentName:"p",href:"docs/api-reference/core/register-loaders"},"loader registry"),".\nThe list of pre-registered loaders will be included in the search for a compatible loader,\nunless ",(0,n.kt)("inlineCode",{parentName:"p"},"options.ignoreRegisteredLoaders")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"Select a loader from a list of provided loaders:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {selectLoaderSync} from '@loaders.gl/core';\nimport {ArrowLoader} from '@loaders.gl/arrow';\nimport {CSVLoader} from '@loaders.gl/csv';\n\nselectLoaderSync('filename.csv', [ArrowLoader, CSVLoader]); // => CSVLoader\n")),(0,n.kt)("p",null,"Select a loader from pre-registered loaders in the loader registry:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {registerLoaders, selectLoader} from '@loaders.gl/core';\nimport {ArrowLoader} from '@loaders.gl/arrow';\nimport {CSVLoader} from '@loaders.gl/csv';\n\nregisterLoaders(ArrowLoader, CSVLoader);\n\nawait selectLoader('filename.csv'); // => CSVLoader\n")),(0,n.kt)("p",null,"Select a loader by specifying MIME type (using unregistered MIME types, see below)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const data = new Blob([string], {type: 'application/x.csv'});\nawait selectLoader(blob); // => CSVLoader\n")),(0,n.kt)("p",null,"The async ",(0,n.kt)("inlineCode",{parentName:"p"},"selectLoader")," function can identify loaders without extension and mimeType\nby content sniffing ",(0,n.kt)("inlineCode",{parentName:"p"},"Blob")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"File")," objects (useful when user drags and drops files into your application)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const data = new Blob(['DRACO...'] /* Binary Draco files start with these characters */]);\nawait selectLoader(blob, DracoLoader); // => DracoLoader\n")),(0,n.kt)("h2",{id:"functions"},"Functions"),(0,n.kt)("h3",{id:"selectloaderdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-promiseboolean"},(0,n.kt)("inlineCode",{parentName:"h3"},"selectLoader(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): Promise<boolean>")),(0,n.kt)("p",null,"Selects an appropriate loader for a file from a list of candidate loaders by examining the ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," parameter, looking at URL extension, mimeType ('Content-Type') and/or an initial data chunk."),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"data")," - data to perform autodetection against"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"loaders")," - can be a single loader or an array of loaders, or null."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options")," - See ",(0,n.kt)("a",{parentName:"li",href:"./loader-options"},(0,n.kt)("inlineCode",{parentName:"a"},"LoaderOptions")),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options.nothrow"),"=",(0,n.kt)("inlineCode",{parentName:"li"},"false")," - Return null instead of throwing exception if no loader can be found")),(0,n.kt)("p",null,"Returns:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A single loader (or ",(0,n.kt)("inlineCode",{parentName:"li"},"null")," if ",(0,n.kt)("inlineCode",{parentName:"li"},"options.nothrow")," was set and no matching loader was found).")),(0,n.kt)("p",null,"Throws:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If no matching loader was found, and ",(0,n.kt)("inlineCode",{parentName:"li"},"options.nothrow")," was not set.")),(0,n.kt)("p",null,"Regarding the ",(0,n.kt)("inlineCode",{parentName:"p"},"loaders")," parameter:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A single loader object will be returned without matching."),(0,n.kt)("li",{parentName:"ul"},"a ",(0,n.kt)("inlineCode",{parentName:"li"},"null")," loader list will use the pre-registered list of loaders."),(0,n.kt)("li",{parentName:"ul"},"A supplied list of loaders will be searched for a matching loader.")),(0,n.kt)("h3",{id:"selectloadersyncdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-boolean"},(0,n.kt)("inlineCode",{parentName:"h3"},"selectLoaderSync(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): boolean")),(0,n.kt)("h2",{id:"supported-formats"},"Supported Formats"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"strings / non-data urls:"),(0,n.kt)("li",{parentName:"ul"},"strings / data urls: The mime type will be extracted from the data url prologue (if available)"),(0,n.kt)("li",{parentName:"ul"},"fetch ",(0,n.kt)("inlineCode",{parentName:"li"},"Response")," objects: ",(0,n.kt)("inlineCode",{parentName:"li"},"url")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"headers.get('Content-Type')")," fields will be used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"File")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"Blob")," objects:")),(0,n.kt)("p",null,"Peeking into batched input sources is not supported directly by ",(0,n.kt)("inlineCode",{parentName:"p"},"selectLoader"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Response"),": Avoids requesting initial data to make sure the response body is not marked as used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Stream"),": It is not possible to non-destructively peek into a stream."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Iterator/AsyncIterator"),": it is not possible to peek into an iterator.")),(0,n.kt)("p",null,"Instead use helpers to get access to initialContents and pass it in separately."),(0,n.kt)("h2",{id:"mime-types"},"MIME types"),(0,n.kt)("p",null,"If the standard MIME types for each format are not precise enough, loaders.gl also supports ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Media_type#Unregistered_tree"},"unregistered")," MIME types. Each loader will match the ",(0,n.kt)("inlineCode",{parentName:"p"},"application/x.<id>")," where the ",(0,n.kt)("inlineCode",{parentName:"p"},"<id>")," is the documented ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," of the loader, e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"application/x.ply"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"application/x.draco"),"/etc ..."),(0,n.kt)("h2",{id:"remarks"},"Remarks"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"File extensions - An attempt will be made to extract a file extension by stripping away query parameters and base path before matching against known loader extensions."),(0,n.kt)("li",{parentName:"ul"},"Stream autodetection - Currently not well supported.")))}u.isMDXComponent=!0}}]);