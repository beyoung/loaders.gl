"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4105],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},22431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={},l="PMTiles",o={unversionedId:"modules/pmtiles/formats/pmtiles",id:"modules/pmtiles/formats/pmtiles",title:"PMTiles",description:"PMTiles is a single-file archive format for tiled data designed to enable individual tiles to be loaded via HTTP range request access. A PMTiles archive can be hosted on a commodity storage platform such as Amazon S3.",source:"@site/../docs/modules/pmtiles/formats/pmtiles.md",sourceDirName:"modules/pmtiles/formats",slug:"/modules/pmtiles/formats/pmtiles",permalink:"/docs/modules/pmtiles/formats/pmtiles",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/pmtiles/formats/pmtiles.md",tags:[],version:"current",frontMatter:{}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"Versions",id:"versions",level:2},{value:"Version 3",id:"version-3",level:2},{value:"Version 3 Specification",id:"version-3-specification",level:2},{value:"File structure",id:"file-structure",level:3},{value:"Entries",id:"entries",level:3},{value:"Directory Serialization",id:"directory-serialization",level:3},{value:"Header Design",id:"header-design",level:3},{value:"Notes",id:"notes",level:3},{value:"Organization",id:"organization",level:3},{value:"Version 2",id:"version-2",level:2},{value:"Header",id:"header",level:3},{value:"Directory structure",id:"directory-structure",level:3},{value:"Notes",id:"notes-1",level:3},{value:"Implementation suggestions",id:"implementation-suggestions",level:3}],p={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pmtiles"},"PMTiles"),(0,i.kt)("p",null,"PMTiles is a single-file archive format for tiled data designed to enable individual tiles to be loaded via HTTP range request access. A PMTiles archive can be hosted on a commodity storage platform such as Amazon S3."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[PMTiles][https://github.com/protomaps/PMTiles]"))),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"TBA"),(0,i.kt)("h2",{id:"versions"},"Versions"),(0,i.kt)("h2",{id:"version-3"},"Version 3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"File Structure\n97% smaller overhead - Spec version 2 would always issue a 512 kilobyte initial request; version 3 reduces this to 16 kilobytes. What remains the same is that nearly any map tile can be retrieved in at most two additional requests."),(0,i.kt)("li",{parentName:"ul"},"Unlimited metadata - version 2 had a hard cap on the amount of JSON metadata of about 300 kilobytes; version 3 removes this limit. This is essential for tools like tippecanoe to store detailed column statistics. Essential archive information, such as tile type and compression methods, are stored in a binary header separate from application metadata."),(0,i.kt)("li",{parentName:"ul"},"Hilbert tile IDs - tiles internally are addressed by a single 64-bit Hilbert tile ID instead of Z/X/Y. See the blog post on Tile IDs for details."),(0,i.kt)("li",{parentName:"ul"},"Archive ordering - An optional clustered mode enforces that tile contents are laid out in Tile ID order."),(0,i.kt)("li",{parentName:"ul"},"Compressed directories and metadata - Directories used to fetch offsets of tile data consume about 10% the space of those in version 2. See the blog post on compressed directories for details."),(0,i.kt)("li",{parentName:"ul"},"JavaScript\nCompression - The TypeScript pmtiles library now includes a decompressor - fflate - to allow reading compressed vector tile archives directly in the browser. This reduces the size and latency of vector tiles by as much as 70%."),(0,i.kt)("li",{parentName:"ul"},"Tile Cancellation - All JavaScript plugins now support tile cancellation, meaning quick zooming across many levels will interrupt the loading of tiles that are never shown. This has a significant effect on the perceived user experience, as tiles at the end of a animation will appear earlier."),(0,i.kt)("li",{parentName:"ul"},"ETag support - clients can detect when files change on static storage by reading the ETag HTTP header. This means that PMTiles-based map applications can update datasets in place at low frequency without running into caching problems.")),(0,i.kt)("h2",{id:"version-3-specification"},"Version 3 Specification"),(0,i.kt)("h3",{id:"file-structure"},"File structure"),(0,i.kt)("p",null,"A PMTiles archive is a single-file archive of square tiles with five main sections:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"A fixed-size, 127-byte ",(0,i.kt)("strong",{parentName:"li"},"Header")," starting with ",(0,i.kt)("inlineCode",{parentName:"li"},"PMTiles")," and then the spec version - currently ",(0,i.kt)("inlineCode",{parentName:"li"},"3")," - that contains offsets to the next sections."),(0,i.kt)("li",{parentName:"ol"},"A root ",(0,i.kt)("strong",{parentName:"li"},"Directory"),", described below. The Header and Root combined must be less than 16,384 bytes."),(0,i.kt)("li",{parentName:"ol"},"JSON metadata."),(0,i.kt)("li",{parentName:"ol"},"Optionally, a section of ",(0,i.kt)("strong",{parentName:"li"},"Leaf Directories"),", encoded the same way as the root."),(0,i.kt)("li",{parentName:"ol"},"The tile data.")),(0,i.kt)("h3",{id:"entries"},"Entries"),(0,i.kt)("p",null,"A Directory is a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"Entries"),", in ascending order by ",(0,i.kt)("inlineCode",{parentName:"p"},"TileId"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Entry = (TileId uint64, Offset uint64, Length uint32, RunLength uint32)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TileId")," starts at 0 and corresponds to a cumulative position on the series of square Hilbert curves starting at z=0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Offset")," is the position of the tile in the file relative to the start of the data section."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Length")," is the size of the tile in bytes. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RunLength")," is how many times this tile is repeated: the ",(0,i.kt)("inlineCode",{parentName:"li"},"TileId=5,RunLength=2")," means that tile is present at IDs 5 and 6."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"RunLength=0"),", the offset/length points to a Leaf Directory where ",(0,i.kt)("inlineCode",{parentName:"li"},"TileId")," is the first entry.")),(0,i.kt)("h3",{id:"directory-serialization"},"Directory Serialization"),(0,i.kt)("p",null,"Entries are stored in memory as integers, but serialized to disk using these compression steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"A little-endian varint indicating the # of entries"),(0,i.kt)("li",{parentName:"ol"},"Delta encoding of ",(0,i.kt)("inlineCode",{parentName:"li"},"TileId")),(0,i.kt)("li",{parentName:"ol"},"Zeroing of ",(0,i.kt)("inlineCode",{parentName:"li"},"Offset"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," if it is equal to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Offset")," + ",(0,i.kt)("inlineCode",{parentName:"li"},"Length")," of the previous entry"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Offset+1")," otherwise"))),(0,i.kt)("li",{parentName:"ol"},"Varint encoding of all numbers"),(0,i.kt)("li",{parentName:"ol"},"Columnar ordering: all ",(0,i.kt)("inlineCode",{parentName:"li"},"TileId"),"s, all ",(0,i.kt)("inlineCode",{parentName:"li"},"RunLength"),"s, all ",(0,i.kt)("inlineCode",{parentName:"li"},"Length"),"s, then all ",(0,i.kt)("inlineCode",{parentName:"li"},"Offset"),"s"),(0,i.kt)("li",{parentName:"ol"},"Finally, general purpose compression as described by the ",(0,i.kt)("inlineCode",{parentName:"li"},"Header"),"'s ",(0,i.kt)("inlineCode",{parentName:"li"},"InternalCompression")," field")),(0,i.kt)("p",null,"##3 Directory Hierarchy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The number of entries in the root directory and leaf directories is up to the implementation."),(0,i.kt)("li",{parentName:"ul"},"However, the compressed size of the header plus root directory is required in v3 to be under ",(0,i.kt)("strong",{parentName:"li"},"16,384 bytes"),". This is to allow latency-optimized clients to prefetch the root directory and guarantee it is complete. A sophisticated writer might need several attempts to optimize this. "),(0,i.kt)("li",{parentName:"ul"},"Root size, leaf sizes and depth should be configurable by the user to optimize for different trade-offs: cost, bandwidth, latency.")),(0,i.kt)("h3",{id:"header-design"},"Header Design"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Certain fields belonging to metadata in v2 are promoted to fixed-size header fields. This allows a map container to be initialized to the desired extent or center without blocking on the JSON metadata, and allows proxies to return well-defined HTTP headers.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Header")," is 127 bytes, with little-endian integer values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"offset"),(0,i.kt)("th",{parentName:"tr",align:null},"description"),(0,i.kt)("th",{parentName:"tr",align:null},"width"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"magic number ",(0,i.kt)("inlineCode",{parentName:"td"},"PMTiles")),(0,i.kt)("td",{parentName:"tr",align:null},"7")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"7"),(0,i.kt)("td",{parentName:"tr",align:null},"spec version, currently ",(0,i.kt)("inlineCode",{parentName:"td"},"3")),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"8"),(0,i.kt)("td",{parentName:"tr",align:null},"offset of root directory"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"16"),(0,i.kt)("td",{parentName:"tr",align:null},"length of root directory"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"24"),(0,i.kt)("td",{parentName:"tr",align:null},"offset of JSON metadata, possibly compressed by ",(0,i.kt)("inlineCode",{parentName:"td"},"InternalCompression")),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"32"),(0,i.kt)("td",{parentName:"tr",align:null},"length of JSON metadata"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"40"),(0,i.kt)("td",{parentName:"tr",align:null},"offset of leaf directories"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"48"),(0,i.kt)("td",{parentName:"tr",align:null},"length of leaf directories"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"56"),(0,i.kt)("td",{parentName:"tr",align:null},"offset of tile data"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"64"),(0,i.kt)("td",{parentName:"tr",align:null},"length of tile data"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"72"),(0,i.kt)("td",{parentName:"tr",align:null},"# of addressed tiles, 0 if unknown"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"80"),(0,i.kt)("td",{parentName:"tr",align:null},"# of tile entries, 0 if unknown"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"88"),(0,i.kt)("td",{parentName:"tr",align:null},"# of tile contents, 0 if unknown"),(0,i.kt)("td",{parentName:"tr",align:null},"8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"96"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean clustered flag, ",(0,i.kt)("inlineCode",{parentName:"td"},"0x1")," if true"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"97"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"InternalCompression")," enum (0 = Unknown, 1 = None, 2 = Gzip, 3 = Brotli, 4 = Zstd)"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"98"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TileCompression")," enum"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"99"),(0,i.kt)("td",{parentName:"tr",align:null},"tile type enum (0 = Unknown/Other, 1 = MVT (PBF Vector Tile), 2 = PNG, 3 = JPEG, 4 = WEBP"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"100"),(0,i.kt)("td",{parentName:"tr",align:null},"min zoom"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"101"),(0,i.kt)("td",{parentName:"tr",align:null},"max zoom"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"102"),(0,i.kt)("td",{parentName:"tr",align:null},"min longitude (signed 32-bit integer: longitude * 10,000,000)"),(0,i.kt)("td",{parentName:"tr",align:null},"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"106"),(0,i.kt)("td",{parentName:"tr",align:null},"min latitude"),(0,i.kt)("td",{parentName:"tr",align:null},"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"110"),(0,i.kt)("td",{parentName:"tr",align:null},"max longitude"),(0,i.kt)("td",{parentName:"tr",align:null},"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"114"),(0,i.kt)("td",{parentName:"tr",align:null},"max latitude"),(0,i.kt)("td",{parentName:"tr",align:null},"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"118"),(0,i.kt)("td",{parentName:"tr",align:null},"center zoom"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"119"),(0,i.kt)("td",{parentName:"tr",align:null},"center longitude"),(0,i.kt)("td",{parentName:"tr",align:null},"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"123"),(0,i.kt)("td",{parentName:"tr",align:null},"center latitude"),(0,i.kt)("td",{parentName:"tr",align:null},"4")))),(0,i.kt)("h3",{id:"notes"},"Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"# of addressed tiles"),": the total number of tiles before run-length encoding, i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},"Sum(RunLength)")," over all entries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"# of tile entries"),": the total number of entries across all directories where ",(0,i.kt)("inlineCode",{parentName:"li"},"RunLength > 0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"# # of tile contents"),": the number of referenced blobs in the tile section, or the unique # of offsets. If the archive is completely deduplicated, this is equal to the # of unique tile contents. If there is no deduplication, this is equal to the number of tile entries above."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"boolean clustered flag"),": if true, blobs in the data section are ordered by Hilbert ",(0,i.kt)("inlineCode",{parentName:"li"},"TileId"),". When writing with deduplication, this means that offsets are either contiguous with the previous offset+length, or refer to a lesser offset."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"compression enum"),": Mandatory, tells the client how to decompress contents as well as provide correct ",(0,i.kt)("inlineCode",{parentName:"li"},"Content-Encoding")," headers to browsers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"tile type"),": A hint as to the tile contents. Clients and proxies may use this to:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Automatically determine a visualization method"),(0,i.kt)("li",{parentName:"ul"},"provide a conventional MIME type ",(0,i.kt)("inlineCode",{parentName:"li"},"Content-Type")," HTTP header"),(0,i.kt)("li",{parentName:"ul"},"Enforce a canonical extension e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},".mvt"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"png"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"jpeg"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".webp")," to prevent duplication in caches")))),(0,i.kt)("h3",{id:"organization"},"Organization"),(0,i.kt)("p",null,"In most cases, the archive should be in the order ",(0,i.kt)("inlineCode",{parentName:"p"},"Header"),", Root Directory, JSON Metadata, Leaf Directories, Tile Data. It is possible to relocate sections other than ",(0,i.kt)("inlineCode",{parentName:"p"},"Header")," arbitrarily, but no current writers/readers take advantage of this. A future design may allow for reverse-ordered archives to enable single-pass writing."),(0,i.kt)("h2",{id:"version-2"},"Version 2"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: this is deprecated in favor of spec version 3.")),(0,i.kt)("p",null,"PMTiles is a binary serialization format designed for two main access patterns: over the network, via HTTP 1.1 Byte Serving (",(0,i.kt)("inlineCode",{parentName:"p"},"Range:")," requests), or via memory-mapped files on disk. ",(0,i.kt)("strong",{parentName:"p"},"All integer values are little-endian.")),(0,i.kt)("p",null,"A PMTiles archive is composed of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a fixed-size 512,000 byte header section"),(0,i.kt)("li",{parentName:"ul"},"Followed by any number of tiles in arbitrary format"),(0,i.kt)("li",{parentName:"ul"},"Optionally followed by any number of ",(0,i.kt)("em",{parentName:"li"},"leaf directories"))),(0,i.kt)("h3",{id:"header"},"Header"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'The header begins with a 2-byte magic number, "PM"'),(0,i.kt)("li",{parentName:"ul"},"Followed by 2 bytes, the PMTiles specification version (currently 2)."),(0,i.kt)("li",{parentName:"ul"},"Followed by 4 bytes, the length of metadata (M bytes)"),(0,i.kt)("li",{parentName:"ul"},"Followed by 2 bytes, the number of entries in the ",(0,i.kt)("em",{parentName:"li"},"root directory")," (N entries)"),(0,i.kt)("li",{parentName:"ul"},"Followed by M bytes of metadata, which ",(0,i.kt)("strong",{parentName:"li"},"must be a JSON string with bounds, minzoom and maxzoom properties (new in v2)")),(0,i.kt)("li",{parentName:"ul"},"Followed by N * 17 bytes, the root directory.")),(0,i.kt)("h3",{id:"directory-structure"},"Directory structure"),(0,i.kt)("p",null,"A directory is a contiguous sequence of 17 byte entries. A directory can have at most 21,845 entries. ",(0,i.kt)("strong",{parentName:"p"},"A directory must be sorted by Z, X and then Y order (new in v2).")),(0,i.kt)("p",null,"An entry consists of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 byte: the zoom level (Z) of the entry, with the top bit set to 1 instead of 0 to indicate the offset/length points to a leaf directory and not a tile."),(0,i.kt)("li",{parentName:"ul"},"3 bytes: the X (column) of the entry."),(0,i.kt)("li",{parentName:"ul"},"3 bytes: the Y (row) of the entry."),(0,i.kt)("li",{parentName:"ul"},"6 bytes: the offset of where the tile begins in the archive."),(0,i.kt)("li",{parentName:"ul"},"4 bytes: the length of the tile, in bytes.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"All leaf directory entries follow non-leaf entries. All leaf directories in a single directory must have the same Z value. (new in v2).")),(0,i.kt)("h3",{id:"notes-1"},"Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A full directory of 21,845 entries holds exactly a complete pyramid with 8 levels, or 1+4+16+64+256+1024+4096+16384."),(0,i.kt)("li",{parentName:"ul"},"A PMTiles archive with less than 21,845 tiles should have a root directory and no leaf directories."),(0,i.kt)("li",{parentName:"ul"},'Multiple tile entries can point to the same offset; this is useful for de-duplicating certain tiles, such as an empty "ocean" tile.'),(0,i.kt)("li",{parentName:"ul"},"Analogously, multiple leaf directory entries can point to the same offset; this can avoid inefficiently-packed small leaf directories."),(0,i.kt)("li",{parentName:"ul"},"The tentative media type for PMTiles archives is ",(0,i.kt)("inlineCode",{parentName:"li"},"application/vnd.pmtiles"),".")),(0,i.kt)("h3",{id:"implementation-suggestions"},"Implementation suggestions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PMTiles is designed to make implementing a writer simple. Reserve 512KB, then write all tiles, recording their entry information; then write all leaf directories; finally, rewind to 0 and write the header."),(0,i.kt)("li",{parentName:"ul"},"The order of tile data in the archive is unspecified; an optimized implementation should arrange tiles on a 2D space-filling curve."),(0,i.kt)("li",{parentName:"ul"},"PMTiles readers should cache directory entries by byte offset, not by Z/X/Y. This means that deduplicated leaf directories result in cache hits.")))}u.isMDXComponent=!0}}]);