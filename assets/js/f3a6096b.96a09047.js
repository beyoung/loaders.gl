"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7098],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,f=c["".concat(d,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},50893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const o={},l="NDJSONLoader",i={unversionedId:"modules/json/api-reference/ndjson-loader",id:"modules/json/api-reference/ndjson-loader",title:"NDJSONLoader",description:"Streaming loader for NDJSON encoded files and related formats (LDJSON and JSONL).",source:"@site/../docs/modules/json/api-reference/ndjson-loader.md",sourceDirName:"modules/json/api-reference",slug:"/modules/json/api-reference/ndjson-loader",permalink:"/docs/modules/json/api-reference/ndjson-loader",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/json/api-reference/ndjson-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JSONLoader",permalink:"/docs/modules/json/api-reference/json-loader"},next:{title:"GeoJSONLoader",permalink:"/docs/modules/json/api-reference/geojson-loader"}},d={},s=[{value:"Usage",id:"usage",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Options",id:"options",level:2}],p={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ndjsonloader"},"NDJSONLoader"),(0,r.kt)("p",null,"Streaming loader for NDJSON encoded files and related formats (LDJSON and JSONL)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Loader"),(0,r.kt)("th",{parentName:"tr",align:null},"Characteristic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},".ndjson"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".jsonl"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".ldjson"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Media Type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/x-ndjson"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"application/x-ldjson"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"application/json-seq"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Type"),(0,r.kt)("td",{parentName:"tr",align:null},"Text")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"http://ndjson.org/"},"NDJSON"),", ","[LDJSON][format_]",", ","[][format_]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Data Format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/specifications/category-table"},"Classic Table"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Supported APIs"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"load"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parse"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parseSync"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parseInBatches"))))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {NDJSONLoader} from '@loaders.gl/json';\nimport {load} from '@loaders.gl/core';\n\nconst data = await load(url, NDJSONLoader, {ndjson: options});\n")),(0,r.kt)("p",null,'The NDJSONLoader supports streaming NDJSON parsing, in which case it will yield "batches" of rows, where each row is a parsed line from the NDJSON stream.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {NDJSONLoader} from '@loaders.gl/json';\nimport {loadInBatches} from '@loaders.gl/core';\n\nconst batches = await loadInBatches('ndjson.ndjson', NDJSONLoader);\n\nfor await (const batch of batches) {\n  // batch.data will contain a number of rows\n  for (const obj of batch.data) {\n    // Process obj\n    ...\n  }\n}\n")),(0,r.kt)("h2",{id:"data-format"},"Data Format"),(0,r.kt)("p",null,"Parsed batches are of the format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  // standard batch payload\n  data: any[] | any;\n  bytesUsed: number;\n  batchCount: number;\n}\n")),(0,r.kt)("p",null,"Each element in the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," array corresponds to a line (Object) in the NDJSON data."),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"Supports the table category options such as ",(0,r.kt)("inlineCode",{parentName:"p"},"batchSize"),"."))}m.isMDXComponent=!0}}]);