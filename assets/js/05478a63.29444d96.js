"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2808],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),s=p(n),c=r,f=s["".concat(d,".").concat(c)]||s[c]||u[c]||o;return n?a.createElement(f,l(l({ref:t},m),{},{components:n})):a.createElement(f,l({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[s]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},10238:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},l="MVTLoader",i={unversionedId:"modules/mvt/api-reference/mvt-loader",id:"modules/mvt/api-reference/mvt-loader",title:"MVTLoader",description:"Loader for the Mapbox Vector Tile format for representation of geometry.",source:"@site/../docs/modules/mvt/api-reference/mvt-loader.md",sourceDirName:"modules/mvt/api-reference",slug:"/modules/mvt/api-reference/mvt-loader",permalink:"/docs/modules/mvt/api-reference/mvt-loader",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/mvt/api-reference/mvt-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LASLoader",permalink:"/docs/modules/las/api-reference/las-loader"},next:{title:"OBJLoader",permalink:"/docs/modules/obj/api-reference/obj-loader"}},d={},p=[{value:"Usage",id:"usage",level:2},{value:"Outputs",id:"outputs",level:2},{value:"GeoJSON",id:"geojson",level:3},{value:"GeoJSON with local coordinates",id:"geojson-with-local-coordinates",level:3},{value:"Options",id:"options",level:2},{value:"Attribution",id:"attribution",level:2}],m={toc:p},s="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mvtloader"},"MVTLoader"),(0,r.kt)("p",null,"Loader for the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/vector-tiles/specification/"},"Mapbox Vector Tile")," format for representation of geometry."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Loader"),(0,r.kt)("th",{parentName:"tr",align:null},"Characteristic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},".mvt"),",")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Type"),(0,r.kt)("td",{parentName:"tr",align:null},"Binary")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.mapbox.com/vector-tiles/specification/"},"Mapbox Vector Tile"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Data Format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/specifications/category-gis"},"Geometry"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Supported APIs"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"load"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parse"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parseSync"))))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MVTLoader} from '@loaders.gl/mvt';\nimport {load} from '@loaders.gl/core';\n\n// GeoJSON objects containing local coordinates decoded from tile origin to a range of [0 - (bufferSize / tileExtent), 1 + (bufferSize / tileExtent)]\nconst geometryData = await load(url, MVTLoader);\n\n// Array containing GeoJSON Features\nconst loaderOptions = {\n  mvt: {\n    coordinates: 'wgs84',\n    tileIndex: {\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  }\n};\n\nconst geoJSONfeatures = await load(url, MVTLoader, loaderOptions);\n")),(0,r.kt)("h2",{id:"outputs"},"Outputs"),(0,r.kt)("h3",{id:"geojson"},"GeoJSON"),(0,r.kt)("p",null,"The parser will return an array of ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7946"},"GeoJSON objects")," with WGS84 coordinates and feature properties from MVT if ",(0,r.kt)("inlineCode",{parentName:"p"},"coordinates")," property is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"wgs84")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tileIndex")," properties are present."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MVTLoader} from '@loaders.gl/mvt';\nimport {load} from '@loaders.gl/core';\n\nconst loaderOptions = {\n  mvt: {\n    coordinates: 'wgs84',\n    tileIndex: {\n      x: xTileIndex,\n      y: yTileIndex,\n      z: zTileIndex\n    }\n  }\n};\n\nconst geoJSONfeatures = await load(url, MVTLoader, loaderOptions);\n")),(0,r.kt)("h3",{id:"geojson-with-local-coordinates"},"GeoJSON with local coordinates"),(0,r.kt)("p",null,"The parser will return an array of GeoJSON objects with local coordinates in a range from 0 to 1 and feature properties from MVT by default."),(0,r.kt)("p",null,"Even though tile coordinates go from 0 to 1, there can be some negative (or greater than one) coordinates because of buffer cells within MVT to handle geometry clipping. That difference can be as much as ",(0,r.kt)("inlineCode",{parentName:"p"},"bufferSize / tileExtent")," depending on MVT creation parameters."),(0,r.kt)("p",null,"Note that local coordinates are relative to tile origin, which is in the top left."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MVTLoader} from '@loaders.gl/mvt';\nimport {load} from '@loaders.gl/core';\n\n/*\n * Default loader options are:\n *\n * {\n *   mvt: {\n *     coordinates: 'local'\n *   }\n * }\n */\n\nconst geoJSONfeatures = await load(url, MVTLoader);\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gis.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"When set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the parser will output the data in binary format. This is equivalent to loading the data as GeoJSON and then applying ",(0,r.kt)("a",{parentName:"td",href:"/docs/modules/gis/api-reference/geojson-to-binary"},"geojsonToBinary"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mvt.coordinates"),(0,r.kt)("td",{parentName:"tr",align:null},"`'local'"),(0,r.kt)("td",{parentName:"tr",align:null},"'wgs84'`"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"local"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mvt.layerProperty"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"layerName")),(0,r.kt)("td",{parentName:"tr",align:null},"When non-",(0,r.kt)("inlineCode",{parentName:"td"},"null"),", the layer name of each feature is added to ",(0,r.kt)("inlineCode",{parentName:"td"},"feature.properties[layerProperty]"),". (A ",(0,r.kt)("inlineCode",{parentName:"td"},"feature.properties")," object is created if the feature has no existing properties). If set to ",(0,r.kt)("inlineCode",{parentName:"td"},"null"),", a layer name property will not be added.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mvt.layers"),(0,r.kt)("td",{parentName:"tr",align:null},"String[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional list of layer names. If not ",(0,r.kt)("inlineCode",{parentName:"td"},"null"),", only features belonging to the named layers will be included in the output. If ",(0,r.kt)("inlineCode",{parentName:"td"},"null"),", features from all layers are returned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mvt.tileIndex"),(0,r.kt)("td",{parentName:"tr",align:null},"Object (",(0,r.kt)("inlineCode",{parentName:"td"},"{x: number, y: number, z: number}"),")"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Mandatory with ",(0,r.kt)("inlineCode",{parentName:"td"},"wgs84")," coordinates option. An object containing tile index values (",(0,r.kt)("inlineCode",{parentName:"td"},"x"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"y"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"z"),") to reproject features' coordinates into WGS84.")))),(0,r.kt)("p",null,"If you want to know more about how geometries are encoded into MVT tiles, please read ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/vector-tiles/specification/#encoding-geometry"},"this documentation section"),"."),(0,r.kt)("h2",{id:"attribution"},"Attribution"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"MVTLoader")," uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mapbox/vector-tile-js"},(0,r.kt)("inlineCode",{parentName:"a"},"@mapbox/vector-tile"))," module under the BSD-3-Clause."))}u.isMDXComponent=!0}}]);