"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9530],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(a),f=n,d=m["".concat(s,".").concat(f)]||m[f]||c[f]||l;return a?r.createElement(d,o(o({ref:t},u),{},{components:a})):r.createElement(d,o({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:n,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},4142:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const l={},o="TileJSON / Tilestats",i={unversionedId:"modules/mvt/formats/tilejson",id:"modules/mvt/formats/tilejson",title:"TileJSON / Tilestats",description:"- TileJSON specification",source:"@site/../docs/modules/mvt/formats/tilejson.md",sourceDirName:"modules/mvt/formats",slug:"/modules/mvt/formats/tilejson",permalink:"/docs/modules/mvt/formats/tilejson",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/mvt/formats/tilejson.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mapbox Vector Tile",permalink:"/docs/modules/mvt/formats/mvt"},next:{title:"Parquet",permalink:"/docs/modules/parquet/formats/parquet"}},s={},p=[{value:"TileJSON",id:"tilejson",level:2},{value:"Tilestats",id:"tilestats",level:2},{value:"Fields",id:"fields",level:2}],u={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"tilejson--tilestats"},"TileJSON / Tilestats"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("a",{parentName:"em",href:"https://github.com/mapbox/tilejson-spec/blob/master/3.0.0/README.md"},"TileJSON specification"))),(0,n.kt)("li",{parentName:"ul"},"*",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mapbox/mapbox-geostats"},"Tilestats information")),(0,n.kt)("li",{parentName:"ul"},"*",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mapbox/mapbox-geostats#output-the-stats"},"Tilestats generation"))),(0,n.kt)("h2",{id:"tilejson"},"TileJSON"),(0,n.kt)("p",null,"Metadata about a tileset. "),(0,n.kt)("p",null,"for representing metadata about multiple types of web-based map layers, to aid clients in configuration and browsing."),(0,n.kt)("p",null,"As the name suggests, TileJSON is JSON encoded."),(0,n.kt)("h2",{id:"tilestats"},"Tilestats"),(0,n.kt)("p",null,'Tilestats is a valuable inofficial "extension" to TileJSON. It provides column statistics, notably:'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the data type of each column"),(0,n.kt)("li",{parentName:"ul"},"min/max values for numeric columns (enabling e.g. global color scale calculations)."),(0,n.kt)("li",{parentName:"ul"},"a sample of values for each column")),(0,n.kt)("p",null,"Tilestats are not always available so applications must be prepared to work in their absence.\nHowever, tilestats is output by major tilers such as ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mapbox/mapbox-geostats#output-the-stats"},"tippecanoe"),"."),(0,n.kt)("h2",{id:"fields"},"Fields"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Data"),(0,n.kt)("th",{parentName:"tr",align:null},"TileJSON"),(0,n.kt)("th",{parentName:"tr",align:null},"tilestats"),(0,n.kt)("th",{parentName:"tr",align:null},"Description")))),(0,n.kt)("p",null,"|"))}c.isMDXComponent=!0}}]);