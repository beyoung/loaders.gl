"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3039],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),u=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=u(n),y=a,h=p["".concat(d,".").concat(y)]||p[y]||c[y]||l;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=y;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},70592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const l={},i="Vector",o={unversionedId:"arrowjs/api-reference/vector",id:"arrowjs/api-reference/vector",title:"Vector",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/vector.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/vector",permalink:"/docs/arrowjs/api-reference/vector",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/vector.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Types",permalink:"/docs/arrowjs/api-reference/types"},next:{title:"Types and Vectors",permalink:"/docs/arrowjs/api-reference/vectors"}},d={},u=[{value:"Inheritance",id:"inheritance",level:2},{value:"Fields",id:"fields",level:2},{value:"data: <code>Data&lt;T&gt;</code> (readonly)",id:"data-datat-readonly",level:3},{value:"numChildren: number (readonly)",id:"numchildren-number-readonly",level:3},{value:"type : T",id:"type--t",level:3},{value:"typeId : T'typeId'",id:"typeid--ttypeid",level:3},{value:"length : number",id:"length--number",level:3},{value:"offset : number",id:"offset--number",level:3},{value:"stride : number",id:"stride--number",level:3},{value:"nullCount : Number",id:"nullcount--number",level:3},{value:"VectorName : String",id:"vectorname--string",level:3},{value:"ArrayType : TypedArrayConstructor | ArrayConstructor",id:"arraytype--typedarrayconstructor--arrayconstructor",level:3},{value:"values : T'TArray'",id:"values--ttarray",level:3},{value:"typeIds : Int8Array | null",id:"typeids--int8array--null",level:3},{value:"nullBitmap : Uint8Array | null",id:"nullbitmap--uint8array--null",level:3},{value:"valueOffsets : Int32Array | null",id:"valueoffsets--int32array--null",level:3},{value:"Methods",id:"methods",level:2},{value:"clone(data: <code>Data&lt;R&gt;</code>, children): <code>Vector&lt;R&gt;</code>",id:"clonedata-datar-children-vectorr",level:3},{value:"concat(...others: <code>Vector&lt;T&gt;[]</code>)",id:"concatothers-vectort",level:3},{value:"slice(begin?: number, end?: number)",id:"slicebegin-number-end-number",level:3},{value:"isValid(index: number): boolean",id:"isvalidindex-number-boolean",level:3},{value:"getChildAt<code>&lt;R extends DataType = any&gt;</code>(index: number): <code>Vector&lt;R&gt;</code> | null",id:"getchildatr-extends-datatype--anyindex-number-vectorr--null",level:3},{value:"toJSON(): any",id:"tojson-any",level:3}],s={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"vector"},"Vector"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.")),(0,a.kt)("p",null,"Also referred to as ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseVector"),". An abstract base class for vector types."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Can support a null map"),(0,a.kt)("li",{parentName:"ul"},"..."),(0,a.kt)("li",{parentName:"ul"},"TBD")),(0,a.kt)("h2",{id:"inheritance"},"Inheritance"),(0,a.kt)("h2",{id:"fields"},"Fields"),(0,a.kt)("h3",{id:"data-datat-readonly"},"data: ",(0,a.kt)("inlineCode",{parentName:"h3"},"Data<T>")," (readonly)"),(0,a.kt)("p",null,"The underlying Data instance for this Vector."),(0,a.kt)("h3",{id:"numchildren-number-readonly"},"numChildren: number (readonly)"),(0,a.kt)("p",null,"The number of logical Vector children. Only applicable if the DataType of the Vector is one of the nested types (List, FixedSizeList, Struct, or Map)."),(0,a.kt)("h3",{id:"type--t"},"type : T"),(0,a.kt)("p",null,"The DataType that describes the elements in the Vector"),(0,a.kt)("h3",{id:"typeid--ttypeid"},"typeId : T","['typeId']"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"typeId")," enum value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," instance"),(0,a.kt)("h3",{id:"length--number"},"length : number"),(0,a.kt)("p",null,"Number of elements in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Vector")),(0,a.kt)("h3",{id:"offset--number"},"offset : number"),(0,a.kt)("p",null,"Offset to the first element in the underlying data."),(0,a.kt)("h3",{id:"stride--number"},"stride : number"),(0,a.kt)("p",null,"Stride between successive elements in the the underlying data."),(0,a.kt)("p",null,"The number of elements in the underlying data buffer that constitute a single logical value for the given type. The stride for all DataTypes is 1 unless noted here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("inlineCode",{parentName:"li"},"Decimal")," types, the stride is 4."),(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("inlineCode",{parentName:"li"},"Date")," types, the stride is 1 if the ",(0,a.kt)("inlineCode",{parentName:"li"},"unit")," is DateUnit.DAY, else 2."),(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("inlineCode",{parentName:"li"},"Int"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Interval"),", or ",(0,a.kt)("inlineCode",{parentName:"li"},"Time")," types, the stride is 1 if ",(0,a.kt)("inlineCode",{parentName:"li"},"bitWidth <= 32"),", else 2."),(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("inlineCode",{parentName:"li"},"FixedSizeList")," types, the stride is the ",(0,a.kt)("inlineCode",{parentName:"li"},"listSize")," property of the ",(0,a.kt)("inlineCode",{parentName:"li"},"FixedSizeList")," instance."),(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("inlineCode",{parentName:"li"},"FixedSizeBinary")," types, the stride is the ",(0,a.kt)("inlineCode",{parentName:"li"},"byteWidth")," property of the ",(0,a.kt)("inlineCode",{parentName:"li"},"FixedSizeBinary")," instance.")),(0,a.kt)("h3",{id:"nullcount--number"},"nullCount : Number"),(0,a.kt)("p",null,"Number of ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," values in this ",(0,a.kt)("inlineCode",{parentName:"p"},"Vector")," instance (",(0,a.kt)("inlineCode",{parentName:"p"},"null")," values require a null map to be present)."),(0,a.kt)("h3",{id:"vectorname--string"},"VectorName : String"),(0,a.kt)("p",null,"Returns the name of the Vector"),(0,a.kt)("h3",{id:"arraytype--typedarrayconstructor--arrayconstructor"},"ArrayType : TypedArrayConstructor | ArrayConstructor"),(0,a.kt)("p",null,"Returns the constructor of the underlying typed array for the values buffer as determined by this Vector's DataType."),(0,a.kt)("h3",{id:"values--ttarray"},"values : T","['TArray']"),(0,a.kt)("p",null,"Returns the underlying data buffer of the Vector, if applicable."),(0,a.kt)("h3",{id:"typeids--int8array--null"},"typeIds : Int8Array | null"),(0,a.kt)("p",null,"Returns the underlying typeIds buffer, if the Vector DataType is Union."),(0,a.kt)("h3",{id:"nullbitmap--uint8array--null"},"nullBitmap : Uint8Array | null"),(0,a.kt)("p",null,"Returns the underlying validity bitmap buffer, if applicable."),(0,a.kt)("p",null,"Note: Since the validity bitmap is a Uint8Array of bits, it is ",(0,a.kt)("em",{parentName:"p"},"not")," sliced when you call ",(0,a.kt)("inlineCode",{parentName:"p"},"vector.slice()"),". Instead, the ",(0,a.kt)("inlineCode",{parentName:"p"},"vector.offset")," property is updated on the returned Vector. Therefore, you must factor ",(0,a.kt)("inlineCode",{parentName:"p"},"vector.offset")," into the bit position if you wish to slice or read the null positions manually. See the implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseVector.isValid()")," for an example of how this is done."),(0,a.kt)("h3",{id:"valueoffsets--int32array--null"},"valueOffsets : Int32Array | null"),(0,a.kt)("p",null,"Returns the underlying valueOffsets buffer, if applicable. Only the List, Utf8, Binary, and DenseUnion DataTypes will have valueOffsets."),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"clonedata-datar-children-vectorr"},"clone(data: ",(0,a.kt)("inlineCode",{parentName:"h3"},"Data<R>"),", children): ",(0,a.kt)("inlineCode",{parentName:"h3"},"Vector<R>")),(0,a.kt)("p",null,"Returns a clone of the current Vector, using the supplied Data and optional children for the new clone. Does not copy any underlying buffers."),(0,a.kt)("h3",{id:"concatothers-vectort"},"concat(...others: ",(0,a.kt)("inlineCode",{parentName:"h3"},"Vector<T>[]"),")"),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Chunked")," vector that concatenates this Vector with the supplied other Vectors. Other Vectors must be the same type as this Vector."),(0,a.kt)("h3",{id:"slicebegin-number-end-number"},"slice(begin?: number, end?: number)"),(0,a.kt)("p",null,"Returns a zero-copy slice of this Vector. The begin and end arguments are handled the same way as JS' ",(0,a.kt)("inlineCode",{parentName:"p"},"Array.prototype.slice"),"; they are clamped between 0 and ",(0,a.kt)("inlineCode",{parentName:"p"},"vector.length")," and wrap around when negative, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"slice(-1, 5)")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"slice(5, -1)")),(0,a.kt)("h3",{id:"isvalidindex-number-boolean"},"isValid(index: number): boolean"),(0,a.kt)("p",null,"Returns whether the supplied index is valid in the underlying validity bitmap."),(0,a.kt)("h3",{id:"getchildatr-extends-datatype--anyindex-number-vectorr--null"},"getChildAt",(0,a.kt)("inlineCode",{parentName:"h3"},"<R extends DataType = any>"),"(index: number): ",(0,a.kt)("inlineCode",{parentName:"h3"},"Vector<R>")," | null"),(0,a.kt)("p",null,"Returns the inner Vector child if the DataType is one of the nested types (Map or Struct)."),(0,a.kt)("h3",{id:"tojson-any"},"toJSON(): any"),(0,a.kt)("p",null,"Returns a dense JS Array of the Vector values, with null sentinels in-place."))}c.isMDXComponent=!0}}]);