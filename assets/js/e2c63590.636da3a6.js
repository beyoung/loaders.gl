"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4213],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>u});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=n,u=p["".concat(c,".").concat(m)]||p[m]||h[m]||i;return r?a.createElement(u,o(o({ref:t},d),{},{components:r})):a.createElement(u,o({ref:t},d))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4349:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=r(87462),n=(r(67294),r(3905));const i={},o=void 0,l={unversionedId:"arrowjs/api-reference/record-batch-writer",id:"arrowjs/api-reference/record-batch-writer",title:"record-batch-writer",description:"RecordBatchWriter",source:"@site/../docs/arrowjs/api-reference/record-batch-writer.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/record-batch-writer",permalink:"/docs/arrowjs/api-reference/record-batch-writer",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/record-batch-writer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RecordBatchReader",permalink:"/docs/arrowjs/api-reference/record-batch-reader"},next:{title:"RecordBatch",permalink:"/docs/arrowjs/api-reference/record-batch"}},c={},s=[{value:"RecordBatchWriter",id:"recordbatchwriter",level:2},{value:"Member Fields",id:"member-fields",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>RecordBatchWriter.throughNode(options?: Object): DuplexStream</code>",id:"recordbatchwriterthroughnodeoptions-object-duplexstream",level:3},{value:"RecordBatchWriter.throughDOM(writableStrategy? : Object, readableStrategy? : Object) : Object",id:"recordbatchwriterthroughdomwritablestrategy--object-readablestrategy--object--object",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>toString(sync: Boolean): string | Promise&lt;string&gt;</code>",id:"tostringsync-boolean-string--promisestring",level:3},{value:"<code>toUint8Array(sync: Boolean): Uint8Array | Promise&lt;Uint8Array&gt;</code>",id:"touint8arraysync-boolean-uint8array--promiseuint8array",level:3},{value:"<code>writeAll(input: Table | Iterable&lt;RecordBatch&gt;): this</code>",id:"writeallinput-table--iterablerecordbatch-this",level:3},{value:"<code>writeAll(input: AsyncIterable&lt;RecordBatch&gt;</code>): <code>Promise&lt;this&gt;</code>",id:"writeallinput-asynciterablerecordbatch-promisethis",level:3},{value:"<code>writeAll(input: PromiseLike&lt;AsyncIterable&lt;RecordBatch&gt;&gt;): Promise&lt;this&gt;</code>",id:"writeallinput-promiselikeasynciterablerecordbatch-promisethis",level:3},{value:"<code>writeAll(input: PromiseLike&lt;Table | Iterable&lt;RecordBatch&gt;&gt;): Promise&lt;this&gt;</code>",id:"writeallinput-promiseliketable--iterablerecordbatch-promisethis",level:3},{value:"<code>toDOMStream(options?: Object): ReadableStream&lt;Uint8Array&gt;</code>",id:"todomstreamoptions-object-readablestreamuint8array",level:3},{value:"<code>toNodeStream(options?: Object): Readable</code>",id:"tonodestreamoptions-object-readable",level:3},{value:"<code>close() : void</code>",id:"close--void",level:3},{value:"<code>abort(reason?: any) : void</code>",id:"abortreason-any--void",level:3},{value:"<code>finish() : this</code>",id:"finish--this",level:3},{value:"<code>reset(sink?: WritableSink&lt;ArrayBufferViewInput&gt;, schema?: Schema | null): this</code>",id:"resetsink-writablesinkarraybufferviewinput-schema-schema--null-this",level:3},{value:"<code>write(payload?: Table | RecordBatch | Iterable&lt;Table&gt; | Iterable&lt;RecordBatch&gt; | null): void</code>",id:"writepayload-table--recordbatch--iterabletable--iterablerecordbatch--null-void",level:3},{value:"Remarks",id:"remarks",level:2}],d={toc:s},p="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"recordbatchwriter"},"RecordBatchWriter"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"RecordBatchWriter"),' "serializes" Arrow Tables (or streams of RecordBatches) to the Arrow File, Stream, or JSON representations for inter-process communication (see also: ',(0,n.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/IPC.html#streaming-format"},"Arrow IPC format docs"),")."),(0,n.kt)("p",null,'The RecordBatchWriter is conceptually a "transform" stream that transforms Tables or RecordBatches into binary ',(0,n.kt)("inlineCode",{parentName:"p"},"Uint8Array")," chunks that represent the Arrow IPC messages (",(0,n.kt)("inlineCode",{parentName:"p"},"Schema"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"DictionaryBatch"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"RecordBatch"),", and in the case of the File format, ",(0,n.kt)("inlineCode",{parentName:"p"},"Footer")," messages)."),(0,n.kt)("p",null,"These binary chunks are buffered inside the ",(0,n.kt)("inlineCode",{parentName:"p"},"RecordBatchWriter")," instance until they are consumed, typically by piping the RecordBatchWriter instance to a Writable Stream (like a file or socket), enumerating the chunks via async-iteration, or by calling ",(0,n.kt)("inlineCode",{parentName:"p"},"toUint8Array()")," to create a single contiguous buffer of the concatenated results once the desired Tables or RecordBatches have been written."),(0,n.kt)("p",null,"RecordBatchWriter conforms to the ",(0,n.kt)("inlineCode",{parentName:"p"},"AsyncIterableIterator")," protocol in all environments, and supports two additional stream primitives based on the environment (nodejs or browsers) available at runtime."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"In nodejs, the ",(0,n.kt)("inlineCode",{parentName:"li"},"RecordBatchWriter")," can be converted to a ",(0,n.kt)("inlineCode",{parentName:"li"},"ReadableStream"),", piped to a ",(0,n.kt)("inlineCode",{parentName:"li"},"WritableStream"),", and has a static method that returns a ",(0,n.kt)("inlineCode",{parentName:"li"},"TransformStream")," suitable in chained ",(0,n.kt)("inlineCode",{parentName:"li"},"pipe")," calls."),(0,n.kt)("li",{parentName:"ul"},"browser environments that support the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/whatwg/streams"},"DOM/WhatWG Streams Standard"),", corresponding methods exist to convert ",(0,n.kt)("inlineCode",{parentName:"li"},"RecordBatchWriters")," to the DOM ",(0,n.kt)("inlineCode",{parentName:"li"},"ReadableStream"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"WritableStream"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"TransformStream")," variants.")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Note"),": The Arrow JSON representation is not suitable as an IPC mechanism in real-world scenarios. It is used inside the Arrow project as a human-readable debugging tool and for validating interoperability between each language's separate implementation of the Arrow library."),(0,n.kt)("h2",{id:"member-fields"},"Member Fields"),(0,n.kt)("p",null,"closed: Promise (readonly)"),(0,n.kt)("p",null,"A Promise which resolves when this ",(0,n.kt)("inlineCode",{parentName:"p"},"RecordBatchWriter")," is closed."),(0,n.kt)("h2",{id:"static-methods"},"Static Methods"),(0,n.kt)("h3",{id:"recordbatchwriterthroughnodeoptions-object-duplexstream"},(0,n.kt)("inlineCode",{parentName:"h3"},"RecordBatchWriter.throughNode(options?: Object): DuplexStream")),(0,n.kt)("p",null,"Creates a Node.js ",(0,n.kt)("inlineCode",{parentName:"p"},"TransformStream")," that transforms an input ",(0,n.kt)("inlineCode",{parentName:"p"},"ReadableStream")," of Tables or RecordBatches into a stream of ",(0,n.kt)("inlineCode",{parentName:"p"},"Uint8Array")," Arrow Message chunks."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options.autoDestroy"),": boolean - (default: ",(0,n.kt)("inlineCode",{parentName:"li"},"true"),") Indicates whether the RecordBatchWriter should close after writing the first logical stream of RecordBatches (batches which all share the same Schema), or should continue and reset each time it encounters a new Schema."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options.*")," - Any Node Duplex stream options can be supplied")),(0,n.kt)("p",null,"Returns: A Node.js Duplex stream"),(0,n.kt)("p",null,"Example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst fs = require('fs');\nconst { PassThrough, finished } = require('stream');\nconst { Table, RecordBatchWriter } = require('apache-arrow');\n\nconst table = Table.new({\n    i32: Int32Vector.from([1, 2, 3]),\n    f32: Float32Vector.from([1.0, 1.5, 2.0]),\n});\n\nconst source = new PassThrough({ objectMode: true });\n\nconst result = source\n    .pipe(RecordBatchWriter.throughNode())\n    .pipe(fs.createWriteStream('table.arrow'));\n\nsource.write(table);\nsource.end();\n\nfinished(result, () => console.log('done writing table.arrow'));\n")),(0,n.kt)("h3",{id:"recordbatchwriterthroughdomwritablestrategy--object-readablestrategy--object--object"},"RecordBatchWriter.throughDOM(writableStrategy? : Object, readableStrategy? : Object) : Object"),(0,n.kt)("p",null,"Creates a DOM/WhatWG ",(0,n.kt)("inlineCode",{parentName:"p"},"ReadableStream"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"WritableStream")," pair that together transforms an input ",(0,n.kt)("inlineCode",{parentName:"p"},"ReadableStream")," of Tables or RecordBatches into a stream of ",(0,n.kt)("inlineCode",{parentName:"p"},"Uint8Array")," Arrow Message chunks."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options.autoDestroy"),": boolean - (default: ",(0,n.kt)("inlineCode",{parentName:"li"},"true"),") Indicates whether the RecordBatchWriter should close after writing the first logical stream of RecordBatches (batches which all share the same Schema), or should continue and reset each time it encounters a new Schema."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"writableStrategy.*"),"= - Any options for",(0,n.kt)("inlineCode",{parentName:"li"}," QueuingStrategy<RecordBatch>")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"readableStrategy.highWaterMark"),"? : Number"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"readableStrategy.size"),"?: Number")),(0,n.kt)("p",null,"Returns: an object with the following fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"writable"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"WritableStream<Table | RecordBatch>")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"readable"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"ReadableStream<Uint8Array>"))),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("p",null,"constructor(options? : Object)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options.autoDestroy"),": boolean -")),(0,n.kt)("h3",{id:"tostringsync-boolean-string--promisestring"},(0,n.kt)("inlineCode",{parentName:"h3"},"toString(sync: Boolean): string | Promise<string>")),(0,n.kt)("h3",{id:"touint8arraysync-boolean-uint8array--promiseuint8array"},(0,n.kt)("inlineCode",{parentName:"h3"},"toUint8Array(sync: Boolean): Uint8Array | Promise<Uint8Array>")),(0,n.kt)("h3",{id:"writeallinput-table--iterablerecordbatch-this"},(0,n.kt)("inlineCode",{parentName:"h3"},"writeAll(input: Table | Iterable<RecordBatch>): this")),(0,n.kt)("h3",{id:"writeallinput-asynciterablerecordbatch-promisethis"},(0,n.kt)("inlineCode",{parentName:"h3"},"writeAll(input: AsyncIterable<RecordBatch>"),"): ",(0,n.kt)("inlineCode",{parentName:"h3"},"Promise<this>")),(0,n.kt)("h3",{id:"writeallinput-promiselikeasynciterablerecordbatch-promisethis"},(0,n.kt)("inlineCode",{parentName:"h3"},"writeAll(input: PromiseLike<AsyncIterable<RecordBatch>>): Promise<this>")),(0,n.kt)("h3",{id:"writeallinput-promiseliketable--iterablerecordbatch-promisethis"},(0,n.kt)("inlineCode",{parentName:"h3"},"writeAll(input: PromiseLike<Table | Iterable<RecordBatch>>): Promise<this>")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"[Symbol.asyncIterator](): AsyncByteQueue<Uint8Array>"))),(0,n.kt)("p",null,"Returns An async iterator that produces Uint8Arrays."),(0,n.kt)("h3",{id:"todomstreamoptions-object-readablestreamuint8array"},(0,n.kt)("inlineCode",{parentName:"h3"},"toDOMStream(options?: Object): ReadableStream<Uint8Array>")),(0,n.kt)("p",null,"Returns a new DOM/WhatWG stream that can be used to read the Uint8Array chunks produced by the RecordBatchWriter"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options")," - passed through to the DOM ReadableStream constructor, any DOM ReadableStream options.")),(0,n.kt)("h3",{id:"tonodestreamoptions-object-readable"},(0,n.kt)("inlineCode",{parentName:"h3"},"toNodeStream(options?: Object): Readable")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options")," - passed through to the Node ReadableStream constructor, any Node ReadableStream options.")),(0,n.kt)("h3",{id:"close--void"},(0,n.kt)("inlineCode",{parentName:"h3"},"close() : void")),(0,n.kt)("p",null,"Close the RecordBatchWriter. After close is called, no more chunks can be written."),(0,n.kt)("h3",{id:"abortreason-any--void"},(0,n.kt)("inlineCode",{parentName:"h3"},"abort(reason?: any) : void")),(0,n.kt)("h3",{id:"finish--this"},(0,n.kt)("inlineCode",{parentName:"h3"},"finish() : this")),(0,n.kt)("h3",{id:"resetsink-writablesinkarraybufferviewinput-schema-schema--null-this"},(0,n.kt)("inlineCode",{parentName:"h3"},"reset(sink?: WritableSink<ArrayBufferViewInput>, schema?: Schema | null): this")),(0,n.kt)("p",null,"Change the sink"),(0,n.kt)("h3",{id:"writepayload-table--recordbatch--iterabletable--iterablerecordbatch--null-void"},(0,n.kt)("inlineCode",{parentName:"h3"},"write(payload?: Table | RecordBatch | Iterable<Table> | Iterable<RecordBatch> | null): void")),(0,n.kt)("p",null,"Writes a ",(0,n.kt)("inlineCode",{parentName:"p"},"RecordBatch")," or all the RecordBatches from a ",(0,n.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,n.kt)("h2",{id:"remarks"},"Remarks"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Just like the ",(0,n.kt)("inlineCode",{parentName:"li"},"RecordBatchReader"),", a ",(0,n.kt)("inlineCode",{parentName:"li"},"RecordBatchWriter")," is a factory base class that returns an instance of the subclass appropriate to the situation: ",(0,n.kt)("inlineCode",{parentName:"li"},"RecordBatchStreamWriter"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"RecordBatchFileWriter"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"RecordBatchJSONWriter"))))}h.isMDXComponent=!0}}]);