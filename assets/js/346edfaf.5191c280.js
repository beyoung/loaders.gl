"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8998],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>k});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var d=r.createContext({}),p=function(t){var e=r.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=p(t.components);return r.createElement(d.Provider,{value:e},t.children)},c="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,d=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),c=p(a),u=n,k=c["".concat(d,".").concat(u)]||c[u]||s[u]||l;return a?r.createElement(k,i(i({ref:e},m),{},{components:a})):r.createElement(k,i({ref:e},m))}));function k(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[c]="string"==typeof t?t:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},87983:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const l={},i="Apache Arrow JavaScript API Reference",o={unversionedId:"arrowjs/api-reference/README",id:"arrowjs/api-reference/README",title:"Apache Arrow JavaScript API Reference",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/README.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/",permalink:"/docs/arrowjs/api-reference/",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using with Typescript",permalink:"/docs/arrowjs/developer-guide/typescript"},next:{title:"Chunked",permalink:"/docs/arrowjs/api-reference/chunked"}},d={},p=[{value:"Class List",id:"class-list",level:2}],m={toc:p},c="wrapper";function s(t){let{components:e,...a}=t;return(0,n.kt)(c,(0,r.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"apache-arrow-javascript-api-reference"},"Apache Arrow JavaScript API Reference"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.")),(0,n.kt)("h2",{id:"class-list"},"Class List"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"TODO - This is a class list from the C++ docs, it has only been partially updated to match JS API")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Class"),(0,n.kt)("th",{parentName:"tr",align:null},"Summary"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Array")),(0,n.kt)("td",{parentName:"tr",align:null},"Array base type Immutable data array with some logical type and some length")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ArrayData")),(0,n.kt)("td",{parentName:"tr",align:null},"Mutable container for generic Arrow array data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"BinaryArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for variable-size binary data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"BooleanArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for boolean data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Buffer")),(0,n.kt)("td",{parentName:"tr",align:null},"Object containing a pointer to a piece of contiguous  memory with a particular size")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ChunkedArray")),(0,n.kt)("td",{parentName:"tr",align:null},"A data structure managing a list of primitive Arrow arrays logically as one large array")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Column")),(0,n.kt)("td",{parentName:"tr",align:null},"An immutable column data structure consisting of a field (type metadata) and a chunked data array")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Decimal128")),(0,n.kt)("td",{parentName:"tr",align:null},"Represents a signed 128-bit integer in two's  complement")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Decimal128Array")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for 128-bit decimal data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"DictionaryArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for dictionary data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Field")),(0,n.kt)("td",{parentName:"tr",align:null},"The combination of a field name and data type, with  optional metadata")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"FixedSizeBinaryArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for fixed-size  binary data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"FixedWidthType")),(0,n.kt)("td",{parentName:"tr",align:null},"Base class for all fixed-width data types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"FlatArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Base class for non-nested arrays")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"FloatingPoint")),(0,n.kt)("td",{parentName:"tr",align:null},"Base class for all floating-point data types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Int16Type")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete type class for signed 16-bit integer data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Int32Type")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete type class for signed 32-bit integer data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Int64Type")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete type class for signed 64-bit integer data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Int8Type")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete type class for signed 8-bit integer data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Integer")),(0,n.kt)("td",{parentName:"tr",align:null},"Base class for all integral data types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ListArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for list data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ListType")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete type class for list data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NestedType")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NullArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Degenerate null type Array")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NullType")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete type class for always-null data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Number")),(0,n.kt)("td",{parentName:"tr",align:null},"Base class for all numeric data types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"NumericArray")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"PrimitiveArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Base class for arrays of fixed-size logical  types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"RecordBatch")),(0,n.kt)("td",{parentName:"tr",align:null},"Collection of equal-length arrays matching a  particular Schema")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"RecordBatchReader")),(0,n.kt)("td",{parentName:"tr",align:null},"Abstract interface for reading stream of  record batches")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Schema")),(0,n.kt)("td",{parentName:"tr",align:null},"Sequence of arrow::Field objects describing the  columns of a record batch or table data structure")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Status")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"StringArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for variable-size string ( utf-8) data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"StructArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for struct data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Table")),(0,n.kt)("td",{parentName:"tr",align:null},"Logical table as sequence of chunked arrays")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TableBatchReader")),(0,n.kt)("td",{parentName:"tr",align:null},"Compute a sequence of record batches from a ( possibly chunked) Table")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TimeUnit")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"UnionArray")),(0,n.kt)("td",{parentName:"tr",align:null},"Concrete Array class for union data")))))}s.isMDXComponent=!0}}]);