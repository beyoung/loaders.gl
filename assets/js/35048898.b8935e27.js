"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5617],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},f=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),m=c(r),u=o,g=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return r?n.createElement(g,l(l({ref:t},f),{},{components:r})):n.createElement(g,l({ref:t},f))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},76590:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={},l="GLB - glTF Binary Format",i={unversionedId:"modules/gltf/formats/glb",id:"modules/gltf/formats/glb",title:"GLB - glTF Binary Format",description:"- @loaders.gl/gltf",source:"@site/../docs/modules/gltf/formats/glb.md",sourceDirName:"modules/gltf/formats",slug:"/modules/gltf/formats/glb",permalink:"/docs/modules/gltf/formats/glb",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/gltf/formats/glb.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GeoJSON Geometry",permalink:"/docs/modules/json/formats/geojson-geometry"},next:{title:"glTF - gl Transfer Format",permalink:"/docs/modules/gltf/formats/gltf"}},s={},c=[{value:"Version History",id:"version-history",level:2}],f={toc:c},m="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"glb---gltf-binary-format"},"GLB - glTF Binary Format"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("a",{parentName:"em",href:"/docs/modules/gltf"},(0,o.kt)("inlineCode",{parentName:"a"},"@loaders.gl/gltf")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("a",{parentName:"em",href:"https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#glb-file-format-specification"},"GLB specification"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("a",{parentName:"em",href:"https://en.wikipedia.org/wiki/GlTF#GLB"},"Wikipedia article")))),(0,o.kt)("p",null,"A GLB file (.glb), which stands for \u201cGL Transmission Format Binary file\u201d. contains a binary representation of a glTF scenegraph packaged into a single binary file."),(0,o.kt)("p",null,"The GLB file format is a binary form of glTF that includes textures instead of referencing them as external images. "),(0,o.kt)("h2",{id:"version-history"},"Version History"),(0,o.kt)("p",null,"GLB was introduced as an extension to glTF 1.0 "),(0,o.kt)("p",null,"GLB was incorporated directly into glTF 2.0."))}p.isMDXComponent=!0}}]);