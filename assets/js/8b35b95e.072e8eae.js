"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6533],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>b});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(a),c=n,b=m["".concat(s,".").concat(c)]||m[c]||u[c]||l;return a?r.createElement(b,o(o({ref:t},p),{},{components:a})):r.createElement(b,o({ref:t},p))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:n,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},12260:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var r=a(87462),n=(a(67294),a(3905));const l={},o="Table Loaders",i={unversionedId:"specifications/category-table",id:"specifications/category-table",title:"Table Loaders",description:"The table category loaders supports loading tables in row-based, columnar or batched columnar formats.",source:"@site/../docs/specifications/category-table.md",sourceDirName:"specifications",slug:"/specifications/category-table",permalink:"/docs/specifications/category-table",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/specifications/category-table.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JSON-style Loaders",permalink:"/docs/specifications/category-json"},next:{title:"Image Loaders",permalink:"/docs/specifications/category-image"}},s={},d=[{value:"Table Category Loaders",id:"table-category-loaders",level:2},{value:"Data Structure",id:"data-structure",level:2},{value:"Table Types",id:"table-types",level:2},{value:"Classic Tables (Row-Major)",id:"classic-tables-row-major",level:3},{value:"Columnar Tables (Column-Major)",id:"columnar-tables-column-major",level:3},{value:"Chunked Columnar Tables (DataFrames)",id:"chunked-columnar-tables-dataframes",level:3},{value:"Table Accessors",id:"table-accessors",level:2},{value:"Apache Arrow support",id:"apache-arrow-support",level:2},{value:"The Threading Issue",id:"the-threading-issue",level:3},{value:"Handling non-typed data",id:"handling-non-typed-data",level:3},{value:"Serialized table representation",id:"serialized-table-representation",level:2}],p={toc:d},m="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"table-loaders"},"Table Loaders"),(0,n.kt)("p",null,"The ",(0,n.kt)("em",{parentName:"p"},"table")," category loaders supports loading tables in ",(0,n.kt)("em",{parentName:"p"},"row-based"),", ",(0,n.kt)("em",{parentName:"p"},"columnar")," or ",(0,n.kt)("em",{parentName:"p"},"batched columnar")," formats."),(0,n.kt)("h2",{id:"table-category-loaders"},"Table Category Loaders"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Loader"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/modules/arrow/api-reference/arrow-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"ArrowLoader"))),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/modules/csv/api-reference/csv-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"CSVLoader"))),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/modules/json/api-reference/json-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"JSONLoader"))),(0,n.kt)("td",{parentName:"tr",align:null},"Set ",(0,n.kt)("inlineCode",{parentName:"td"},"options.json.table")," to ",(0,n.kt)("inlineCode",{parentName:"td"},"true"))))),(0,n.kt)("h2",{id:"data-structure"},"Data Structure"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Field"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Contents"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"shape")),(0,n.kt)("td",{parentName:"tr",align:null},"string union"),(0,n.kt)("td",{parentName:"tr",align:null},"One of the supported shape strings for tables")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"schema")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Object")),(0,n.kt)("td",{parentName:"tr",align:null},"Metadata of the table, maps name of each column to its type.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"data")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Object")," or ",(0,n.kt)("inlineCode",{parentName:"td"},"Array")),(0,n.kt)("td",{parentName:"tr",align:null},"Data of the table, see ",(0,n.kt)("a",{parentName:"td",href:"#table-types"},"table types"))))),(0,n.kt)("h2",{id:"table-types"},"Table Types"),(0,n.kt)("p",null,"loaders.gl deals with (and offers utilities to convert between) three different types of tables:"),(0,n.kt)("h3",{id:"classic-tables-row-major"},"Classic Tables (Row-Major)"),(0,n.kt)("p",null,"This is the classic JavaScript table. ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," consists of an ",(0,n.kt)("inlineCode",{parentName:"p"},"Array")," of ",(0,n.kt)("inlineCode",{parentName:"p"},"Object")," instances, each representing a row."),(0,n.kt)("h3",{id:"columnar-tables-column-major"},"Columnar Tables (Column-Major)"),(0,n.kt)("p",null,"Columnar tables are stored as one array per column. Columns that are numeric can be loaded as typed arrays which are stored in contigous memory. ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," is an ",(0,n.kt)("inlineCode",{parentName:"p"},"Object")," that maps column names to an array or typed array."),(0,n.kt)("p",null,"Contiguous memory has tremendous benefits:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Values are adjacent in memory, the resulting cache locality can result in big performance gains"),(0,n.kt)("li",{parentName:"ul"},"Typed arrays can of course be efficiently transferred from worker threads to main thread"),(0,n.kt)("li",{parentName:"ul"},"Can be directly uploaded to the GPU for further processing.")),(0,n.kt)("h3",{id:"chunked-columnar-tables-dataframes"},"Chunked Columnar Tables (DataFrames)"),(0,n.kt)("p",null,"A problem with columnar tables is that column arrays they can get very long, causing issues with streaming, memory allication etc. A powerful solution is to worked with chunked columnar tables, where columns is are broken into matching sequences of typed arrays."),(0,n.kt)("p",null,"The down-side is that complexity can increase quickly. Data Frames are optimized to minimize the amount of copying/moving/reallocation of data during common operations such e.g. loading and transformations, and support zero-cost filtering through smart iterators etc."),(0,n.kt)("p",null,"Using the Arrow API it is possible to work extremely efficiently with very large (multi-gigabyte) datasets."),(0,n.kt)("h2",{id:"table-accessors"},"Table Accessors"),(0,n.kt)("p",null,"loaders.gl provides a range of table accessors."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Accessor"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null}))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableLength"),"(table: Table): number"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns length (number of rows) in the table"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableNumCols"),"(table: Table): number"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns number of columns in the table"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableCell"),"(table: Table, rowIndex: number, columnName: string): unknown"),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the value in a cell by column name and row index"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableCellAt"),"(table: Table, rowIndex: number, columnIndex: number): unknown"),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the value of a cell by column index and row index"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableRowShape"),"(table: Table): 'array-row-table'"),(0,n.kt)("td",{parentName:"tr",align:null},"'object-row-table'"),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the shape of each table row")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableColumnIndex"),"(table: Table, columnName: string): number"),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the index of a named column"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableColumnName"),"(table: Table, columnIndex: number): string"),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the name of a column by index"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableRowAsObject"),"(table: Table, rowIndex: number, target?: unknown[], copy?: 'copy'):"),(0,n.kt)("td",{parentName:"tr",align:null},"Gets a row from the table. Parameters contol whether a new object is minted or reused."),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"getTableRowAsArray"),"(table: Table, rowIndex: number, target?: unknown[], copy?: 'copy'): unknown[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Gets a row from the table. Parameters contol whether a new array is minted or reused."),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"makeArrayRowTable"),"(table: Table): ArrayRowTable"),(0,n.kt)("td",{parentName:"tr",align:null},"Copies a table into 'array-row-table' format."),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"makeObjectRowTable"),"(table: Table): ObjectRowTable"),(0,n.kt)("td",{parentName:"tr",align:null},"Copies a table into 'object-row-table' format"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h2",{id:"apache-arrow-support"},"Apache Arrow support"),(0,n.kt)("p",null,"loaders.gl has built-in support for Apache Arrow as a preferred in-memory binary columnar format."),(0,n.kt)("h3",{id:"the-threading-issue"},"The Threading Issue"),(0,n.kt)("p",null,"The Apache Arrow API is quite powerful, however there is a key limitation in that the Arrow Table classes do not serialize and deserialize when sending tables between threads."),(0,n.kt)("p",null,"It is of course possible to work with the underlying IPC data structure."),(0,n.kt)("h3",{id:"handling-non-typed-data"},"Handling non-typed data"),(0,n.kt)("p",null,"A JavaScript table has the freedom that a column can contain any type."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const arrowTable = makeArrowTable(table).data;\n")),(0,n.kt)("h2",{id:"serialized-table-representation"},"Serialized table representation"),(0,n.kt)("p",null,"loaders.gl defines what is effectively a serialized representation of Apache Arrow schemas. These can be converted to Arrow tables with a simple transformation that is provided."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"import {makeTable} from 'apache-arrow';\n\nconst arrowTable = makeTable(...); // An arrow table\nconst table = serializeArrowTable(arrowTable); // A loaders.gl columnar table\nconst arrowTableCopy = deserializeArrowTable(table); // An arrow table\n\nconsole.log(arrowTable.compareTo(arrowTableCopy));\n")),(0,n.kt)("p",null,"Note: Currently the batch structure of a table is lost during serialization."))}u.isMDXComponent=!0}}]);