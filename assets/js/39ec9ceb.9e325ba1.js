"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2338],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),y=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=y(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=y(r),s=a,k=d["".concat(o,".").concat(s)]||d[s]||m[s]||l;return r?n.createElement(k,i(i({ref:t},u),{},{components:r})):n.createElement(k,i({ref:t},u))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:a,i[1]=p;for(var y=2;y<l;y++)i[y]=r[y];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},23121:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>y});var n=r(87462),a=(r(67294),r(3905));const l={},i="GLType",p={unversionedId:"modules/math/api-reference/gl-type",id:"modules/math/api-reference/gl-type",title:"GLType",description:"Helper functions to work with WebGL data type constants.",source:"@site/../docs/modules/math/api-reference/gl-type.md",sourceDirName:"modules/math/api-reference",slug:"/modules/math/api-reference/gl-type",permalink:"/docs/modules/math/api-reference/gl-type",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/math/api-reference/gl-type.md",tags:[],version:"current",frontMatter:{}},o={},y=[{value:"Usage",id:"usage",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"GLType.fromTypedArray(typedArray: Typed Array | Function) : string",id:"gltypefromtypedarraytypedarray-typed-array--function--string",level:3},{value:"GLType.fromName(name: String): number",id:"gltypefromnamename-string-number",level:3},{value:"GLType.getArrayType(glType: Number) : function",id:"gltypegetarraytypegltype-number--function",level:3},{value:"static GLType.getByteSize(glType: Number) : number",id:"static-gltypegetbytesizegltype-number--number",level:3},{value:"static GLType.validate(glType) : boolean",id:"static-gltypevalidategltype--boolean",level:3},{value:"static GLType.createTypedArray(glType : number, buffer : ArrayBuffer [, byteOffset : number , length : number]) : TypedArray",id:"static-gltypecreatetypedarraygltype--number-buffer--arraybuffer--byteoffset--number--length--number--typedarray",level:3}],u={toc:y},d="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gltype"},"GLType"),(0,a.kt)("p",null,"Helper functions to work with WebGL data type constants."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"WebGL type constant"),(0,a.kt)("th",{parentName:"tr",align:null},"JavaScript Typed Array"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.FLOAT")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Float32Array")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.DOUBLE")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,a.kt)("td",{parentName:"tr",align:null},"Not yet directly usable in WebGL/GLSL")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.UNSIGNED_SHORT")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Uint16Array")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.UNSIGNED_INT")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Uint32Array")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.UNSIGNED_BYTE")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.UNSIGNED_BYTE")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Uint8ClampedArray")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.BYTE")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Int8Array")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.SHORT")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Int16Array")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GL.INT")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Int32Array")),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {GL, GLType} from '@loaders.gl/math';\n// Returns Int8Array.BYTES_PER_ELEMENT\nvar size = GLType.getSizeInBytes(GL.BYTE);\n")),(0,a.kt)("h2",{id:"static-methods"},"Static Methods"),(0,a.kt)("h3",{id:"gltypefromtypedarraytypedarray-typed-array--function--string"},"GLType.fromTypedArray(typedArray: Typed Array | Function) : string"),(0,a.kt)("p",null,"Returns the size, in bytes, of the corresponding datatype."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"glType")," The component datatype to get the size of.")),(0,a.kt)("p",null,"Returns"),(0,a.kt)("p",null,"The size in bytes."),(0,a.kt)("p",null,"Throws"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"glType is not a valid value.")),(0,a.kt)("p",null,"Gets the {@link ComponentDatatype} for the provided TypedArray instance."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"array The typed array.")),(0,a.kt)("p",null,"Returns"),(0,a.kt)("p",null,"The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray."),(0,a.kt)("h3",{id:"gltypefromnamename-string-number"},"GLType.fromName(name: String): number"),(0,a.kt)("p",null,"Extracts name for glType from array NAME_TO_GL_TYPE"),(0,a.kt)("h3",{id:"gltypegetarraytypegltype-number--function"},"GLType.getArrayType(glType: Number) : function"),(0,a.kt)("p",null,"Returns the constructor of the array"),(0,a.kt)("h3",{id:"static-gltypegetbytesizegltype-number--number"},"static GLType.getByteSize(glType: Number) : number"),(0,a.kt)("p",null,"Returns the size in bytes of one element of the provided WebGL type."),(0,a.kt)("p",null,"Equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"GLType.getArrayType(glType).BYTES_PER_ELEMENT"),"."),(0,a.kt)("h3",{id:"static-gltypevalidategltype--boolean"},"static GLType.validate(glType) : boolean"),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"glType")," is a valid WebGL data type."),(0,a.kt)("h3",{id:"static-gltypecreatetypedarraygltype--number-buffer--arraybuffer--byteoffset--number--length--number--typedarray"},"static GLType.createTypedArray(glType : number, buffer : ArrayBuffer [, byteOffset : number ","[, length : number]","]) : TypedArray"),(0,a.kt)("p",null,"Creates a typed view of an array of bytes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"glType")," The type of typed array (ArrayBuffer view) to create."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"buffer")," The buffer storage to use for the view."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"byteOffset"),"=",(0,a.kt)("inlineCode",{parentName:"li"},"0")," The offset, in bytes, to the first element in the view."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"length"),"= The number of elements in the view. Defaults to buffer length.")),(0,a.kt)("p",null,"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Int8Array"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"Uint8Array"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"Int16Array"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"Uint16Array"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"Int32Array"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"Uint32Array"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"Float32Array"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"Float64Array")," A typed array view of the buffer."),(0,a.kt)("p",null,"Throws"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"glType")," is not a valid value.")))}m.isMDXComponent=!0}}]);