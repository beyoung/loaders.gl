"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3862],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>y});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=a.createContext({}),d=function(e){var r=a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},l=function(e){var r=d(e.components);return a.createElement(c.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},f=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=d(t),f=n,y=u["".concat(c,".").concat(f)]||u[f]||p[f]||o;return t?a.createElement(y,s(s({ref:r},l),{},{components:t})):a.createElement(y,s({ref:r},l))}));function y(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=f;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},24282:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(87462),n=(t(67294),t(3905));const o={},s="Data Sources and Sinks",i={unversionedId:"arrowjs/developer-guide/data-sources",id:"arrowjs/developer-guide/data-sources",title:"Data Sources and Sinks",description:"The Arrow JavaScript API is designed to make it easy to work with data sources both in the browser and in Node.js.",source:"@site/../docs/arrowjs/developer-guide/data-sources.md",sourceDirName:"arrowjs/developer-guide",slug:"/arrowjs/developer-guide/data-sources",permalink:"/docs/arrowjs/developer-guide/data-sources",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/developer-guide/data-sources.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Frame Operations",permalink:"/docs/arrowjs/developer-guide/data-frame-operations"},next:{title:"Data Types",permalink:"/docs/arrowjs/developer-guide/data-types"}},c={},d=[{value:"Streams",id:"streams",level:2},{value:"Fetch Responses",id:"fetch-responses",level:2},{value:"ArrayBuffers",id:"arraybuffers",level:2},{value:"AsyncIterators",id:"asynciterators",level:2}],l={toc:d},u="wrapper";function p(e){let{components:r,...t}=e;return(0,n.kt)(u,(0,a.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"data-sources-and-sinks"},"Data Sources and Sinks"),(0,n.kt)("p",null,"The Arrow JavaScript API is designed to make it easy to work with data sources both in the browser and in Node.js."),(0,n.kt)("h2",{id:"streams"},"Streams"),(0,n.kt)("p",null,"Both Node and DOM/WhatWG Streams can be used directly as input sources by the Arrow JS API."),(0,n.kt)("h2",{id:"fetch-responses"},"Fetch Responses"),(0,n.kt)("p",null,"Fetch responses (Promises) can be used where a data source is expected."),(0,n.kt)("h2",{id:"arraybuffers"},"ArrayBuffers"),(0,n.kt)("p",null,"Most data sources accept ",(0,n.kt)("inlineCode",{parentName:"p"},"Uint8Arrays"),"."),(0,n.kt)("h2",{id:"asynciterators"},"AsyncIterators"),(0,n.kt)("p",null,'Async iterators are the most general way to abstract "streaming" data sources and data sinks and are consistently accepted (and in many cased returned) by the Arrow JS API.'))}p.isMDXComponent=!0}}]);