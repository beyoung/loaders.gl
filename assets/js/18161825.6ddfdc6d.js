"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8177],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,g=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return a?n.createElement(g,l(l({ref:t},d),{},{components:a})):n.createElement(g,l({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},48664:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(83117),r=(a(67294),a(3905));const o={},l="GeoJSONLoader",i={unversionedId:"modules/json/api-reference/geojson-loader",id:"modules/json/api-reference/geojson-loader",title:"GeoJSONLoader",description:"Streaming loader for GeoJSON encoded files.",source:"@site/../docs/modules/json/api-reference/geojson-loader.md",sourceDirName:"modules/json/api-reference",slug:"/modules/json/api-reference/geojson-loader",permalink:"/docs/modules/json/api-reference/geojson-loader",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/json/api-reference/geojson-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NDJSONLoader",permalink:"/docs/modules/json/api-reference/ndjson-loader"},next:{title:"NDGeoJSONLoader",permalink:"/docs/modules/json/api-reference/ndgeojson-loader"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Options",id:"options",level:2},{value:"JSONPaths",id:"jsonpaths",level:2},{value:"Attribution",id:"attribution",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"geojsonloader"},"GeoJSONLoader"),(0,r.kt)("p",null,"Streaming loader for GeoJSON encoded files."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Loader"),(0,r.kt)("th",{parentName:"tr",align:null},"Characteristic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},".geojson"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Media Type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"application/geo+json"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Type"),(0,r.kt)("td",{parentName:"tr",align:null},"Text")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://geojson.org"},"GeoJSON"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Data Format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/specifications/category-table"},"Classic Table"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Supported APIs"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"load"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parse"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parseSync"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parseInBatches"))))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"For simple usage, you can load and parse a JSON file atomically:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {GeoJSONLoader} from '@loaders.gl/json';\nimport {load} from '@loaders.gl/core';\n\nconst data = await load(url, GeoJSONLoader, {json: options});\n")),(0,r.kt)("p",null,'For larger files, GeoJSONLoader supports streaming JSON parsing, in which case it will yield "batches" of rows from one array.\nTo parse a stream of GeoJSON, the user can specify the ',(0,r.kt)("inlineCode",{parentName:"p"},"options.json.jsonpaths")," to stream the ",(0,r.kt)("inlineCode",{parentName:"p"},"features")," array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {GeoJSONLoader} from '@loaders.gl/json';\nimport {loadInBatches} from '@loaders.gl/core';\n\nconst batches = await loadInBatches('geojson.json', GeoJSONLoader, {json: {jsonpaths: ['$.features']}});\n\nfor await (const batch of batches) {\n  // batch.data will contain a number of rows\n  for (const feature of batch.data) {\n    switch (feature.geometry.type) {\n      case 'Polygon':\n      ...\n    }\n  }\n}\n")),(0,r.kt)("p",null,"If no JSONPath is specified the loader will stream the first array it encounters in the JSON payload."),(0,r.kt)("p",null,"When batch parsing an embedded JSON array as a table, it is possible to get access to the containing object supplying the ",(0,r.kt)("inlineCode",{parentName:"p"},"{metadata: true}")," option."),(0,r.kt)("p",null,"The loader will yield an initial and a final batch with ",(0,r.kt)("inlineCode",{parentName:"p"},"batch.container")," providing the container object and ",(0,r.kt)("inlineCode",{parentName:"p"},"batch.batchType")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"partial-result")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"final-result")," respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {GeoJSONLoader} from '@loaders.gl/json';\nimport {loadInBatches} from '@loaders.gl/core';\n\nconst batches = await loadInBatches('geojson.json', GeoJSONLoader);\n\nfor await (const batch of batches) {\n  switch (batch.batchType) {\n    case 'partial-result': // contains fields seen so far\n    case 'final-result': // contains all fields except the streamed array\n      console.log(batch.container);\n      break;\n    case 'data:\n      // batch.data will contain a number of rows\n      for (const feature of batch.data) {\n        switch (feature.geometry.type) {\n          case 'Polygon':\n          ...\n        }\n      }\n  }\n}\n")),(0,r.kt)("h2",{id:"data-format"},"Data Format"),(0,r.kt)("p",null,"Parsed batches are of the format"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  batchType: 'metadata' | 'partial-result' | 'final-result' | undefined;\n  jsonpath: string;\n\n  // standard batch payload\n  data: any[] | any;\n  bytesUsed: number;\n  batchCount: number;\n}\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"Supports table category options such as ",(0,r.kt)("inlineCode",{parentName:"p"},"batchType")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"batchSize"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"From"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"json.table")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/badge/v2.0-blue.svg?style=flat-square",alt:"Website shields.io"}),"]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Parses non-streaming JSON as table, i.e. return the first embedded array in the JSON. Always ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," during batched/streaming parsing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"json.jsonpaths")),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/badge/v2.2-blue.svg?style=flat-square",alt:"Website shields.io"}),"]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"A list of JSON paths (see below) indicating the array that can be streamed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"metadata")," (top level)"),(0,r.kt)("td",{parentName:"tr",align:null},"[",(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/badge/v2.2-blue.svg?style=flat-square",alt:"Website shields.io"}),"]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", yields an initial and final batch containing the partial and final result (i.e. the root object, excluding the array being streamed)."),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"jsonpaths"},"JSONPaths"),(0,r.kt)("p",null,"A minimal subset of the JSONPath syntax is supported, to specify which array in a JSON object should be streamed as batchs."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$.component1.component2.component3")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No support for wildcards, brackets etc. Only paths starting with ",(0,r.kt)("inlineCode",{parentName:"li"},"$")," (JSON root) are supported."),(0,r.kt)("li",{parentName:"ul"},"Regardless of the paths provided, only arrays will be streamed.")),(0,r.kt)("h2",{id:"attribution"},"Attribution"),(0,r.kt)("p",null,"This loader is based on a fork of dscape's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dscape/clarinet"},(0,r.kt)("inlineCode",{parentName:"a"},"clarinet"))," under BSD 2-clause license."))}m.isMDXComponent=!0}}]);