"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9074],{47732:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});var i=s(85893),n=s(11151);const l={},a="I3S Building Scene Layer (BSL)",t={id:"modules/i3s/recipes/building-scene-layer",title:"I3S Building Scene Layer (BSL)",description:"A building scene layer can represent 3D model content based on BIM structuring disciplines such as architectural or structural, and categories such as windows or walls. In I3S specification BSL is a layer type.",source:"@site/../docs/modules/i3s/recipes/building-scene-layer.md",sourceDirName:"modules/i3s/recipes",slug:"/modules/i3s/recipes/building-scene-layer",permalink:"/docs/modules/i3s/recipes/building-scene-layer",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/i3s/recipes/building-scene-layer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Worker Threads",permalink:"/docs/developer-guide/concepts/worker-threads"},next:{title:"Attribute-driven colorization",permalink:"/docs/modules/i3s/recipes/attribute-driven-colorization"}},o={},c=[{value:"BSL visualization with deck.gl",id:"bsl-visualization-with-deckgl",level:2},{value:"Load BSL",id:"load-bsl",level:3},{value:"Show sublayers in deck.gl",id:"show-sublayers-in-deckgl",level:3},{value:"Control sublayers&#39; visibility",id:"control-sublayers-visibility",level:3}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"i3s-building-scene-layer-bsl",children:"I3S Building Scene Layer (BSL)"}),"\n",(0,i.jsx)("p",{class:"badges",children:(0,i.jsx)("img",{src:"https://img.shields.io/badge/From-v3.2-blue.svg?style=flat-square",alt:"From-v3.2"})}),"\n",(0,i.jsxs)(r.p,{children:["A building scene layer can represent 3D model content based on BIM structuring disciplines such as architectural or structural, and categories such as windows or walls. In I3S ",(0,i.jsx)(r.a,{href:"https://github.com/Esri/i3s-spec",children:"specification"})," BSL is a layer type."]}),"\n",(0,i.jsxs)(r.p,{children:["BSL doesn't have content resources. It is a composite layer that consists of multiple sublayers. Every sublayer can be: ",(0,i.jsx)(r.code,{children:"group"}),", ",(0,i.jsx)(r.code,{children:"3DObject"})," or ",(0,i.jsx)(r.code,{children:"Point"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"group"})," sublayer is also just a composite layer. It contains further levels of sublayers and provides a nested structure for BSL. As a result, BSL has a tree-like sublayers structure with ",(0,i.jsx)(r.code,{children:"3DObject"})," and ",(0,i.jsx)(r.code,{children:"Point"})," layers;"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"3DObject"})," and ",(0,i.jsx)(r.code,{children:"Point"})," sublayers are content layers. Those layer types are separated types of layers in I3S spec and can be used independently. Loaders.gl supports ",(0,i.jsx)(r.code,{children:"3DObject"})," layer types and doesn't support ",(0,i.jsx)(r.code,{children:"Point"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"bsl-visualization-with-deckgl",children:"BSL visualization with deck.gl"}),"\n",(0,i.jsxs)(r.p,{children:["I3S ",(0,i.jsx)(r.code,{children:"3DObject"})," layer is shown in deck.gl with ",(0,i.jsx)(r.a,{href:"https://deck.gl/docs/api-reference/geo-layers/tile-3d-layer",children:"Tile3DLayer"}),". The complete case of BSL visualization is done in ",(0,i.jsx)(r.a,{href:"https://i3s.loaders.gl/viewer?tileset=turanga-library",children:"I3S Explorer"}),". It is an open source ReactJS application. See source code on ",(0,i.jsx)(r.a,{href:"https://github.com/visgl/loaders.gl-showcases",children:"GitHub"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"I3S Explorer BSL visualization",src:s(54648).Z+"",width:"1823",height:"807"})}),"\n",(0,i.jsx)(r.h3,{id:"load-bsl",children:"Load BSL"}),"\n",(0,i.jsxs)(r.p,{children:["For BSL it is necessary to do preparation steps to obtain data for ",(0,i.jsx)(r.code,{children:"Tile3DLayer"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Loaders.gl has ",(0,i.jsx)(r.code,{children:"I3SBuildingSceneLayerLoader"})," that is used to load BSL JSON metadata and pick ",(0,i.jsx)(r.code,{children:"3DObject"})," sublayers."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"import {load} from '@loaders.gl/core';\r\nimport {I3SBuildingSceneLayerLoader} from '@loaders.gl/i3s';\r\n\r\nconst {header, sublayers} = await load(tilesetData.url, I3SBuildingSceneLayerLoader);\n"})}),"\n",(0,i.jsxs)(r.p,{children:["The loader returns a flattened array called ",(0,i.jsx)(r.code,{children:"sublayers"})," that contains only ",(0,i.jsx)(r.code,{children:"3DObject"})," layers from the BSL sublayers tree."]}),"\n",(0,i.jsx)(r.h3,{id:"show-sublayers-in-deckgl",children:"Show sublayers in deck.gl"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:"import {StaticMap} from 'react-map-gl';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\r\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\r\nimport {I3SLoader} from '@loaders.gl/i3s';\r\n\r\nfunction renderLayer() {\r\n  const tile3dLayers = sublayers.map((layer) => {\r\n    if (!layer.visibility) {\r\n      return null;\r\n    }\r\n    const loadOptions = {\r\n      i3s: {coordinateSystem: COORDINATE_SYSTEM.LNGLAT_OFFSETS}\r\n    };\r\n    if (token) {\r\n      loadOptions.i3s.token = token;\r\n    }\r\n    return new Tile3DLayer({\r\n      id: `tile3d-layer-${layer.id}`,\r\n      data: layer.url,\r\n      loader: I3SLoader,\r\n      loadOptions\r\n    });\r\n  });\r\n}\r\n\r\n<DeckGL\r\n  id={id}\r\n  layers={renderLayers()}\r\n  viewState={viewState}\r\n  onViewStateChange={onViewStateChangeHandler}\r\n>\r\n  <StaticMap reuseMaps mapStyle={mapStyle} />\r\n</DeckGL>;\n"})}),"\n",(0,i.jsx)(r.p,{children:"Take a look at sublayer properties:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"id"})," - unique identifier required to set deck.gl layer id;"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"url"})," - ",(0,i.jsx)(r.code,{children:"3DObject"})," layer url;"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"visibility"})," - BSL has an initial visibility state for all sublayers. Use this property to control sublayers' visibility."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"control-sublayers-visibility",children:"Control sublayers' visibility"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"I3SBuildingSceneLayerLoader"})," returns also a ",(0,i.jsx)(r.code,{children:"header"})," object. ",(0,i.jsx)(r.code,{children:"header.sublayers"})," is a JSON nested tree that can be used to visualize BSL explorer panel."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"BSL Explorer visualization",src:s(89235).Z+"",width:"367",height:"797"})}),"\n",(0,i.jsx)(r.p,{children:"With such a panel it is possible to change a sublayer visibility property:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"  function onChangeHandler(treeItem) => {\r\n    const sublayer = sublayers.find((sublayer) => sublayer.id === treeItem.id);\r\n    if (sublayer) {\r\n      sublayer.visibility = !sublayer.visibility;\r\n    }\r\n  }\n"})})]})}function u(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},89235:(e,r,s)=>{s.d(r,{Z:()=>i});const i=s.p+"assets/images/bsl-explorer-164adc35b4d0a4635ac00443770609a5.png"},54648:(e,r,s)=>{s.d(r,{Z:()=>i});const i=s.p+"assets/images/i3s-explorer-building-4bc05ac1233f15cde9fc656fa1f4959c.png"},11151:(e,r,s)=>{s.d(r,{Z:()=>t,a:()=>a});var i=s(67294);const n={},l=i.createContext(n);function a(e){const r=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(l.Provider,{value:r},e.children)}}}]);