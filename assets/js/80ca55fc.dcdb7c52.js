"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4113],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var c=2;c<l;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},63505:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=r(87462),n=(r(67294),r(3905));const l={},i="Table",o={unversionedId:"modules/schema/api-reference/table",id:"modules/schema/api-reference/table",title:"Table",description:"loaders.gl defines a number of table types.",source:"@site/../docs/modules/schema/api-reference/table.md",sourceDirName:"modules/schema/api-reference",slug:"/modules/schema/api-reference/table",permalink:"/docs/modules/schema/api-reference/table",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/schema/api-reference/table.md",tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Table Schemas",id:"table-schemas",level:2},{value:"Table Utilities",id:"table-utilities",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"table"},"Table"),(0,n.kt)("p",null,"loaders.gl defines a number of table types."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ObjectRowTable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ArrayRowTable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"GeoJSONTable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ColumnarTable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ArrowTable"))),(0,n.kt)("p",null,"These all have a ",(0,n.kt)("inlineCode",{parentName:"p"},"shape")," field on the top level. "),(0,n.kt)("p",null,'(If you are an advanced TypeScript programmer, you will appreciate that this lets typescript treat table types as a "discriminated union", meaning that once the type has been checked in an if or switch statement, the typing of the table is implied).'),(0,n.kt)("h2",{id:"table-schemas"},"Table Schemas"),(0,n.kt)("p",null,"Each table has an optional ",(0,n.kt)("inlineCode",{parentName:"p"},"schema")," field. If it is present, it contains a list of fields (name, type and metadata for each field), as well as metadata for the table itself."),(0,n.kt)("p",null,"There are also utilities for deducing schemas. "),(0,n.kt)("h2",{id:"table-utilities"},"Table Utilities"),(0,n.kt)("p",null,"A set of utilities are provided to work with tables independently of which of the supported representations they are in."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"`tableLength``"),(0,n.kt)("li",{parentName:"ul"},"...")))}m.isMDXComponent=!0}}]);