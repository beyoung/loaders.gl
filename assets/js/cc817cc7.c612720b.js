"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2183],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>v});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,v=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(v,l(l({ref:t},p),{},{components:r})):n.createElement(v,l({ref:t},p))}));function v(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},45339:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=r(83117),o=(r(67294),r(3905));const i={},l="Tiles3DConverter class",a={unversionedId:"modules/tile-converter/api-reference/3d-tiles-converter",id:"modules/tile-converter/api-reference/3d-tiles-converter",title:"Tiles3DConverter class",description:"The Tiles3DConverter class converts an I3S layer. It converts between the OGC I3S formats and the 3D Tiles.",source:"@site/../docs/modules/tile-converter/api-reference/3d-tiles-converter.md",sourceDirName:"modules/tile-converter/api-reference",slug:"/modules/tile-converter/api-reference/3d-tiles-converter",permalink:"/docs/modules/tile-converter/api-reference/3d-tiles-converter",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/tile-converter/api-reference/3d-tiles-converter.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/modules/tile-converter/"},next:{title:"I3SConverter class",permalink:"/docs/modules/tile-converter/api-reference/i3s-converter"}},s={},c=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor()",id:"constructor",level:3},{value:"convert(options: object): object",id:"convertoptions-object-object",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tiles3dconverter-class"},"Tiles3DConverter class"),(0,o.kt)("p",{class:"badges"},(0,o.kt)("img",{src:"https://img.shields.io/badge/From-v3.0-blue.svg?style=flat-square",alt:"From-v3.0"})),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Tiles3DConverter")," class converts an I3S layer. It converts between the OGC I3S formats and the 3D Tiles."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {Tiles3DConverter} from '@loaders.gl/tile-converter';\n\nconst TILESET_URL =\n  'https://tiles.arcgis.com/tiles/u0sSNqDXr7puKJrF/arcgis/rest/services/Frankfurt2017_v17/SceneServer/layers/0';\n\nconst converter = new Tiles3DConverter();\nawait converter.convert({\n  inputUrl: TILESET_URL,\n  outputPath: 'data',\n  tilesetName: 'Frankfurt',\n  maxDepth: 2\n});\n")),(0,o.kt)("p",null,"The converted tiles are written to the specified output path."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"constructor"},"constructor()"),(0,o.kt)("p",null,"Constructs a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Tiles3DConverter")," instance."),(0,o.kt)("h3",{id:"convertoptions-object-object"},"convert(options: object): object"),(0,o.kt)("p",null,"Converts a tileset to 3DTiles format"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options.inputUrl")," the url to read the tileset from. Required"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options.outputPath")," the output path"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options.tilesetName")," the output name of the tileset"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options.egmFilePath")," location of ","*",".pgm file to convert heights from ellipsoidal to gravity-related format"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options.maxDepth")," The max tree depth of conversion")))}d.isMDXComponent=!0}}]);