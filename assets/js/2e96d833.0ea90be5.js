"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3863],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),h=o,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return t?n.createElement(f,s(s({ref:r},c),{},{components:t})):n.createElement(f,s({ref:r},c))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=h;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},91641:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=t(83117),o=(t(67294),t(3905));const a={},s="Error Handling",i={unversionedId:"developer-guide/error-handling",id:"developer-guide/error-handling",title:"Error Handling",description:"Applications typically want to provide solid error handling when loading and saving data. Ideally the applications wants to use a simple clean API for the loading, and yet have the confidence that errors are caught and meaningful messages are presented to the user.",source:"@site/../docs/developer-guide/error-handling.md",sourceDirName:"developer-guide",slug:"/developer-guide/error-handling",permalink:"/docs/developer-guide/error-handling",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/developer-guide/error-handling.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Loader Categories",permalink:"/docs/developer-guide/loader-categories"},next:{title:"Polyfills",permalink:"/docs/developer-guide/polyfills"}},l={},p=[{value:"Types of Errors",id:"types-of-errors",level:2},{value:"Error Messages",id:"error-messages",level:3},{value:"parse Error Handling",id:"parse-error-handling",level:2},{value:"Handling Errors from Async Functions",id:"handling-errors-from-async-functions",level:2},{value:"fetch Error Handling",id:"fetch-error-handling",level:2}],c={toc:p},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(d,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"error-handling"},"Error Handling"),(0,o.kt)("p",null,"Applications typically want to provide solid error handling when loading and saving data. Ideally the applications wants to use a simple clean API for the loading, and yet have the confidence that errors are caught and meaningful messages are presented to the user."),(0,o.kt)("h2",{id:"types-of-errors"},"Types of Errors"),(0,o.kt)("p",null,"There are three main types of errors that arise when attempting to load a data resource:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"There is some kind of network/resource access error, preventing the request for data from being issued"),(0,o.kt)("li",{parentName:"ol"},"A request is sent to a server, but the server is unable to service the request due to some error condition (often illegal access tokens or request parameters) and sends an error response."),(0,o.kt)("li",{parentName:"ol"},"The server returns data, but the parser is unable to parse it (perhaps due to the data being malformatted, or formatted according to an unsupported version of that format).")),(0,o.kt)("p",null,"loaders.gl can detect all of these error conditions and report the resulting errors in a unified way (the errors will be available as exceptions or rejected promises depending on your async programming style, see below)."),(0,o.kt)("h3",{id:"error-messages"},"Error Messages"),(0,o.kt)("p",null,"loaders.gl aims to produce concise, easy-to-understand error messages that can be presented directly to the end user."),(0,o.kt)("p",null,"When the fetch call fails, the genereted exception is passed to the user, and the same is true when a loader fails. For server error responses, some basic information about the error is compiled into an error message (using e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"response.status"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"response.url")," and occasionally ",(0,o.kt)("inlineCode",{parentName:"p"},"response.text"),")."),(0,o.kt)("p",null,"Note that while servers often send some information about errors in ",(0,o.kt)("inlineCode",{parentName:"p"},"response.text()")," when setting HTTP error codes, there are no universally adhered-to conventions for how servers format those error messages. The data is often a set of key-value pairs that are JSON or XML encoded, but even then the exact key names are usually server-specific."),(0,o.kt)("p",null,"At the moment loaders.gl does not provide any error formatting plugins, so if you know how your specific service formats errors and want to extract these in a way that you can present to the user, you may want to take control of the fetch ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," status checking, see below."),(0,o.kt)("h2",{id:"parse-error-handling"},"parse Error Handling"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"parse")," accepts fetch ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," objects, and ",(0,o.kt)("inlineCode",{parentName:"p"},"parse")," will check the status of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," before attempting to parse, and generate an exception if appropriate."),(0,o.kt)("h2",{id:"handling-errors-from-async-functions"},"Handling Errors from Async Functions"),(0,o.kt)("p",null,"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"parse")," is an async function, and in JavaScript, errors generated by async functions will be reported either as an exception or as a rejected promise, depending on how the async funtion was called (using promises or the ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," keyword):"),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"await"),", errors are reported as exceptions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n  const response = await fetch(url);\n  const data = await parse(response);\n} catch (error) {\n  console.log(error);\n}\n")),(0,o.kt)("p",null,"A rejected promise is generated when using ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise.then"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"fetch(url)\n  .then((response) => parse(response))\n  .catch((error) => console.log(error));\n")),(0,o.kt)("p",null,"Also note that the Javascript runtime seamlessly converts errors between exceptions and promises in mixed code."),(0,o.kt)("h2",{id:"fetch-error-handling"},"fetch Error Handling"),(0,o.kt)("p",null,"loaders.gl is designed around the use of the modern JavaScript ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," API, so for additional context, it may help to review of how the JavaSctipt ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," function handles errors."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"fetch"),' separates between "network errors" that can be detected directly (these cause the ',(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," to throw an exception) and server side errors that are reported asynchronously with HTTP status codes (in this case the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," object offers accessors that must be called to check if the operation was successful before accessing data)."),(0,o.kt)("p",null,'Example: "manually" checking separately for fetch network errors and server errors:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Check for network error\nlet response;\ntry {\n  response = await fetch(url);\n} catch (error) {\n  console.log('Network error');\n}\n\n// Check for server error\nif (!response.ok) {\n  console.log(`fetch failed with status ${response.status}`);\n}\n")),(0,o.kt)("p",null,"Note that servers often sends a message providing some detail about what went wrong, and that message can be accessed using the standard (asynchronous) ",(0,o.kt)("inlineCode",{parentName:"p"},"response.text()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"response.json()")," methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (!response.ok) {\n  const errorMessage = await response.text();\n  // Custom parsing can be done here, if you know how your particular service formats errors\n  console.log(`fetch failed with status ${errorMessage}`);\n}\n")))}u.isMDXComponent=!0}}]);