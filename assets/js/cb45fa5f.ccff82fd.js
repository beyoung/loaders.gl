"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9125],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},73261:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={},l="Column",i={unversionedId:"arrowjs/api-reference/column",id:"arrowjs/api-reference/column",title:"Column",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/column.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/column",permalink:"/docs/arrowjs/api-reference/column",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/column.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chunked",permalink:"/docs/arrowjs/api-reference/chunked"},next:{title:"DataFrame",permalink:"/docs/arrowjs/api-reference/data-frame"}},c={},u=[{value:"Usage",id:"usage",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Fields",id:"fields",level:2},{value:"name : String",id:"name--string",level:3},{value:"field : Field",id:"field--field",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor(field : Field, vectors: Vector, offsets?: Uint32Array)",id:"constructorfield--field-vectors-vector-offsets-uint32array",level:3},{value:"clone",id:"clone",level:3},{value:"getChildAt(index : Number) : Vector",id:"getchildatindex--number--vector",level:3}],s={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"column"},"Column"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.")),(0,a.kt)("p",null,"An immutable column data structure consisting of a field (type metadata) and a chunked data array."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Copy a column"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const typedArray = column.slice();\n")),(0,a.kt)("p",null,"Get a contiguous typed array from a ",(0,a.kt)("inlineCode",{parentName:"p"},"Column")," (creates a new typed array unless only one chunk)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const typedArray = column.toArray();\n")),(0,a.kt)("p",null,"columns are iterable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"let max = column.get(0);\nlet min = max;\nfor (const value of column) {\n  if      (value > max) max = value;\n  else if (value < min) min = value;\n}\n")),(0,a.kt)("h2",{id:"inheritance"},"Inheritance"),(0,a.kt)("p",null,"Column extends ",(0,a.kt)("a",{parentName:"p",href:"/docs/arrowjs/api-reference/chunked"},(0,a.kt)("inlineCode",{parentName:"a"},"Chunked"))),(0,a.kt)("h2",{id:"fields"},"Fields"),(0,a.kt)("p",null,"In addition to fields inherited from ",(0,a.kt)("inlineCode",{parentName:"p"},"Chunked"),", Colum also defines"),(0,a.kt)("h3",{id:"name--string"},"name : String"),(0,a.kt)("p",null,"The name of the column (short for ",(0,a.kt)("inlineCode",{parentName:"p"},"field.name"),")"),(0,a.kt)("h3",{id:"field--field"},"field : Field"),(0,a.kt)("p",null,"Returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"Field")," instance that describes for the column."),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"constructorfield--field-vectors-vector-offsets-uint32array"},"constructor(field : Field, vectors: Vector, offsets?: Uint32Array)"),(0,a.kt)("h3",{id:"clone"},"clone"),(0,a.kt)("p",null,"Returns a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Column")," instance with the same properties."),(0,a.kt)("h3",{id:"getchildatindex--number--vector"},"getChildAt(index : Number) : Vector"),(0,a.kt)("p",null,"Returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"Vector")," that contains the element with"))}p.isMDXComponent=!0}}]);