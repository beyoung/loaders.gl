"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4997],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6983:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={},i="Roadmap",l={unversionedId:"roadmap",id:"roadmap",title:"Roadmap",description:"v4.0",source:"@site/../docs/roadmap.md",sourceDirName:".",slug:"/roadmap",permalink:"/docs/roadmap",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/roadmap.md",tags:[],version:"current",frontMatter:{}},p={},s=[{value:"v4.0",id:"v40",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"roadmap"},"Roadmap"),(0,a.kt)("h2",{id:"v40"},"v4.0"),(0,a.kt)("p",null,"loaders.gl is developed under open governance by multiple contributors.\nWhile it is hard to catalog all ongoing work, current development tracks and aspirations include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"New loaders: ",(0,a.kt)("inlineCode",{parentName:"li"},"GeoTIFFLoader"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"ZarrLoader"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"AVROLoader"),","),(0,a.kt)("li",{parentName:"ul"},"More comprehensive support for ",(0,a.kt)("inlineCode",{parentName:"li"},"options.shape")," to control the output format of loaders."),(0,a.kt)("li",{parentName:"ul"},"More gLTF Extensions: ",(0,a.kt)("inlineCode",{parentName:"li"},"EXT_mesh_features")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"EXT_structural_metadata")," for 1.1 3D Tiles attributes support"),(0,a.kt)("li",{parentName:"ul"},"I3S: feature completeness and performance"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ffmpeg")," WASM integration for ",(0,a.kt)("inlineCode",{parentName:"li"},"@loaders.gl/video")),(0,a.kt)("li",{parentName:"ul"},"EcmaScript module support"),(0,a.kt)("li",{parentName:"ul"},"Unbundled loaders."),(0,a.kt)("li",{parentName:"ul"},"Replace ",(0,a.kt)("inlineCode",{parentName:"li"},"Schema")," class with arrow schema if arrowjs tree-shaking improvements are satisfactory."),(0,a.kt)("li",{parentName:"ul"},"Node v18 support (as Node 16 is close to it's support end)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"tile-converter functional extension"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u0421onversion of S2 bounding volume to Oriented Bounding Boxes format (OBB)"),(0,a.kt)("li",{parentName:"ul"},"Support conversion of non-indexed geometry"),(0,a.kt)("li",{parentName:"ul"},"3DTiles Implicit tiling 1.1 support"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Maxar-Corp/3tz-specification/tree/main"},".3tz")," (3DTiles archive format) support for conversion into I3S"),(0,a.kt)("li",{parentName:"ul"},"Better SLPK (I3S archive format) support:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Support Large SLPK (>2gb) input for tile-converter"),(0,a.kt)("li",{parentName:"ul"},"Hash generation for SLPKs"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"i3s-server")," (part of tile-converter npm package) - serve SLPKs as a local HTTP server"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"slpk-extractor")," (part of tile-converter npm package) - extract an SLPK to a dataset that can be served via ",(0,a.kt)("inlineCode",{parentName:"li"},"i3s-server")))),(0,a.kt)("li",{parentName:"ul"},"Pre-processing for conversion 3DTiles > I3S:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Detect topology type (for example TRIANGLE and TRIANGLE_STRIP will pass further for conversion, POINT or TRIANGLE_FAN will notify this mesh type is not supported for conversion)"),(0,a.kt)("li",{parentName:"ul"},"Detect attributes classes for ",(0,a.kt)("inlineCode",{parentName:"li"},"EXT_feature_metadata")," and for ",(0,a.kt)("inlineCode",{parentName:"li"},"EXT_mesh_features")," extensions. Choose a class to convert in CLI with arrow keys.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"tile-converter performance and usability optimizations"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Exclude Tileset 3D and Tile 3D classes during conversion (it gives a RAM usage improvement)"),(0,a.kt)("li",{parentName:"ul"},"Tile-converter: offline conversion. No internet is required during the conversion process")))}m.isMDXComponent=!0}}]);