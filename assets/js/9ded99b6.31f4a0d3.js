"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9232],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=p(a),g=r,c=s["".concat(m,".").concat(g)]||s[g]||u[g]||i;return a?n.createElement(c,l(l({ref:t},d),{},{components:a})):n.createElement(c,l({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=g;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},50263:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(83117),r=(a(67294),a(3905));const i={},l="Overview",o={unversionedId:"modules/images/README",id:"modules/images/README",title:"Overview",description:"The @loaders.gl/images module contains loader and writers for images that follow loaders.gl conventions and work under both node and browser.",source:"@site/../docs/modules/images/README.md",sourceDirName:"modules/images",slug:"/modules/images/",permalink:"/docs/modules/images/",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/images/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/modules/i3s/"},next:{title:"Image Utilities",permalink:"/docs/modules/images/api-reference/parsed-image-api"}},m={},p=[{value:"Installation",id:"installation",level:2},{value:"API",id:"api",level:2},{value:"Parsed Image API",id:"parsed-image-api",level:3},{value:"Binary Image API",id:"binary-image-api",level:3},{value:"Parsed Image API",id:"parsed-image-api-1",level:3},{value:"Image Types",id:"image-types",level:2}],d={toc:p},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@loaders.gl/images")," module contains loader and writers for images that follow loaders.gl conventions and work under both node and browser."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @loaders.gl/images\nnpm install @loaders.gl/core\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Loader"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"modules/images/docs/api-reference/image-loader"},(0,r.kt)("inlineCode",{parentName:"a"},"ImageLoader"))),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"modules/images/docs/api-reference/image-writer"},(0,r.kt)("inlineCode",{parentName:"a"},"ImageWriter"))),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"parsed-image-api"},"Parsed Image API"),(0,r.kt)("h3",{id:"binary-image-api"},"Binary Image API"),(0,r.kt)("p",null,'A set of functions that can extract information from "unparsed" binary memory representation of certain image formats. These functions are intended to be called on raw ',(0,r.kt)("inlineCode",{parentName:"p"},"ArrayBuffer")," data, before the ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageLoader")," parses it and converts it to a parsed image type."),(0,r.kt)("p",null,"These functions are used internally to autodetect if image loader can be used to parse a certain ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayBuffer"),", but are also available to applications."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isBinaryImage(imageData : ArrayBuffer [, mimeType : String]) : Boolean")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"`getBinaryImageMIMEType(imageData : ArrayBuffer) : String"),(0,r.kt)("td",{parentName:"tr",align:null},"null`"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getBinaryImageSize(imageData : ArrayBuffer [, mimeType : String]) : Object")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"parsed-image-api-1"},"Parsed Image API"),(0,r.kt)("p",null,"A set of functions to work with parsed images returned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageLoader"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isImageTypeSupported(type : string) : boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Check if type is supported by current run-time environment")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getDefaultImageType() : string")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the image type selected by default ( ",(0,r.kt)("inlineCode",{parentName:"td"},"options.image.type: 'auto'")," in current run-time environment")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isImage(image : any) : boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Checks any JavaScript value to see if it is an image of a type that loaders.gl can work with")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getImageType(image : any) : string")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the type name for this image.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getImageData(image : any) : object")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an image data object with a ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," array representing the pixels of an image")))),(0,r.kt)("h2",{id:"image-types"},"Image Types"),(0,r.kt)("p",null,"To support image loading on older browsers and Node.js, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageLoader")," can return different types, i.e. different representations of the parsed image."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImageBitmap")," - An ",(0,r.kt)("inlineCode",{parentName:"li"},"ImageBitmap"),' object represents a bitmap image that can be performantly painted to a canvas ("without undue latency"). Due to the signficant performance advantages, and the fact that ',(0,r.kt)("inlineCode",{parentName:"li"},"ImageBitmap")," instances can be transferred efficiently between threads, ",(0,r.kt)("inlineCode",{parentName:"li"},"ImageBitmap")," is the preferred parsed image representation in browsers, when available. Currently only available in Chrome and Firefox."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Image")," (aka ",(0,r.kt)("inlineCode",{parentName:"li"},"HTMLImageElement"),") - The traditional HTML image class. Available in all browsers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," - Raw binary memory representing the image pixels, typically in RGBA ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint8Array")," format. JavaScript computations can be done on this data. Also, Node.js texture creation functions in headless gl accept ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," images. and browser ",(0,r.kt)("inlineCode",{parentName:"li"},"ImageData")," objects can be initialized with this data.")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"modules/images/docs/api-reference/image-loader"},(0,r.kt)("inlineCode",{parentName:"a"},"ImageLoader"))," for more details on options etc."))}u.isMDXComponent=!0}}]);