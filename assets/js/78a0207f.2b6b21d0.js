"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3122],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=l(r),u=n,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||s;return r?a.createElement(g,i(i({ref:t},c),{},{components:r})):a.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8492:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=r(87462),n=(r(67294),r(3905));const s={},i="WMSService",o={unversionedId:"modules/wms/api-reference/wms-service",id:"modules/wms/api-reference/wms-service",title:"WMSService",description:"The WMSService class provides:",source:"@site/../docs/modules/wms/api-reference/wms-service.md",sourceDirName:"modules/wms/api-reference",slug:"/modules/wms/api-reference/wms-service",permalink:"/docs/modules/wms/api-reference/wms-service",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/wms/api-reference/wms-service.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CSWService",permalink:"/docs/modules/wms/api-reference/csw-service"},next:{title:"WMSCapabilitiesLoader",permalink:"/docs/modules/wms/api-reference/wms-capabilities-loader"}},p={},l=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor(props: WMSServiceProps)",id:"constructorprops-wmsserviceprops",level:3},{value:"<code>getCapabilities()</code>",id:"getcapabilities",level:3},{value:"<code>getMap()</code>",id:"getmap",level:3},{value:"<code>getFeatureInfo()</code>",id:"getfeatureinfo",level:3},{value:"<code>describeLayer()</code>",id:"describelayer",level:3},{value:"<code>getLegendGraphic()</code>",id:"getlegendgraphic",level:3}],c={toc:l},m="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"wmsservice"},"WMSService"),(0,n.kt)("p",{class:"badges"},(0,n.kt)("img",{src:"https://img.shields.io/badge/From-v3.3-blue.svg?style=flat-square",alt:"From-3.3"}),(0,n.kt)("img",{src:"https://img.shields.io/badge/-BETA-teal.svg",alt:"BETA"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"WMSService")," class provides: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"type safe method to request and parse the capabilities metadata of a WMS service"),(0,n.kt)("li",{parentName:"ul"},"type safe methods to call and parse results (and errors) from a WMS service's endpoints"),(0,n.kt)("li",{parentName:"ul"},"type safe methods to form URLs to a WMS service"),(0,n.kt)("li",{parentName:"ul"},"an implementation of the ",(0,n.kt)("inlineCode",{parentName:"li"},"ImageService")," interface, allowing WMS services to be used as one interchangeable type of map image data source.")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"WMSService")," generates URLs with URL parameters intended to be used with HTTP GET requests against a WMS server. The OGC WMS standard also allows WMS services to accept XML payloads with HTTP POST messages, however generation of such XML payloads is not supported by this class.")),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"WMSService")," instance provides type safe methods to send requests to a WMS service and parse the responses: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL, wmsParamaters: {layers: ['oms']}});\n  const mapImage = await wmsService.getMap({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75]\n  });\n  // Render mapImage...\n")),(0,n.kt)("p",null,"Capabilities metadata can be queried: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL});\n  const capabilities = await wmsService.getCapabilities({});\n  // Check capabilities\n")),(0,n.kt)("p",null,"It is also possible to just use the WMS service to generate URLs. This allowing the application to perform its own and parsing: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL});\n  const getMapUrl = await wmsService.getMapURL({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75],\n    layers: ['oms']\n  });\n  const response = await myCustomFetch(getMapURL);\n  // parse...\n")),(0,n.kt)("p",null,"The WMS version as well as other default WMS parameters can be specified in the constructor"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Specify the older 1.1.1 version (1.3.0 is the default)\n  const wmsService = new WMSService({url: WMS_SERVICE_URL, version: '1.1.1', layers: ['oms']});\n  const getMap = await wmsService.getMap({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75],\n    \n  });\n")),(0,n.kt)("p",null,"Custom fetch options, such as HTTP headers, and loader-specific options can be specified via the\nstandard loaders.gl ",(0,n.kt)("inlineCode",{parentName:"p"},"loadOptions")," argument, which is forwarded to all load and parse operations:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  const wmsService = new WMSService({url: WMS_SERVICE_URL, loadOptions: {\n    fetch: {\n      headers: {\n        Authentication: 'Bearer abc...'\n      }\n    }\n  }});\n\n  const getMap = await wmsService.getMap({\n    width: 800,\n    height: 600,\n    bbox: [30, 70, 35, 75],\n    layers: ['oms']\n  });\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"constructorprops-wmsserviceprops"},"constructor(props: WMSServiceProps)"),(0,n.kt)("p",null,"Creates a ",(0,n.kt)("inlineCode",{parentName:"p"},"WMSService")," instance"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSServiceProps = {\n  url: string; // Base URL to the service\n  loadOptions?: LoaderOptions; // Any load options to the loaders.gl Loaders used by the WMSService methods\n\n  wmsParameters: {\n    // Default WMS parameters\n    version?: '1.3.0' | '1.1.1'; /** WMS version */\n    layers?: string[]; /** Layers to render */\n    crs?: string; /** CRS for the image (not the bounding box) */\n    format?: 'image/png'; /** Requested format for the return image */\n    info_format?: 'text/plain' | 'application/vnd.ogc.gml'; /** Requested MIME type of returned feature info */\n    styles?: unknown; /** Styling */\n    transparent?: boolean; /** Render transparent pixels if no data */\n  },\n  vendor PAra\n};\n")),(0,n.kt)("h3",{id:"getcapabilities"},(0,n.kt)("inlineCode",{parentName:"h3"},"getCapabilities()")),(0,n.kt)("p",null,"Get Capabilities"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getCapabilities(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSCapabilities>\n")),(0,n.kt)("p",null,"Returns a capabilities objects. See ","[",(0,n.kt)("inlineCode",{parentName:"p"},"WMSCapabilitiesLoader"),"][/docs/modules/wms/api-reference/wms-capabilities-loader]"," for detailed information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"WMSCapabilities")," type."),(0,n.kt)("h3",{id:"getmap"},(0,n.kt)("inlineCode",{parentName:"h3"},"getMap()")),(0,n.kt)("p",null,"Get a map image"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getMap(wmsParameters: WMSGetMapParameters, vendorParameters?: Record<string, unknown>): Promise<ImageType>\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSGetMapParameters = {\n  bbox: [number, number, number, number]; // bounding box of the requested map image \n  width: number; // pixel width of returned image \n  height: number; // pixels \n\n  // constructor parameters can be overridden in the actual calls\n  layers?: string | string[]; // Layers to render \n  styles?: unknown; // Styling \n  crs?: string; // crs for the image (not the bounding box) \n  format?: 'image/png'; // requested format for the return image \n};\n")),(0,n.kt)("h3",{id:"getfeatureinfo"},(0,n.kt)("inlineCode",{parentName:"h3"},"getFeatureInfo()")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This request is not supported by all WNS servers. Use ",(0,n.kt)("inlineCode",{parentName:"p"},"getCapabilities()")," to determine if it is.")),(0,n.kt)("p",null,"Get Feature Info for a coordinate"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getFeatureInfo(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSFeatureInfo>\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"// https://imagery.pasda.psu.edu/arcgis/services/pasda/UrbanTreeCanopy_Landcover/MapServer/WmsServer?SERVICE=WMS&\nexport type WMSGetFeatureInfoParameters = {\n  x: number; // x coordinate for the feature info request\n  y: number; // y coordinate for the feature info request\n  query_layers: string[]; // list of layers to query (could be different from rendered layers)\n  info_format?: 'text/plain' | 'application/geojson' | 'application/vnd.ogc.gml'; // MIME type of returned feature info\n  layers: string[]; // Layers to render\n  styles?: unknown; // Styling\n  bbox: [number, number, number, number]; // bounding box of the requested map image\n  width: number; // pixel width of returned image\n  height: number; // pixels\n  crs?: string; // crs for the image (not the bounding box)\n  format?: 'image/png'; // requested format for the return image\n};\n")),(0,n.kt)("h3",{id:"describelayer"},(0,n.kt)("inlineCode",{parentName:"h3"},"describeLayer()")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This request is not supported by all WNS servers. Use ",(0,n.kt)("inlineCode",{parentName:"p"},"getCapabilities()")," to determine if it is.")),(0,n.kt)("p",null,"Get more information about a layer. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  async describeLayer(\n    wmsParameters: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSLayerDescription>\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSDescribeLayerParameters = {\n  layer: string; // Layer to describe\n};\n")),(0,n.kt)("h3",{id:"getlegendgraphic"},(0,n.kt)("inlineCode",{parentName:"h3"},"getLegendGraphic()")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This request is not supported by all WMS servers. Use ",(0,n.kt)("inlineCode",{parentName:"p"},"getCapabilities()")," to determine if it is.")),(0,n.kt)("p",null,"Get an image with a semantic legend"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"  async getLegendGraphic(\n    wmsParameters: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType>\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export type WMSGetLegendGraphicParameters = {\n};\n")))}d.isMDXComponent=!0}}]);