"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5953],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=m(a),g=r,k=s["".concat(p,".").concat(g)]||s[g]||u[g]||i;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},29468:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={},l="ImageLoader",o={unversionedId:"modules/images/api-reference/image-loader",id:"modules/images/api-reference/image-loader",title:"ImageLoader",description:"An image loader that works under both Node.js (requires @loaders.gl/polyfills) and the browser.",source:"@site/../docs/modules/images/api-reference/image-loader.md",sourceDirName:"modules/images/api-reference",slug:"/modules/images/api-reference/image-loader",permalink:"/docs/modules/images/api-reference/image-loader",draft:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/images/api-reference/image-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"I3SLoader",permalink:"/docs/modules/i3s/api-reference/i3s-loader"},next:{title:"ImageWriter",permalink:"/docs/modules/images/api-reference/image-writer"}},p={},m=[{value:"Usage",id:"usage",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Options",id:"options",level:2},{value:"ImageBitmap Options",id:"imagebitmap-options",level:3},{value:"Remarks",id:"remarks",level:2}],d={toc:m},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"imageloader"},"ImageLoader"),(0,r.kt)("p",null,"An image loader that works under both Node.js (requires ",(0,r.kt)("inlineCode",{parentName:"p"},"@loaders.gl/polyfills"),") and the browser."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Loader"),(0,r.kt)("th",{parentName:"tr",align:null},"Characteristic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},".png"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".jpg"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".jpeg"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".gif"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".webp"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".avif"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".bmp"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".ico"),", ",(0,r.kt)("inlineCode",{parentName:"td"},".svg"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Type"),(0,r.kt)("td",{parentName:"tr",align:null},"Binary")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Format"),(0,r.kt)("td",{parentName:"tr",align:null},"PNG, JPEG, GIF, WEBP, AVIF, BMP, SVG")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Data Format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ImageBitmap"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Image"),' or "image data"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Supported APIs"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"load"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"parse"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Worker Thread"),(0,r.kt)("td",{parentName:"tr",align:null},"No (but may run on separate native thread in browsers)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Streaming"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import '@loaders.gl/polyfills'; // only needed if using under Node\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\n\nconst image = await load(url, ImageLoader, options);\n")),(0,r.kt)("h2",{id:"data-format"},"Data Format"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageLoader")," parses binary encoded images (such as JPEG or PNG images) into one of three different in-memory representations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ImageBitmap")," (",(0,r.kt)("inlineCode",{parentName:"li"},"type: 'imagebitmap"),") - Optimized image class on modern browsers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Image")," (",(0,r.kt)("inlineCode",{parentName:"li"},"type: 'image"),") - Works on all browsers, less performant."),(0,r.kt)("li",{parentName:"ul"},'An "image data object" (',(0,r.kt)("inlineCode",{parentName:"li"},"type: 'data'"),") - An ",(0,r.kt)("inlineCode",{parentName:"li"},"ImageData")," like object that can holds the raw bytes to the image and works in both browsers and Node.js")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"image.type")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'auto'")),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"image")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," to explicitly control type of returned image. ",(0,r.kt)("inlineCode",{parentName:"td"},"auto")," selects the most efficient supported format (",(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap")," on Chrome and Firefix)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"image.decode")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Applies to ",(0,r.kt)("inlineCode",{parentName:"td"},"image")," type images only, ensures image is fully decoded before loading promise resolves.")))),(0,r.kt)("h3",{id:"imagebitmap-options"},"ImageBitmap Options"),(0,r.kt)("p",null,"In addition, for ",(0,r.kt)("inlineCode",{parentName:"p"},"imagebitmap")," type images, it is possible to pass through options to ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap"},(0,r.kt)("inlineCode",{parentName:"a"},"createImageBitmap"))," to control image extraction, via the separate ",(0,r.kt)("inlineCode",{parentName:"p"},"options.imagebitmap")," object. However, for portability it may be best to avoid relying on these options for now, since some browsers do not support ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageBitmap")," options (and some browsers do not support ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageBitmap"),"s at all)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap.imageOrientation")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'none'")),(0,r.kt)("td",{parentName:"tr",align:null},"image should be flipped vertically. Either ",(0,r.kt)("inlineCode",{parentName:"td"},"'none'")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"'flipY'"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap.premultiplyAlpha")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'default'")),(0,r.kt)("td",{parentName:"tr",align:null},"Premultiply color channels by the alpha channel. One of ",(0,r.kt)("inlineCode",{parentName:"td"},"'none'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'premultiply'"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"'default'"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap.colorSpaceConversion")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'default'")),(0,r.kt)("td",{parentName:"tr",align:null},"Decode using color space conversion. Either ",(0,r.kt)("inlineCode",{parentName:"td"},"'none'")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"'default'")," default indicates implementation-specific behavior.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap.resizeWidth")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Output image width.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap.resizeHeight")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Output image height.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"imagebitmap.resizeQuality")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'low'")),(0,r.kt)("td",{parentName:"tr",align:null},"Algorithm to be used for resizing the input to match the output dimensions. One of pixelated, low (default), medium, or high.")))),(0,r.kt)("p",null,"Portability note: The exact set of ",(0,r.kt)("inlineCode",{parentName:"p"},"imagebitmap")," options supported may depend on the browser."),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"While generic, the ",(0,r.kt)("inlineCode",{parentName:"li"},"ImageLoader")," is designed with WebGL applications in mind, ensuring that loaded image data can be used to create a ",(0,r.kt)("inlineCode",{parentName:"li"},"WebGLTexture")," both in the browser and in headless gl under Node.js"),(0,r.kt)("li",{parentName:"ul"},"Node.js support requires import ",(0,r.kt)("inlineCode",{parentName:"li"},"@loaders.gl/polyfills")," before installing this module.")))}u.isMDXComponent=!0}}]);