"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1057],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),p=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,m=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=p(a),g=n,c=s["".concat(m,".").concat(g)]||s[g]||u[g]||l;return a?r.createElement(c,i(i({ref:t},d),{},{components:a})):r.createElement(c,i({ref:t},d))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=g;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[s]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},72856:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(83117),n=(a(67294),a(3905));const l={},i="loadImages",o={unversionedId:"modules/textures/api-reference/load-image-array",id:"modules/textures/api-reference/load-image-array",title:"loadImages",description:"A function that loads an array of images. Primarily intended for loading:",source:"@site/../docs/modules/textures/api-reference/load-image-array.md",sourceDirName:"modules/textures/api-reference",slug:"/modules/textures/api-reference/load-image-array",permalink:"/docs/modules/textures/api-reference/load-image-array",draft:!1,editUrl:"https://github.com/uber-web/loaders.gl/tree/master/website/../docs/modules/textures/api-reference/load-image-array.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"loadImage",permalink:"/docs/modules/textures/api-reference/load-image"},next:{title:"loadCubeImages",permalink:"/docs/modules/textures/api-reference/load-image-cube"}},m={},p=[{value:"Usage",id:"usage",level:2},{value:"getUrl Callback Parameters",id:"geturl-callback-parameters",level:2},{value:"loadImageArray(count : Number | String, getUrl : ({index}) =&gt; String, options? : Object) : image[] | image",id:"loadimagearraycount--number--string-geturl--index--string-options--object--image--image",level:3},{value:"Options",id:"options",level:2},{value:"Remarks",id:"remarks",level:2}],d={toc:p},s="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(s,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"loadimages"},"loadImages"),(0,n.kt)("p",null,"A function that loads an array of images. Primarily intended for loading:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"an array of images for a WebGL ",(0,n.kt)("inlineCode",{parentName:"li"},"TEXTURE_2D_ARRAY")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"TEXTURE_3D")," textures"),(0,n.kt)("li",{parentName:"ul"},"an array of images representing mip levels of a single WebGL ",(0,n.kt)("inlineCode",{parentName:"li"},"TEXTURE_2D")," texture or one ",(0,n.kt)("inlineCode",{parentName:"li"},"TEXTURE_CUBE")," face.")),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"Loading an array of images"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import '@loaders.gl/polyfills'; // only needed for Node.js support\nimport {loadImageArray} from `@loaders.gl/images`;\n\nconst images = await loadImageArray(count, ({index}) => `filename-${index}`);\n\nfor (const image of images) {\n  ...\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import '@loaders.gl/polyfills'; // only needed for Node.js support\nimport {loadImageArray} from `@loaders.gl/images`;\n\nconst images = await loadImageArray(count,  ({index}) => `filename-${index}`, {\n  mipLevels: 'auto'\n});\n\nfor (const imageArray of images) {\n  for (const lodImage of imageArray) {\n    ...\n  }\n}\n")),(0,n.kt)("h2",{id:"geturl-callback-parameters"},"getUrl Callback Parameters"),(0,n.kt)("p",null,"the ",(0,n.kt)("inlineCode",{parentName:"p"},"getUrl")," callback will be called for each image with the following parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"index")),(0,n.kt)("td",{parentName:"tr",align:null},"The index of the image being loaded, from ",(0,n.kt)("inlineCode",{parentName:"td"},"0")," to ",(0,n.kt)("inlineCode",{parentName:"td"},"count - 1"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"lod")),(0,n.kt)("td",{parentName:"tr",align:null},"The mip level image being loaded, from ",(0,n.kt)("inlineCode",{parentName:"td"},"0")," to ",(0,n.kt)("inlineCode",{parentName:"td"},"mipLevels - 1"),".")))),(0,n.kt)("p",null,"Note: In addition to these values, all ",(0,n.kt)("inlineCode",{parentName:"p"},"options")," passed in to ",(0,n.kt)("inlineCode",{parentName:"p"},"loadImageArray")," are also available in the ",(0,n.kt)("inlineCode",{parentName:"p"},"getUrl")," method."),(0,n.kt)("h3",{id:"loadimagearraycount--number--string-geturl--index--string-options--object--image--image"},"loadImageArray(count : Number | String, getUrl : ({index}) => String, options? : Object) : image[] | image","[][]"),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"count"),": Number of images to load."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"getUrl"),": A function that generates the url for each image, it is called for each image with the ",(0,n.kt)("inlineCode",{parentName:"li"},"index")," of that image."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options"),": Supports the same options as ",(0,n.kt)("a",{parentName:"li",href:"modules/images/docs/api-reference/image-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"ImageLoader")),".")),(0,n.kt)("p",null,"Returns"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"an array of images (or array of arrays of mip images)")),(0,n.kt)("h2",{id:"options"},"Options"),(0,n.kt)("p",null,"Accepts the same options as ",(0,n.kt)("a",{parentName:"p",href:"modules/images/docs/api-reference/image-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"ImageLoader")),", and"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Option"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null}))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"image.mipLevels")),(0,n.kt)("td",{parentName:"tr",align:null},"`Number"),(0,n.kt)("td",{parentName:"tr",align:null},"String`"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"0")),(0,n.kt)("td",{parentName:"tr",align:null},"If ",(0,n.kt)("inlineCode",{parentName:"td"},"'auto'")," or non-zero, loads an array of mip images.")))),(0,n.kt)("p",null,"Number of mip level images to load: Use ",(0,n.kt)("inlineCode",{parentName:"p"},"0")," to indicate a single image with no mips. Supplying the string ",(0,n.kt)("inlineCode",{parentName:"p"},"'auto'")," will infer the mipLevel from the size of the ",(0,n.kt)("inlineCode",{parentName:"p"},"lod"),"=",(0,n.kt)("inlineCode",{parentName:"p"},"0")," image."),(0,n.kt)("h2",{id:"remarks"},"Remarks"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returned images can be passed directly to WebGL texture methods. See ",(0,n.kt)("a",{parentName:"li",href:"modules/images/docs/api-reference/image-loader"},(0,n.kt)("inlineCode",{parentName:"a"},"ImageLoader"))," for details about the type of the returned images.")))}u.isMDXComponent=!0}}]);